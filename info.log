2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:31:22 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:31:22 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:31:22 Whaaat? hr
2020/03/18 22:31:22 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:31:22 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:22 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:31:22 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:31:22 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:22 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:31:22 Whaaat? hr
2020/03/18 22:31:22 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:31:22 Segment &{h2 Heading 1 map[]}
2020/03/18 22:31:22 Segment &{h3 Heading 1 map[]}
2020/03/18 22:31:22 Segment &{h4 Heading 1 map[]}
2020/03/18 22:31:22 Segment &{h5 Heading 1 map[]}
2020/03/18 22:31:22 Segment &{h6 Heading 1 map[]}
2020/03/18 22:31:22 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:31:22 Whaaat? hr
2020/03/18 22:31:22 Whaaat? hr
2020/03/18 22:31:22 Whaaat? hr
2020/03/18 22:31:22 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:31:22 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:31:22 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:31:22 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:31:22 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:31:22 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:31:22 Segment &{Emphasis 1 map[]}
2020/03/18 22:31:22 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:22 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:22 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:22 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:22 Segment &{Strikethrough 1 map[]}
2020/03/18 22:31:22 Segment &{Blockquotes 1 map[]}
2020/03/18 22:31:22 Segment &{Lists 1 map[]}
2020/03/18 22:31:22 Segment &{Unordered 1 map[]}
2020/03/18 22:31:22 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:22 Segment &{+ 9 map[]}
2020/03/18 22:31:22 Segment &{,  1 map[]}
2020/03/18 22:31:22 Segment &{- 9 map[]}
2020/03/18 22:31:22 Segment &{, or  1 map[]}
2020/03/18 22:31:22 Segment &{* 9 map[]}
2020/03/18 22:31:22 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{,  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{, or  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:22 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:22 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:22 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:22 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:22 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:22 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:22 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:22 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:22 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:22 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:22 Segment &{Ordered 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Code 1 map[]}
2020/03/18 22:31:22 Segment &{Inline  1 map[]}
2020/03/18 22:31:22 Segment &{code 9 map[]}
2020/03/18 22:31:22 Segment &{Indented code 1 map[]}
2020/03/18 22:31:22 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:31:22 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:31:22 Segment &{Tables 1 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Links 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:31:22 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:31:22 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:31:22 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:31:22 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:31:22 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:31:22 Segment &{Images 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:31:22 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:31:22 Segment &{Plugins 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:31:22 Segment &{The killer feature of  1 map[]}
2020/03/18 22:31:22 Segment &{markdown-it 9 map[]}
2020/03/18 22:31:22 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:31:22 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:31:22 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:31:22 Segment &{see  1 map[]}
2020/03/18 22:31:22 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:31:22 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:31:22 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:31:22 Segment &{ /  1 map[]}
2020/03/18 22:31:22 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:31:22 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:22 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:22 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:22 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:31:22 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:31:22 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:31:22 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:31:22 Segment &{==Marked text== 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:31:22 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:31:22 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:31:22 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:31:22 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:31:22 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:31:22 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:31:22 Segment &{can have markup 5 map[]}
2020/03/18 22:31:22 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:31:22 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:31:22 Whaaat? dl
2020/03/18 22:31:22 Segment &{Compact style: 3 map[]}
2020/03/18 22:31:22 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:31:22 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:31:22 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:31:22 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:31:22 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:31:22 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:31:22 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:31:22 Segment &{::: warning
 1 map[]}
2020/03/18 22:31:22 Segment &{here be dragons 3 map[]}
2020/03/18 22:31:22 Segment &{
::: 1 map[]}
2020/03/18 22:31:22 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:31:22 Segment &{test 1 map[]}
2020/03/18 22:31:22 Segment &{hello there. this is  1 map[]}
2020/03/18 22:31:22 Segment &{formatted with  3 map[]}
2020/03/18 22:31:22 Segment &{bold 7 map[]}
2020/03/18 22:31:22 Segment &{ and 3 map[]}
2020/03/18 22:31:22 Segment &{ with some  1 map[]}
2020/03/18 22:31:22 Segment &{bold text 5 map[]}
2020/03/18 22:31:22 Segment &{ and some  1 map[]}
2020/03/18 22:31:22 Segment &{inline code 9 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:31:22 Segment &{As a special treat,  1 map[]}
2020/03/18 22:31:22 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:31:22 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:31:22 Segment &{foofoo 1 map[]}
2020/03/18 22:31:22 Segment &{Heading 3 1 map[]}
2020/03/18 22:31:22 Segment &{heading 3 content 1 map[]}
2020/03/18 22:31:22 Segment &{Heading 4 1 map[]}
2020/03/18 22:31:22 Segment &{heading 4 content 1 map[]}
2020/03/18 22:31:22 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:31:22 Segment &{Heading 5 1 map[]}
2020/03/18 22:31:22 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:31:22 Segment &{one 1 map[]}
2020/03/18 22:31:22 Segment &{one 1 map[]}
2020/03/18 22:31:22 Segment &{two 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{with some code
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:22 Segment &{inline code 9 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{inner list biatch 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{number 2 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{two 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:22 Segment &{inline code 9 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{three 1 map[]}
2020/03/18 22:31:22 Segment &{three 1 map[]}
2020/03/18 22:31:22 Segment &{Heading 6 1 map[]}
2020/03/18 22:31:22 Segment &{heading 6 content 1 map[]}
2020/03/18 22:31:22 Segment &{####### H7? 1 map[]}
2020/03/18 22:31:22 Segment &{no such thing 1 map[]}
2020/03/18 22:31:22 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:31:22 Segment &{DUMP 1 map[]}
2020/03/18 22:31:22 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:31:22 Segment &{netstat 1 map[]}
2020/03/18 22:31:22 Segment &{(or  1 map[]}
2020/03/18 22:31:22 Segment &{ss 9 map[]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:31:22 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:31:22 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:31:22 Segment &{libexec 1 map[]}
2020/03/18 22:31:22 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:31:22 Segment &{ack 1 map[]}
2020/03/18 22:31:22 Segment &{speedtest 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:31:22 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:31:22 Segment &{rsync 1 map[]}
2020/03/18 22:31:22 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:31:22 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:31:22 Segment &{kubernetes 1 map[]}
2020/03/18 22:31:22 Segment &{hls 1 map[]}
2020/03/18 22:31:22 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:31:22 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:31:22 Segment &{akka 1 map[]}
2020/03/18 22:31:22 Segment &{overview 1 map[]}
2020/03/18 22:31:22 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:31:22 Segment &{domain approach: 5 map[]}
2020/03/18 22:31:22 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:31:22 Segment &{worker systems: 5 map[]}
2020/03/18 22:31:22 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:31:22 Segment &{messaging styles: 5 map[]}
2020/03/18 22:31:22 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:31:22 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:31:22 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:31:22 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:31:22 Segment &{creating actors 1 map[]}
2020/03/18 22:31:22 Segment &{messages 1 map[]}
2020/03/18 22:31:22 Segment &{actors 1 map[]}
2020/03/18 22:31:22 Segment &{actor system 1 map[]}
2020/03/18 22:31:22 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:31:22 Segment &{ActorRef 9 map[]}
2020/03/18 22:31:22 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:31:22 Segment &{Remember to use  1 map[]}
2020/03/18 22:31:22 Segment &{self 9 map[]}
2020/03/18 22:31:22 Segment &{ rather than  1 map[]}
2020/03/18 22:31:22 Segment &{this 9 map[]}
2020/03/18 22:31:22 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:31:22 Segment &{self 9 map[]}
2020/03/18 22:31:22 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:31:22 Segment &{this 9 map[]}
2020/03/18 22:31:22 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:31:22 Segment &{actor system 1 map[]}
2020/03/18 22:31:22 Segment &{actorOf 9 map[]}
2020/03/18 22:31:22 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:31:22 Segment &{message 1 map[]}
2020/03/18 22:31:22 Segment &{error handling 1 map[]}
2020/03/18 22:31:22 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:31:22 Segment &{supervisor 5 map[]}
2020/03/18 22:31:22 Segment &{ of the child 1 map[]}
2020/03/18 22:31:22 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:31:22 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:31:22 Segment &{strategies 5 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{supervision 1 map[]}
2020/03/18 22:31:22 Segment &{strategies 1 map[]}
2020/03/18 22:31:22 Segment &{actor paths 1 map[]}
2020/03/18 22:31:22 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:31:22 Segment &{monitoring 1 map[]}
2020/03/18 22:31:22 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:31:22 Segment &{lifecycle 1 map[]}
2020/03/18 22:31:22 Segment &{dispatching 1 map[]}
2020/03/18 22:31:22 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:31:22 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:31:22 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:31:22 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:31:22 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:31:22 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:31:22 Segment &{scheduling 1 map[]}
2020/03/18 22:31:22 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:31:22 Segment &{dead letter 1 map[]}
2020/03/18 22:31:22 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:31:22 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:31:22 Segment &{routing 1 map[]}
2020/03/18 22:31:22 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:31:22 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:31:22 Segment &{akka.routing 9 map[]}
2020/03/18 22:31:22 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:31:22 Segment &{example 1 map[]}
2020/03/18 22:31:22 Segment &{strategies 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{creating routers 1 map[]}
2020/03/18 22:31:22 Segment &{akka streams 1 map[]}
2020/03/18 22:31:22 Segment &{split and aggregate 1 map[]}
2020/03/18 22:31:22 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:31:22 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:31:22 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:31:22 Segment &{links [links] 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:31:22 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:31:22 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:31:22 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:31:22 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:31:22 Segment &{
   1 map[]}
2020/03/18 22:31:22 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{
   1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:31:22 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:31:22 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:31:22 Segment &{
   1 map[]}
2020/03/18 22:31:22 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{
   1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:31:22 Segment &{apache 1 map[]}
2020/03/18 22:31:22 Segment &{local server 1 map[]}
2020/03/18 22:31:22 Segment &{apache config 5 map[]}
2020/03/18 22:31:22 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:31:22 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:31:22 Segment &{config changes 1 map[]}
2020/03/18 22:31:22 Segment &{in  1 map[]}
2020/03/18 22:31:22 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:31:22 Segment &{: uncommented 1 map[]}
2020/03/18 22:31:22 Segment &{In  1 map[]}
2020/03/18 22:31:22 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:31:22 Segment &{, uncommented: 1 map[]}
2020/03/18 22:31:22 Segment &{commands 1 map[]}
2020/03/18 22:31:22 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:31:22 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:31:22 Segment &{usage 1 map[]}
2020/03/18 22:31:22 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:31:22 Segment &{AWS CLI 1 map[]}
2020/03/18 22:31:22 Segment &{Install 1 map[]}
2020/03/18 22:31:22 Segment &{Configure 1 map[]}
2020/03/18 22:31:22 Segment &{Profiles 1 map[]}
2020/03/18 22:31:22 Segment &{To use a Profile  1 map[]}
2020/03/18 22:31:22 Segment &{--profile <name> 9 map[]}
2020/03/18 22:31:22 Segment &{ in the command 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:31:22 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:31:22 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:31:22 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:31:22 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:31:22 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:31:22 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:31:22 Segment &{labs:  1 map[]}
2020/03/18 22:31:22 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:31:22 Segment &{labs:  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{Acronyms 1 map[]}
2020/03/18 22:31:22 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:31:22 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:31:22 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:31:22 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:31:22 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:31:22 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:31:22 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:31:22 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:31:22 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:31:22 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:31:22 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:31:22 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:31:22 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:31:22 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:31:22 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:31:22 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:31:22 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:31:22 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:31:22 Segment &{Protocols 1 map[]}
2020/03/18 22:31:22 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:31:22 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:31:22 Segment &{Services 1 map[]}
2020/03/18 22:31:22 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:31:22 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:31:22 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:31:22 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:31:22 Segment &{CloudTrail 1 map[]}
2020/03/18 22:31:22 Segment &{reveals account activity 1 map[]}
2020/03/18 22:31:22 Segment &{AWS Config 1 map[]}
2020/03/18 22:31:22 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:31:22 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:31:22 Segment &{Private Link 1 map[]}
2020/03/18 22:31:22 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:31:22 Segment &{AWS Shield 1 map[]}
2020/03/18 22:31:22 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:31:22 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:31:22 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:31:22 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:31:22 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:31:22 Segment &{Module 0 1 map[]}
2020/03/18 22:31:22 Segment &{Best Practicies 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:31:22 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:31:22 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:31:22 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:31:22 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:31:22 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:31:22 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:31:22 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:31:22 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:31:22 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:31:22 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:31:22 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:31:22 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:31:22 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:31:22 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:31:22 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:31:22 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:31:22 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:31:22 Segment &{no integration 1 map[]}
2020/03/18 22:31:22 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:31:22 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:31:22 Segment &{centralised control 1 map[]}
2020/03/18 22:31:22 Segment &{centralised control 1 map[]}
2020/03/18 22:31:22 Segment &{single bill 1 map[]}
2020/03/18 22:31:22 Segment &{single bill 1 map[]}
2020/03/18 22:31:22 Segment &{single instance pools 1 map[]}
2020/03/18 22:31:22 Segment &{single instance pools 1 map[]}
2020/03/18 22:31:22 Segment &{complex admin 1 map[]}
2020/03/18 22:31:22 Segment &{complex admin 1 map[]}
2020/03/18 22:31:22 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:31:22 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:31:22 Segment &{security 1 map[]}
2020/03/18 22:31:22 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:31:22 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:31:22 Segment &{ can be made. 1 map[]}
2020/03/18 22:31:22 Segment &{Policy based management 1 map[]}
2020/03/18 22:31:22 Segment &{Service control policy 5 map[]}
2020/03/18 22:31:22 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:31:22 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:31:22 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:31:22 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:31:22 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:31:22 Segment &{Resource groups 1 map[]}
2020/03/18 22:31:22 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:31:22 Segment &{Module 2 1 map[]}
2020/03/18 22:31:22 Segment &{VPC Peering 1 map[]}
2020/03/18 22:31:22 Segment &{EC2 1 map[]}
2020/03/18 22:31:22 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:31:22 Segment &{Create an  1 map[]}
2020/03/18 22:31:22 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:31:22 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:31:22 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:31:22 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:31:22 Segment &{VPN Connections 1 map[]}
2020/03/18 22:31:22 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:31:22 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:31:22 Segment &{BGP 1 map[]}
2020/03/18 22:31:22 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:31:22 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:31:22 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:31:22 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:31:22 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:31:22 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:31:22 Segment &{Scaling 1 map[]}
2020/03/18 22:31:22 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:31:22 Segment &{Lookup 1 map[]}
2020/03/18 22:31:22 Segment &{split brain condition 1 map[]}
2020/03/18 22:31:22 Segment &{split brain condition 1 map[]}
2020/03/18 22:31:22 Segment &{Base64 1 map[]}
2020/03/18 22:31:22 Segment &{to binary 1 map[]}
2020/03/18 22:31:22 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:31:22 Segment &{bash 1 map[]}
2020/03/18 22:31:22 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:31:22 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{networksetup 1 map[]}
2020/03/18 22:31:22 Segment &{configuring network settings 1 map[]}
2020/03/18 22:31:22 Segment &{logging 1 map[]}
2020/03/18 22:31:22 Segment &{f = live follow 1 map[]}
2020/03/18 22:31:22 Segment &{f = live follow 1 map[]}
2020/03/18 22:31:22 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:31:22 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:31:22 Segment &{shebang 1 map[]}
2020/03/18 22:31:22 Segment &{variable 1 map[]}
2020/03/18 22:31:22 Segment &{special variables 5 map[]}
2020/03/18 22:31:22 Segment &{chmod 1 map[]}
2020/03/18 22:31:22 Segment &{numerical 5 map[]}
2020/03/18 22:31:22 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:31:22 Segment &{homebrew 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:31:22 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{list packages: 1 map[]}
2020/03/18 22:31:22 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:31:22 Segment &{Browserstack 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:31:22 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:31:22 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:31:22 Segment &{This requires you have the  1 map[]}
2020/03/18 22:31:22 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:31:22 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:31:22 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:31:22 Segment &{c 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:31:22 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:31:22 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:31:22 Segment &{; 1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{; 1 map[]}
2020/03/18 22:31:22 Segment &{basics 1 map[]}
2020/03/18 22:31:22 Segment &{native methods 1 map[]}
2020/03/18 22:31:22 Segment &{stdio 1 map[]}
2020/03/18 22:31:22 Segment &{import 5 map[]}
2020/03/18 22:31:22 Segment &{printf 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{scanf 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{fgets 5 map[]}
2020/03/18 22:31:22 Segment &{fputs 5 map[]}
2020/03/18 22:31:22 Segment &{puts 5 map[]}
2020/03/18 22:31:22 Segment &{dynamic memory 1 map[]}
2020/03/18 22:31:22 Segment &{malloc 5 map[]}
2020/03/18 22:31:22 Segment &{memcpy 5 map[]}
2020/03/18 22:31:22 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:31:22 Segment &{building 1 map[]}
2020/03/18 22:31:22 Segment &{compile and link 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{compile 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{linking 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:31:22 Segment &{libraries 1 map[]}
2020/03/18 22:31:22 Segment &{static 5 map[]}
2020/03/18 22:31:22 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:31:22 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:31:22 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:31:22 Segment &{gives you the file  1 map[]}
2020/03/18 22:31:22 Segment &{libname.a 9 map[]}
2020/03/18 22:31:22 Segment &{list files in lib 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:31:22 Segment &{camel 1 map[]}
2020/03/18 22:31:22 Segment &{testing 1 map[]}
2020/03/18 22:31:22 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:31:22 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:31:22 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:31:22 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:31:22 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:31:22 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:31:22 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:31:22 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:31:22 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:31:22 Segment &{systemctl 9 map[]}
2020/03/18 22:31:22 Segment &{ rather than  1 map[]}
2020/03/18 22:31:22 Segment &{service 9 map[]}
2020/03/18 22:31:22 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:31:22 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:31:22 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:31:22 Segment &{): 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:31:22 Segment &{More info here:  1 map[]}
2020/03/18 22:31:22 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:31:22 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:31:22 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:31:22 Segment &{certs 1 map[]}
2020/03/18 22:31:22 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:22 Segment &{cert.p12 5 map[]}
2020/03/18 22:31:22 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:31:22 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:31:22 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:22 Segment &{certificate.pem 5 map[]}
2020/03/18 22:31:22 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:31:22 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:31:22 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:31:22 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:31:22 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{create PEM 1 map[]}
2020/03/18 22:31:22 Segment &{Or with no target password 1 map[]}
2020/03/18 22:31:22 Segment &{Chrome issue 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{svn issue 1 map[]}
2020/03/18 22:31:22 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:31:22 Segment &{Hi all, 1 map[]}
2020/03/18 22:31:22 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:31:22 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:31:22 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:31:22 Segment &{google structured data 1 map[]}
2020/03/18 22:31:22 Segment &{claim review 1 map[]}
2020/03/18 22:31:22 Segment &{required fields 5 map[]}
2020/03/18 22:31:22 Segment &{reviewRating 1 map[]}
2020/03/18 22:31:22 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:31:22 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:31:22 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:31:22 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:31:22 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:31:22 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:31:22 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:31:22 Segment &{what we’re missing 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type 1 map[]}
2020/03/18 22:31:22 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:31:22 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:31:22 Segment &{[x] url 1 map[]}
2020/03/18 22:31:22 Segment &{[x] url 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:31:22 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] type 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] name 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:31:22 Segment &{[x] type 1 map[]}
2020/03/18 22:31:22 Segment &{[x] type 1 map[]}
2020/03/18 22:31:22 Segment &{[x] name 1 map[]}
2020/03/18 22:31:22 Segment &{[x] name 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:22 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:22 Segment &{case examples 1 map[]}
2020/03/18 22:31:22 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:31:22 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:31:22 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:31:22 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:31:22 Segment &{coffee script 1 map[]}
2020/03/18 22:31:22 Segment &{functions 1 map[]}
2020/03/18 22:31:22 Segment &{With default values: 1 map[]}
2020/03/18 22:31:22 Segment &{objects 1 map[]}
2020/03/18 22:31:22 Segment &{classes 1 map[]}
2020/03/18 22:31:22 Segment &{splats 1 map[]}
2020/03/18 22:31:22 Segment &{comprehensions 1 map[]}
2020/03/18 22:31:22 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:31:22 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:31:22 Segment &{create stack 1 map[]}
2020/03/18 22:31:22 Segment &{deploy 1 map[]}
2020/03/18 22:31:22 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:31:22 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:31:22 Segment &{curl 1 map[]}
2020/03/18 22:31:22 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:31:22 Segment &{cert 1 map[]}
2020/03/18 22:31:22 Segment &{curl with cert 1 map[]}
2020/03/18 22:31:22 Segment &{with response headers: 1 map[]}
2020/03/18 22:31:22 Segment &{output 1 map[]}
2020/03/18 22:31:22 Segment &{Write output to file 1 map[]}
2020/03/18 22:31:22 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:31:22 Segment &{curses 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:31:22 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:31:22 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{compile 5 map[]}
2020/03/18 22:31:22 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:31:22 Segment &{setup 1 map[]}
2020/03/18 22:31:22 Segment &{screen 1 map[]}
2020/03/18 22:31:22 Segment &{screen dump 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{printing 1 map[]}
2020/03/18 22:31:22 Segment &{output 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{attributes 1 map[]}
2020/03/18 22:31:22 Segment &{attribute options 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{colours 1 map[]}
2020/03/18 22:31:22 Segment &{colours 5 map[]}
2020/03/18 22:31:22 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:31:22 Segment &{reading 1 map[]}
2020/03/18 22:31:22 Segment &{keys constants 5 map[]}
2020/03/18 22:31:22 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:31:22 Segment &{mouse 1 map[]}
2020/03/18 22:31:22 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:31:22 Segment &{MEVENT 5 map[]}
2020/03/18 22:31:22 Segment &{ looks like this: 1 map[]}
2020/03/18 22:31:22 Segment &{key masks 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:31:22 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:31:22 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:31:22 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:31:22 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:22 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:31:22 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:31:22 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:31:22 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:31:22 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:31:22 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:31:22 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:31:22 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:31:22 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:31:22 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:31:22 Segment &{D 1 map[]}
2020/03/18 22:31:22 Segment &{## dmd 1 map[]}
2020/03/18 22:31:22 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:31:22 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:31:22 Segment &{Paradigms 1 map[]}
2020/03/18 22:31:22 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:31:22 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:31:22 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:31:22 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:31:22 Segment &{concurrency 1 map[]}
2020/03/18 22:31:22 Segment &{concurrency 1 map[]}
2020/03/18 22:31:22 Segment &{meta programming 1 map[]}
2020/03/18 22:31:22 Segment &{meta programming 1 map[]}
2020/03/18 22:31:22 Segment &{Tools 1 map[]}
2020/03/18 22:31:22 Segment &{dmd 1 map[]}
2020/03/18 22:31:22 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:31:22 Segment &{Libraries 1 map[]}
2020/03/18 22:31:22 Segment &{Phobos 1 map[]}
2020/03/18 22:31:22 Segment &{Offical D library 1 map[]}
2020/03/18 22:31:22 Segment &{stl 1 map[]}
2020/03/18 22:31:22 Segment &{Resources 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:31:22 Segment &{conf:  1 map[]}
2020/03/18 22:31:22 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:31:22 Segment &{conf:  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:31:22 Segment &{lang:  1 map[]}
2020/03/18 22:31:22 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:31:22 Segment &{lang:  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:31:22 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:31:22 Segment &{Types and Operators 1 map[]}
2020/03/18 22:31:22 Segment &{Integral Types 1 map[]}
2020/03/18 22:31:22 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{16 bit 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{8 bit types 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{conversions 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{non decimal 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{floating points 1 map[]}
2020/03/18 22:31:22 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:31:22 Segment &{dagger 1 map[]}
2020/03/18 22:31:22 Segment &{annotations 1 map[]}
2020/03/18 22:31:22 Segment &{provider annotation 1 map[]}
2020/03/18 22:31:22 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:31:22 Segment &{docker 1 map[]}
2020/03/18 22:31:22 Segment &{introduction 1 map[]}
2020/03/18 22:31:22 Segment &{5 core products: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{supporting products: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{hypervisors 1 map[]}
2020/03/18 22:31:22 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{namespaces 5 map[]}
2020/03/18 22:31:22 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:31:22 Segment &{installation 1 map[]}
2020/03/18 22:31:22 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:31:22 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:31:22 Segment &{setup 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:31:22 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:31:22 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:31:22 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{$ docker version 1 map[]}
2020/03/18 22:31:22 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:31:22 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:31:22 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:31:22 Segment &{// this is the vm 1 map[]}
2020/03/18 22:31:22 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:31:22 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine start  1 map[]}
2020/03/18 22:31:22 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:31:22 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:31:22 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:31:22 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:31:22 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:31:22 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:31:22 Segment &{tagging 1 map[]}
2020/03/18 22:31:22 Segment &{images 5 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{containers 5 map[]}
2020/03/18 22:31:22 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:31:22 Segment &{building 1 map[]}
2020/03/18 22:31:22 Segment &{Each  1 map[]}
2020/03/18 22:31:22 Segment &{layer 5 map[]}
2020/03/18 22:31:22 Segment &{ in an image is  1 map[]}
2020/03/18 22:31:22 Segment &{read only 5 map[]}
2020/03/18 22:31:22 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:31:22 Segment &{writeable layer 5 map[]}
2020/03/18 22:31:22 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:31:22 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:31:22 Segment &{build a new image from a  1 map[]}
2020/03/18 22:31:22 Segment &{build context 5 map[]}
2020/03/18 22:31:22 Segment &{running [run] 1 map[]}
2020/03/18 22:31:22 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:31:22 Segment &{default command 5 map[]}
2020/03/18 22:31:22 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:31:22 Segment &{stop a container 1 map[]}
2020/03/18 22:31:22 Segment &{tagging 1 map[]}
2020/03/18 22:31:22 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:31:22 Segment &{containers 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{container 5 map[]}
2020/03/18 22:31:22 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:31:22 Segment &{view containers 1 map[]}
2020/03/18 22:31:22 Segment &{run a container 1 map[]}
2020/03/18 22:31:22 Segment &{save a change: 1 map[]}
2020/03/18 22:31:22 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:31:22 Segment &{inspect 1 map[]}
2020/03/18 22:31:22 Segment &{management 1 map[]}
2020/03/18 22:31:22 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:31:22 Segment &{docker create 5 map[]}
2020/03/18 22:31:22 Segment &{ command 1 map[]}
2020/03/18 22:31:22 Segment &{To stop a container 1 map[]}
2020/03/18 22:31:22 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:31:22 Segment &{terminal access 1 map[]}
2020/03/18 22:31:22 Segment &{Use  1 map[]}
2020/03/18 22:31:22 Segment &{docker exec 5 map[]}
2020/03/18 22:31:22 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:31:22 Segment &{remove 1 map[]}
2020/03/18 22:31:22 Segment &{images 5 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{containers 5 map[]}
2020/03/18 22:31:22 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:31:22 Segment &{remove containers 1 map[]}
2020/03/18 22:31:22 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:31:22 Segment &{port mapping 1 map[]}
2020/03/18 22:31:22 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:31:22 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:31:22 Segment &{use  1 map[]}
2020/03/18 22:31:22 Segment &{EXPOSE 5 map[]}
2020/03/18 22:31:22 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:31:22 Segment &{hub 1 map[]}
2020/03/18 22:31:22 Segment &{login 1 map[]}
2020/03/18 22:31:22 Segment &{PUSH 5 map[]}
2020/03/18 22:31:22 Segment &{
push the new version 1 map[]}
2020/03/18 22:31:22 Segment &{PULL 5 map[]}
2020/03/18 22:31:22 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:31:22 Segment &{configuration 1 map[]}
2020/03/18 22:31:22 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:31:22 Segment &{to set this up: 1 map[]}
2020/03/18 22:31:22 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:31:22 Segment &{remote daemon 1 map[]}
2020/03/18 22:31:22 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:31:22 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:31:22 Segment &{-H 9 map[]}
2020/03/18 22:31:22 Segment &{ flag 1 map[]}
2020/03/18 22:31:22 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:31:22 Segment &{logging 1 map[]}
2020/03/18 22:31:22 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:31:22 Segment &{print all log for a container 1 map[]}
2020/03/18 22:31:22 Segment &{dockerfile 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{docker file 5 map[]}
2020/03/18 22:31:22 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:31:22 Segment &{Save it as  1 map[]}
2020/03/18 22:31:22 Segment &{Dockerfile 9 map[]}
2020/03/18 22:31:22 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:31:22 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:31:22 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:31:22 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:31:22 Segment &{instructions 1 map[]}
2020/03/18 22:31:22 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:31:22 Segment &{FROM 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:31:22 Segment &{RUN 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:31:22 Segment &{ADD 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:31:22 Segment &{CMD 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{override the default command 1 map[]}
2020/03/18 22:31:22 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:31:22 Segment &{running this: 1 map[]}
2020/03/18 22:31:22 Segment &{ENV 5 map[]}
2020/03/18 22:31:22 Segment &{set environment variables 1 map[]}
2020/03/18 22:31:22 Segment &{VOLUME 5 map[]}
2020/03/18 22:31:22 Segment &{specific a volume 1 map[]}
2020/03/18 22:31:22 Segment &{build context 1 map[]}
2020/03/18 22:31:22 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:31:22 Segment &{volumes 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{volume 5 map[]}
2020/03/18 22:31:22 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{simple volume 5 map[]}
2020/03/18 22:31:22 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:31:22 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:31:22 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:31:22 Segment &{host volumes 5 map[]}
2020/03/18 22:31:22 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:31:22 Segment &{overwritten 3 map[]}
2020/03/18 22:31:22 Segment &{named volumes 5 map[]}
2020/03/18 22:31:22 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:31:22 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:31:22 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:31:22 Segment &{dangling volumes 1 map[]}
2020/03/18 22:31:22 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:31:22 Segment &{networking 1 map[]}
2020/03/18 22:31:22 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:31:22 Segment &{list networks: 1 map[]}
2020/03/18 22:31:22 Segment &{create a network 1 map[]}
2020/03/18 22:31:22 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:31:22 Segment &{use a network: 1 map[]}
2020/03/18 22:31:22 Segment &{inspect network: 1 map[]}
2020/03/18 22:31:22 Segment &{remove a network 1 map[]}
2020/03/18 22:31:22 Segment &{network types 1 map[]}
2020/03/18 22:31:22 Segment &{NONE 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{no network 1 map[]}
2020/03/18 22:31:22 Segment &{HOST 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{shares the host network 1 map[]}
2020/03/18 22:31:22 Segment &{BRIDGE 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:31:22 Segment &{requires  linking: 1 map[]}
2020/03/18 22:31:22 Segment &{a  1 map[]}
2020/03/18 22:31:22 Segment &{container link 5 map[]}
2020/03/18 22:31:22 Segment &{continuous integration 1 map[]}
2020/03/18 22:31:22 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:31:22 Segment &{dockerhub 5 map[]}
2020/03/18 22:31:22 Segment &{ has an  1 map[]}
2020/03/18 22:31:22 Segment &{autobuild 5 map[]}
2020/03/18 22:31:22 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:31:22 Segment &{docker compose 1 map[]}
2020/03/18 22:31:22 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:31:22 Segment &{yaml 5 map[]}
2020/03/18 22:31:22 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:31:22 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:31:22 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:31:22 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:31:22 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:31:22 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:31:22 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:31:22 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:31:22 Segment &{eslint 1 map[]}
2020/03/18 22:31:22 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:31:22 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:31:22 Segment &{configuring 1 map[]}
2020/03/18 22:31:22 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:31:22 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:31:22 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:31:22 Segment &{config file 1 map[]}
2020/03/18 22:31:22 Segment &{.eslintrc 9 map[]}
2020/03/18 22:31:22 Segment &{rules 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:31:22 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:31:22 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:31:22 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:31:22 Segment &{gcc 1 map[]}
2020/03/18 22:31:22 Segment &{show include paths: 1 map[]}
2020/03/18 22:31:22 Segment &{show linker paths: 1 map[]}
2020/03/18 22:31:22 Segment &{options 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:31:22 Segment &{see  1 map[]}
2020/03/18 22:31:22 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:31:22 Segment &{compile 1 map[]}
2020/03/18 22:31:22 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:31:22 Segment &{-I 9 map[]}
2020/03/18 22:31:22 Segment &{ option. 1 map[]}
2020/03/18 22:31:22 Segment &{link 1 map[]}
2020/03/18 22:31:22 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:31:22 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:31:22 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:31:22 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:31:22 Segment &{-L 9 map[]}
2020/03/18 22:31:22 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:31:22 Segment &{-l 9 map[]}
2020/03/18 22:31:22 Segment &{ options 1 map[]}
2020/03/18 22:31:22 Segment &{e.g 1 map[]}
2020/03/18 22:31:22 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:31:22 Segment &{lib 9 map[]}
2020/03/18 22:31:22 Segment &{ prefix 1 map[]}
2020/03/18 22:31:22 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:31:22 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:31:22 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:31:22 Segment &{Security 1 map[]}
2020/03/18 22:31:22 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:31:22 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:31:22 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:31:22 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:31:22 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:31:22 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:31:22 Segment &{Handling personal data 1 map[]}
2020/03/18 22:31:22 Segment &{4 principles: 1 map[]}
2020/03/18 22:31:22 Segment &{1 Accountability 1 map[]}
2020/03/18 22:31:22 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:31:22 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:31:22 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:31:22 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:31:22 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:31:22 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:31:22 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:31:22 Segment &{2 Transparency 1 map[]}
2020/03/18 22:31:22 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:31:22 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:31:22 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:31:22 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:31:22 Segment &{4 Data portability 1 map[]}
2020/03/18 22:31:22 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:31:22 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:31:22 Segment &{Breach 1 map[]}
2020/03/18 22:31:22 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:31:22 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:31:22 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:31:22 Segment &{Summary 1 map[]}
2020/03/18 22:31:22 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:31:22 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:31:22 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:31:22 Segment &{Scams 1 map[]}
2020/03/18 22:31:22 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:31:22 Segment &{Phishing 1 map[]}
2020/03/18 22:31:22 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:31:22 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:31:22 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:31:22 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:31:22 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:31:22 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:31:22 Segment &{Misleading sender 1 map[]}
2020/03/18 22:31:22 Segment &{Misleading sender 1 map[]}
2020/03/18 22:31:22 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:31:22 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:31:22 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:31:22 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:31:22 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:31:22 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:31:22 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:31:22 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:31:22 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:31:22 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:31:22 Segment &{Passwords 1 map[]}
2020/03/18 22:31:22 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:31:22 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:31:22 Segment &{Do’s 1 map[]}
2020/03/18 22:31:22 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:31:22 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:31:22 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:31:22 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:31:22 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:31:22 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:31:22 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:31:22 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:31:22 Segment &{Dont’s 1 map[]}
2020/03/18 22:31:22 Segment &{write them down 1 map[]}
2020/03/18 22:31:22 Segment &{write them down 1 map[]}
2020/03/18 22:31:22 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:31:22 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:31:22 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:31:22 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:31:22 Segment &{share the network password 1 map[]}
2020/03/18 22:31:22 Segment &{share the network password 1 map[]}
2020/03/18 22:31:22 Segment &{Email 1 map[]}
2020/03/18 22:31:22 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Handling Data 1 map[]}
2020/03/18 22:31:22 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:31:22 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:31:22 Segment &{This is known as  1 map[]}
2020/03/18 22:31:22 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:31:22 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:31:22 Segment &{PUBLIC 5 map[]}
2020/03/18 22:31:22 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:31:22 Segment &{PROTECTED 5 map[]}
2020/03/18 22:31:22 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:31:22 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:31:22 Segment &{Offline Security 1 map[]}
2020/03/18 22:31:22 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:31:22 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:31:22 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:31:22 Segment &{Help 1 map[]}
2020/03/18 22:31:22 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:31:22 Segment &{24 1 map[]}
2020/03/18 22:31:22 Segment &{⁄ 1 map[]}
2020/03/18 22:31:22 Segment &{7 1 map[]}
2020/03/18 22:31:22 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:31:22 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:31:22 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:31:22 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:31:22 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:31:22 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:31:22 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:31:22 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:31:22 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{fixing  1 map[]}
2020/03/18 22:31:22 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:31:22 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:31:22 Segment &{fixing  1 map[]}
2020/03/18 22:31:22 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:31:22 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:31:22 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:31:22 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:31:22 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:31:22 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list commits between dates 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:31:22 Segment &{list commits between dates 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:31:22 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:31:22 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:22 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:31:22 Segment &{specific folder 5 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:31:22 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:31:22 Segment &{specific folder 5 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{applying a diff file 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{run:
 1 map[]}
2020/03/18 22:31:22 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{applying a diff file 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:22 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:22 Segment &{run:
 1 map[]}
2020/03/18 22:31:22 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:31:22 Segment &{run:
 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:31:22 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{referring to: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{last commits  1 map[]}
2020/03/18 22:31:22 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:22 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{referring to: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{last commits  1 map[]}
2020/03/18 22:31:22 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:31:22 Segment &{last commits  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:22 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:31:22 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:31:22 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:31:22 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list of all tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:31:22 Segment &{list of all tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:31:22 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:31:22 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:31:22 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:31:22 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list of all developers 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:31:22 Segment &{list of all developers 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{display graph of branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{or 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:31:22 Segment &{display graph of branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{or 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{remembering the password 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:31:22 Segment &{remembering the password 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:31:22 Segment &{path to the global config 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:22 Segment &{
”` 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{path to the global config 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:22 Segment &{
”` 1 map[]}
2020/03/18 22:31:22 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:22 Whaaat? br
2020/03/18 22:31:22 Segment &{
”` 1 map[]}
2020/03/18 22:31:22 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:31:22 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:31:22 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:31:22 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{view all global settings 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:31:22 Segment &{view all global settings 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{delete tag 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:31:22 Segment &{delete tag 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{pushing tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git push --tags
 9 map[]}
2020/03/18 22:31:22 Segment &{pushing tags 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:31:22 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:31:22 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:31:22 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:31:22 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{deleting local branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:22 Segment &{deleting local branch 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list  1 map[]}
2020/03/18 22:31:22 Segment &{actual 5 map[]}
2020/03/18 22:31:22 Segment &{ remote branchs 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:31:22 Segment &{list  1 map[]}
2020/03/18 22:31:22 Segment &{actual 5 map[]}
2020/03/18 22:31:22 Segment &{ remote branchs 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch -r
 9 map[]}
2020/03/18 22:31:22 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{list all local branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch -l
 9 map[]}
2020/03/18 22:31:22 Segment &{list all local branches 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:31:22 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:31:22 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:31:22 Segment &{git 1 map[]}
2020/03/18 22:31:22 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:31:22 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:31:22 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:31:22 Segment &{diff 1 map[]}
2020/03/18 22:31:22 Segment &{options 1 map[]}
2020/03/18 22:31:22 Segment &{stat (  1 map[]}
2020/03/18 22:31:22 Segment &{--stat 9 map[]}
2020/03/18 22:31:22 Segment &{ ) 1 map[]}
2020/03/18 22:31:22 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:31:22 Segment &{clone 1 map[]}
2020/03/18 22:31:22 Segment &{push 1 map[]}
2020/03/18 22:31:22 Segment &{branch 1 map[]}
2020/03/18 22:31:22 Segment &{list §branches: 1 map[]}
2020/03/18 22:31:22 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:31:22 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:31:22 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:31:22 Segment &{remote 1 map[]}
2020/03/18 22:31:22 Segment &{config 1 map[]}
2020/03/18 22:31:22 Segment &{file located at  1 map[]}
2020/03/18 22:31:22 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{link 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:31:22 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:31:22 Segment &{reith 1 map[]}
2020/03/18 22:31:22 Segment &{setup 1 map[]}
2020/03/18 22:31:22 Segment &{Add the following in  1 map[]}
2020/03/18 22:31:22 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:31:22 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:31:22 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:31:22 Segment &{Add the following in  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:31:22 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:31:22 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{and some more
 1 map[]}
2020/03/18 22:31:22 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:31:22 Segment &{and some more
 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:31:22 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:31:22 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:31:22 Segment &{view it: 1 map[]}
2020/03/18 22:31:22 Segment &{set it: 1 map[]}
2020/03/18 22:31:22 Segment &{unset it: 1 map[]}
2020/03/18 22:31:22 Segment &{add it: 1 map[]}
2020/03/18 22:31:22 Segment &{alias 1 map[]}
2020/03/18 22:31:22 Segment &{make an alias: 1 map[]}
2020/03/18 22:31:22 Segment &{grep 1 map[]}
2020/03/18 22:31:22 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:31:22 Segment &{stash 1 map[]}
2020/03/18 22:31:22 Segment &{add and pop 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{list 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{delete 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{view 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{github 1 map[]}
2020/03/18 22:31:22 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:31:22 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:31:22 Segment &{hungarian notation 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:31:22 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:31:22 Segment &{lint 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:31:22 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:31:22 Segment &{gnuplot 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:31:22 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:31:22 Segment &{## install 1 map[]}
2020/03/18 22:31:22 Segment &{usage 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:31:22 Segment &{grep 1 map[]}
2020/03/18 22:31:22 Segment &{options 1 map[]}
2020/03/18 22:31:22 Segment &{invert match 5 map[]}
2020/03/18 22:31:22 Segment &{context 5 map[]}
2020/03/18 22:31:22 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:31:22 Segment &{Grunt 1 map[]}
2020/03/18 22:31:22 Segment &{Gruntfile 1 map[]}
2020/03/18 22:31:22 Segment &{Template  1 map[]}
2020/03/18 22:31:22 Segment &{Gruntfile 9 map[]}
2020/03/18 22:31:22 Segment &{ with  1 map[]}
2020/03/18 22:31:22 Segment &{eslint 9 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{jasmine 9 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{babel 9 map[]}
2020/03/18 22:31:22 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:31:22 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{or 1 map[]}
2020/03/18 22:31:22 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:31:22 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:31:22 Segment &{install mongo script 1 map[]}
2020/03/18 22:31:22 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:31:22 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:31:22 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:31:22 Segment &{from Anthony: 1 map[]}
2020/03/18 22:31:22 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:31:22 Segment &{Jasmine 1 map[]}
2020/03/18 22:31:22 Segment &{js testing framework 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:31:22 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:31:22 Segment &{expectations 1 map[]}
2020/03/18 22:31:22 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:31:22 Segment &{or chain with a  1 map[]}
2020/03/18 22:31:22 Segment &{.not 9 map[]}
2020/03/18 22:31:22 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:31:22 Segment &{matchers 1 map[]}
2020/03/18 22:31:22 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:31:22 Segment &{libexec 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:31:22 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:31:22 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:31:22 Segment &{lsof 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:31:22 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:31:22 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:31:22 Segment &{check ports 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:31:22 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:31:22 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:31:22 Segment &{markdown 1 map[]}
2020/03/18 22:31:22 Segment &{lists 1 map[]}
2020/03/18 22:31:22 Segment &{bulleted 5 map[]}
2020/03/18 22:31:22 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:31:22 Segment &{numbered 5 map[]}
2020/03/18 22:31:22 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:31:22 Segment &{checkbox 5 map[]}
2020/03/18 22:31:22 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:31:22 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:31:22 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:31:22 Segment &{code 1 map[]}
2020/03/18 22:31:22 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:31:22 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:31:22 Segment &{links 1 map[]}
2020/03/18 22:31:22 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:31:22 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:31:22 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:31:22 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:31:22 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:31:22 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:31:22 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:31:22 Segment &{ or i can say  1 map[]}
2020/03/18 22:31:22 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:31:22 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:31:22 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:31:22 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:31:22 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:31:22 Segment &{header 3 1 map[]}
2020/03/18 22:31:22 Segment &{blah blah 1 map[]}
2020/03/18 22:31:22 Segment &{header 4 1 map[]}
2020/03/18 22:31:22 Segment &{blah blah 1 map[]}
2020/03/18 22:31:22 Segment &{header 5 1 map[]}
2020/03/18 22:31:22 Segment &{blah blah 1 map[]}
2020/03/18 22:31:22 Segment &{Alternatively: 1 map[]}
2020/03/18 22:31:22 Segment &{blah 1 map[]}
2020/03/18 22:31:22 Segment &{blah blah 1 map[]}
2020/03/18 22:31:22 Segment &{code 1 map[]}
2020/03/18 22:31:22 Segment &{unmarked 1 map[]}
2020/03/18 22:31:22 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:31:22 Segment &{### scala 1 map[]}
2020/03/18 22:31:22 Segment &{### java 1 map[]}
2020/03/18 22:31:22 Segment &{inline formatting 1 map[]}
2020/03/18 22:31:22 Segment &{you can make string  1 map[]}
2020/03/18 22:31:22 Segment &{bold 5 map[]}
2020/03/18 22:31:22 Segment &{ like that or  1 map[]}
2020/03/18 22:31:22 Segment &{like this 5 map[]}
2020/03/18 22:31:22 Segment &{ if you like 1 map[]}
2020/03/18 22:31:22 Segment &{you can also make  1 map[]}
2020/03/18 22:31:22 Segment &{italics 3 map[]}
2020/03/18 22:31:22 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:31:22 Segment &{single underlines 3 map[]}
2020/03/18 22:31:22 Segment &{ if you prefer 1 map[]}
2020/03/18 22:31:22 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:31:22 Segment &{indented literals 1 map[]}
2020/03/18 22:31:22 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:31:22 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:31:22 Segment &{Maven 1 map[]}
2020/03/18 22:31:22 Segment &{command line 1 map[]}
2020/03/18 22:31:22 Segment &{options 1 map[]}
2020/03/18 22:31:22 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:31:22 Segment &{mongo 1 map[]}
2020/03/18 22:31:22 Segment &{To run the server: 1 map[]}
2020/03/18 22:31:22 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:31:22 Segment &{organisation 1 map[]}
2020/03/18 22:31:22 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:31:22 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:31:22 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:31:22 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:31:22 Segment &{config 1 map[]}
2020/03/18 22:31:22 Segment &{default config 3 map[]}
2020/03/18 22:31:22 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:31:22 Segment &{scale-grid 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:31:22 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:31:22 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:31:22 Segment &{crendentials 1 map[]}
2020/03/18 22:31:22 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:31:22 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:31:22 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:31:22 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:31:22 Segment &{ssh access 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:31:22 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:31:22 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{command line 1 map[]}
2020/03/18 22:31:22 Segment &{querying 1 map[]}
2020/03/18 22:31:22 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:31:22 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:31:22 Segment &{query selectors 1 map[]}
2020/03/18 22:31:22 Segment &{comparison 1 map[]}
2020/03/18 22:31:22 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:31:22 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:31:22 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:31:22 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{logical selectors 1 map[]}
2020/03/18 22:31:22 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{logical selectors 1 map[]}
2020/03/18 22:31:22 Segment &{$or 1 map[]}
2020/03/18 22:31:22 Segment &{$or 1 map[]}
2020/03/18 22:31:22 Segment &{$and 1 map[]}
2020/03/18 22:31:22 Segment &{$and 1 map[]}
2020/03/18 22:31:22 Segment &{$not 1 map[]}
2020/03/18 22:31:22 Segment &{$not 1 map[]}
2020/03/18 22:31:22 Segment &{$nor 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{element 1 map[]}
2020/03/18 22:31:22 Segment &{$nor 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{element 1 map[]}
2020/03/18 22:31:22 Segment &{$exists: 1 map[]}
2020/03/18 22:31:22 Segment &{$exists: 1 map[]}
2020/03/18 22:31:22 Segment &{$type: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{evaluation 1 map[]}
2020/03/18 22:31:22 Segment &{$type: 1 map[]}
2020/03/18 22:31:22 Segment &{

 1 map[]}
2020/03/18 22:31:22 Segment &{evaluation 1 map[]}
2020/03/18 22:31:22 Segment &{$mod: 1 map[]}
2020/03/18 22:31:22 Segment &{$mod: 1 map[]}
2020/03/18 22:31:22 Segment &{$regex: 1 map[]}
2020/03/18 22:31:22 Segment &{$regex: 1 map[]}
2020/03/18 22:31:22 Segment &{$text: 1 map[]}
2020/03/18 22:31:22 Segment &{$text: 1 map[]}
2020/03/18 22:31:22 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:31:22 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:31:22 Segment &{find 3 map[]}
2020/03/18 22:31:22 Segment &{sort 3 map[]}
2020/03/18 22:31:22 Segment &{meta 1 map[]}
2020/03/18 22:31:22 Segment &{Explain a query 1 map[]}
2020/03/18 22:31:22 Segment &{Show all indexes 1 map[]}
2020/03/18 22:31:22 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:31:22 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:31:22 Segment &{aggregation 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:31:22 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:31:22 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:31:22 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:31:22 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:31:22 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:31:22 Segment &{get some basic information 1 map[]}
2020/03/18 22:31:22 Segment &{tools to say hi 1 map[]}
2020/03/18 22:31:22 Segment &{db.version() 1 map[]}
2020/03/18 22:31:22 Segment &{db.version() 1 map[]}
2020/03/18 22:31:22 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:31:22 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:31:22 Segment &{db.isMater() 1 map[]}
2020/03/18 22:31:22 Segment &{db.isMater() 1 map[]}
2020/03/18 22:31:22 Segment &{rs.conf() 1 map[]}
2020/03/18 22:31:22 Segment &{rs.conf() 1 map[]}
2020/03/18 22:31:22 Segment &{rs.status() 1 map[]}
2020/03/18 22:31:22 Segment &{rs.status() 1 map[]}
2020/03/18 22:31:22 Segment &{showing 1 map[]}
2020/03/18 22:31:22 Segment &{shows dbs 1 map[]}
2020/03/18 22:31:22 Segment &{shows dbs 1 map[]}
2020/03/18 22:31:22 Segment &{show collections 1 map[]}
2020/03/18 22:31:22 Segment &{show collections 1 map[]}
2020/03/18 22:31:22 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:31:22 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:31:22 Segment &{more detail 1 map[]}
2020/03/18 22:31:22 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:31:22 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:31:22 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:31:22 Segment &{Set log level: 1 map[]}
2020/03/18 22:31:22 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:31:22 Segment &{mtools 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:31:22 Segment &{On gitHub -  1 map[]}
2020/03/18 22:31:22 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:31:22 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:31:22 Segment &{mongostat 1 map[]}
2020/03/18 22:31:22 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:31:22 Segment &{flaky networks 1 map[]}
2020/03/18 22:31:22 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:31:22 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:31:22 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:31:22 Segment &{primary failover 1 map[]}
2020/03/18 22:31:22 Segment &{primary failover 1 map[]}
2020/03/18 22:31:22 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:31:22 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:31:22 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:31:22 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:31:22 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:31:22 Segment &{transactions 1 map[]}
2020/03/18 22:31:22 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:31:22 Segment &{drivers 1 map[]}
2020/03/18 22:31:22 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:31:22 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:31:22 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:31:22 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:31:22 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:31:22 Segment &{retry stategies 1 map[]}
2020/03/18 22:31:22 Segment &{don’t retry 1 map[]}
2020/03/18 22:31:22 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{don’t retry 1 map[]}
2020/03/18 22:31:22 Whaaat? br
2020/03/18 22:31:22 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:31:22 Whaaat? br
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:31:22 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:31:22 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:31:22 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:31:22 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:31:22 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:31:22 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:31:22 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:31:22 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:31:22 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:31:22 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:31:22 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:31:22 Segment &{black pipe testing 1 map[]}
2020/03/18 22:31:22 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:31:22 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:31:22 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:31:22 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:31:22 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:31:22 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:31:22 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:31:22 Segment &{hadoop 1 map[]}
2020/03/18 22:31:22 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:31:22 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:31:22 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:31:22 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:31:22 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:31:22 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:31:22 Segment &{great references 1 map[]}
2020/03/18 22:31:22 Segment &{great references 1 map[]}
2020/03/18 22:31:22 Segment &{requisites 1 map[]}
2020/03/18 22:31:22 Segment &{low latency 1 map[]}
2020/03/18 22:31:22 Segment &{low latency 1 map[]}
2020/03/18 22:31:22 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:31:22 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:31:22 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:31:22 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:31:22 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:31:22 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:31:22 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:31:22 Segment &{4. spark 1 map[]}
2020/03/18 22:31:22 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:31:22 Segment &{
on maven 1 map[]}
2020/03/18 22:31:22 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:31:22 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:31:22 Segment &{connecting to spark 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:31:22 Segment &{Mozart 1 map[]}
2020/03/18 22:31:22 Segment &{Urls: 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:31:22 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{development 1 map[]}
2020/03/18 22:31:22 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:31:22 Segment &{and do this: 1 map[]}
2020/03/18 22:31:22 Segment &{page configs 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:31:22 Segment &{euler-test job:  1 map[]}
2020/03/18 22:31:22 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:31:22 Segment &{euler-test job:  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{ngrok 1 map[]}
2020/03/18 22:31:22 Segment &{install 1 map[]}
2020/03/18 22:31:22 Segment &{run 1 map[]}
2020/03/18 22:31:22 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:31:22 Segment &{page configs 1 map[]}
2020/03/18 22:31:22 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:31:22 Segment &{mtools 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:31:22 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:31:22 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:31:22 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:31:22 Segment &{mtools 5 map[]}
2020/03/18 22:31:22 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:31:22 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:31:22 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:31:22 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:31:22 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:31:22 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:31:22 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:31:22 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:31:22 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:31:22 Segment &{  1 map[]}
2020/03/18 22:31:22 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:31:22 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:31:22 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:31:22 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:31:22 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:31:22 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:31:22 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:31:22 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:31:22 Segment &{Recent Changes 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:31:22 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:31:22 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:31:22 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:31:22 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:31:22 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:31:22 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:31:22 Segment &{ for instructions. 1 map[]}
2020/03/18 22:31:22 Segment &{Disclaimer 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:31:22 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:31:22 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:31:22 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:31:22 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:31:22 Segment &{ section here on github. 1 map[]}
2020/03/18 22:31:22 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:31:22 Segment &{mustache 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:31:22 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{conditionals: 5 map[]}
2020/03/18 22:31:22 Segment &{iterations: 5 map[]}
2020/03/18 22:31:22 Segment &{partials: 5 map[]}
2020/03/18 22:31:22 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:31:22 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:31:22 Segment &{Node 1 map[]}
2020/03/18 22:31:22 Segment &{nvm 1 map[]}
2020/03/18 22:31:22 Segment &{Node version manager 1 map[]}
2020/03/18 22:31:22 Segment &{versions 1 map[]}
2020/03/18 22:31:22 Segment &{found in 1 map[]}
2020/03/18 22:31:22 Segment &{alias 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:31:22 Segment &{package managers 1 map[]}
2020/03/18 22:31:22 Segment &{npm 1 map[]}
2020/03/18 22:31:22 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:31:22 Segment &{proxy settings 1 map[]}
2020/03/18 22:31:22 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:31:22 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:31:22 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{apm 1 map[]}
2020/03/18 22:31:22 Segment &{Atom package manager 1 map[]}
2020/03/18 22:31:22 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:31:22 Segment &{php 1 map[]}
2020/03/18 22:31:22 Segment &{pluralsight 1 map[]}
2020/03/18 22:31:22 Segment &{constants 1 map[]}
2020/03/18 22:31:22 Segment &{define: 1 map[]}
2020/03/18 22:31:22 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:31:22 Segment &{existence check 1 map[]}
2020/03/18 22:31:22 Segment &{constants: 5 map[]}
2020/03/18 22:31:22 Segment &{variables 5 map[]}
2020/03/18 22:31:22 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:31:22 Segment &{functions 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{type check 1 map[]}
2020/03/18 22:31:22 Segment &{function 1 map[]}
2020/03/18 22:31:22 Segment &{variable functions: 1 map[]}
2020/03/18 22:31:22 Segment &{make a variable global 5 map[]}
2020/03/18 22:31:22 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:31:22 Segment &{strings 1 map[]}
2020/03/18 22:31:22 Segment &{functions 1 map[]}
2020/03/18 22:31:22 Segment &{docker 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:31:22 Segment &{as per the  1 map[]}
2020/03/18 22:31:22 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:31:22 Segment &{ explanation.. 1 map[]}
2020/03/18 22:31:22 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:31:22 Segment &{project 9 map[]}
2020/03/18 22:31:22 Segment &{ folder, with a  1 map[]}
2020/03/18 22:31:22 Segment &{src 9 map[]}
2020/03/18 22:31:22 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:31:22 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:31:22 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:31:22 Segment &{site.conf 9 map[]}
2020/03/18 22:31:22 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:31:22 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:31:22 Segment &{Run  1 map[]}
2020/03/18 22:31:22 Segment &{docker-compose up 9 map[]}
2020/03/18 22:31:22 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:31:22 Segment &{NOTE: 5 map[]}
2020/03/18 22:31:22 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:31:22 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:31:22 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:31:22 Segment &{site.conf 1 map[]}
2020/03/18 22:31:22 Segment &{cheatsheet 1 map[]}
2020/03/18 22:31:22 Segment &{strings 5 map[]}
2020/03/18 22:31:22 Segment &{date 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{arrays 5 map[]}
2020/03/18 22:31:22 Segment &{numeric example 5 map[]}
2020/03/18 22:31:22 Segment &{functions 5 map[]}
2020/03/18 22:31:22 Segment &{classes 5 map[]}
2020/03/18 22:31:22 Segment &{web 5 map[]}
2020/03/18 22:31:22 Segment &{array 1 map[]}
2020/03/18 22:31:22 Segment &{transform 1 map[]}
2020/03/18 22:31:22 Segment &{map 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{filter 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{reset 1 map[]}
2020/03/18 22:31:22 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:31:22 Segment &{strings 1 map[]}
2020/03/18 22:31:22 Segment &{explode 1 map[]}
2020/03/18 22:31:22 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:31:22 Segment &{example 1 map[]}
2020/03/18 22:31:22 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:31:22 Segment &{postgresql 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:31:22 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:31:22 Segment &{run the daemon: 1 map[]}
2020/03/18 22:31:22 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:31:22 Segment &{cli 1 map[]}
2020/03/18 22:31:22 Segment &{commands: 1 map[]}
2020/03/18 22:31:22 Segment &{snapshots 1 map[]}
2020/03/18 22:31:22 Segment &{take snapshot: 1 map[]}
2020/03/18 22:31:22 Segment &{restore: 1 map[]}
2020/03/18 22:31:22 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:31:22 Segment &{pw log 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:31:22 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:31:22 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:31:22 Segment &{] 1 map[]}
2020/03/18 22:31:22 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:31:22 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:31:22 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:31:22 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:31:22 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:31:22 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:31:22 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:31:22 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:31:22 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:31:22 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:31:22 Segment &{hints 1 map[]}
2020/03/18 22:31:22 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:31:22 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:31:22 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:31:22 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:31:22 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:31:22 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:31:22 Segment &{reset 1 map[]}
2020/03/18 22:31:22 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:31:22 Segment &{keys 1 map[]}
2020/03/18 22:31:22 Segment &{textual:  1 map[]}
2020/03/18 22:31:22 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:31:22 Segment &{textual:  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:31:22 Segment &{python 1 map[]}
2020/03/18 22:31:22 Segment &{getting it working 1 map[]}
2020/03/18 22:31:22 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:31:22 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:31:22 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:31:22 Segment &{ as follows: 1 map[]}
2020/03/18 22:31:22 Segment &{useful 1 map[]}
2020/03/18 22:31:22 Segment &{get openssl version 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:31:22 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:31:22 Segment &{user name 5 map[]}
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:31:22 Segment &{API Key 5 map[]}
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:31:22 Segment &{docker 1 map[]}
2020/03/18 22:31:22 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:31:22 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:31:22 Segment &{react 1 map[]}
2020/03/18 22:31:22 Segment &{state 1 map[]}
2020/03/18 22:31:22 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:31:22 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:31:22 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:31:22 Segment &{refs 1 map[]}
2020/03/18 22:31:22 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:31:22 Segment &{unique key 1 map[]}
2020/03/18 22:31:22 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:31:22 Segment &{key 9 map[]}
2020/03/18 22:31:22 Segment &{ item 1 map[]}
2020/03/18 22:31:22 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:31:22 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:31:22 Segment &{redis 1 map[]}
2020/03/18 22:31:22 Segment &{operations 1 map[]}
2020/03/18 22:31:22 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:31:22 Segment &{redis-cli 9 map[]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 Segment &{keys: 5 map[]}
2020/03/18 22:31:22 Segment &{z-range 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:31:22 Segment &{Regex 1 map[]}
2020/03/18 22:31:22 Segment &{group constructs 1 map[]}
2020/03/18 22:31:22 Segment &{lookahead 1 map[]}
2020/03/18 22:31:22 Segment &{positive lookahead 5 map[]}
2020/03/18 22:31:22 Segment &{(?=…) 1 map[]}
2020/03/18 22:31:22 Segment &{(?=…) 1 map[]}
2020/03/18 22:31:22 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:31:22 Segment &{negative lookahead 5 map[]}
2020/03/18 22:31:22 Segment &{(?!…) 1 map[]}
2020/03/18 22:31:22 Segment &{(?!…) 1 map[]}
2020/03/18 22:31:22 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:31:22 Segment &{lookbehind 1 map[]}
2020/03/18 22:31:22 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:31:22 Segment &{(?<=…) 1 map[]}
2020/03/18 22:31:22 Segment &{(?<=…) 1 map[]}
2020/03/18 22:31:22 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:31:22 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:31:22 Segment &{(?<!…) 1 map[]}
2020/03/18 22:31:22 Segment &{(?<!…) 1 map[]}
2020/03/18 22:31:22 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:31:22 Segment &{capturing 1 map[]}
2020/03/18 22:31:22 Segment &{non capturing group 5 map[]}
2020/03/18 22:31:22 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:31:22 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:31:22 Segment &{RPM 1 map[]}
2020/03/18 22:31:22 Segment &{sources 1 map[]}
2020/03/18 22:31:22 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{spec file 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:31:22 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:31:22 Segment &{variables 1 map[]}
2020/03/18 22:31:22 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:31:22 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:31:22 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{building 1 map[]}
2020/03/18 22:31:22 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:31:22 Segment &{You need to have  1 map[]}
2020/03/18 22:31:22 Segment &{rmpbuild 9 map[]}
2020/03/18 22:31:22 Segment &{ installed, so  1 map[]}
2020/03/18 22:31:22 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{Copy  1 map[]}
2020/03/18 22:31:22 Segment &{SOURCES 9 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{SPECS 9 map[]}
2020/03/18 22:31:22 Segment &{ to  1 map[]}
2020/03/18 22:31:22 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:31:22 Segment &{ and  1 map[]}
2020/03/18 22:31:22 Segment &{.../SPECS 9 map[]}
2020/03/18 22:31:22 Segment &{ respectively. 1 map[]}
2020/03/18 22:31:22 Segment &{list 1 map[]}
2020/03/18 22:31:22 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:31:22 Segment &{troubleshoot 1 map[]}
2020/03/18 22:31:22 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:31:22 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:31:22 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:31:22 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:31:22 Segment &{scalegrid 1 map[]}
2020/03/18 22:31:22 Segment &{command line access 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:31:22 Segment &{sed 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:31:22 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:31:22 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:31:22 Segment &{substitute (s) 1 map[]}
2020/03/18 22:31:22 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:31:22 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:31:22 Segment &{Selenium 1 map[]}
2020/03/18 22:31:22 Segment &{Webdrivers 1 map[]}
2020/03/18 22:31:22 Segment &{Capabilities 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:31:22 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:31:22 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:31:22 Segment &{Seyren 1 map[]}
2020/03/18 22:31:22 Segment &{Alerts API 1 map[]}
2020/03/18 22:31:22 Segment &{Get check alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:31:22 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:22 Segment &{Get alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Charts API 1 map[]}
2020/03/18 22:31:22 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Return png image 1 map[]}
2020/03/18 22:31:22 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:22 Segment &{Return png image 1 map[]}
2020/03/18 22:31:22 Segment &{Checks API 1 map[]}
2020/03/18 22:31:22 Segment &{Search checks 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:31:22 Segment &{See  1 map[]}
2020/03/18 22:31:22 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:31:22 Segment &{Create a check 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ POST 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ POST 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:31:22 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:31:22 Segment &{Get a check 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:22 Segment &{Update a check 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:31:22 Segment &{Delete a check 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:22 Segment &{Config API 1 map[]}
2020/03/18 22:31:22 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /config 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /config 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{Metrics API 1 map[]}
2020/03/18 22:31:22 Segment &{Get metric count 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ GET 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:31:22 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:31:22 Segment &{Create a subscription 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ POST 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ POST 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:31:22 Segment &{Update a subscription 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:22 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:22 Segment &{Test a subscription 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:31:22 Segment &{URL 5 map[]}
2020/03/18 22:31:22 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{Method 5 map[]}
2020/03/18 22:31:22 Segment &{ PUT 1 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Segment &{URL Params 5 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{Query Params 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Body 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{None 1 map[]}
2020/03/18 22:31:22 Segment &{Response 5 map[]}
2020/03/18 22:31:22 Whaaat? strong
2020/03/18 22:31:22 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:31:22 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:22 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:31:22 Segment &{Spring 1 map[]}
2020/03/18 22:31:22 Segment &{Context annotations 1 map[]}
2020/03/18 22:31:22 Segment &{xml 1 map[]}
2020/03/18 22:31:22 Segment &{in  1 map[]}
2020/03/18 22:31:22 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:31:22 Segment &{, add the following: 1 map[]}
2020/03/18 22:31:22 Segment &{Types 1 map[]}
2020/03/18 22:31:22 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:31:22 Segment &{: any POJO 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{: any POJO 1 map[]}
2020/03/18 22:31:22 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:31:22 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:31:22 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:31:22 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:31:22 Segment &{@Autowired 9 map[]}
2020/03/18 22:31:22 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:31:22 Segment &{Java configuration 1 map[]}
2020/03/18 22:31:22 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:31:22 Segment &{use  1 map[]}
2020/03/18 22:31:22 Segment &{@Configuration 9 map[]}
2020/03/18 22:31:22 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:31:22 Segment &{use  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:31:22 Segment &{use  1 map[]}
2020/03/18 22:31:22 Segment &{@Bean 9 map[]}
2020/03/18 22:31:22 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:31:22 Segment &{use  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:31:22 Segment &{Autowiring 1 map[]}
2020/03/18 22:31:22 Segment &{add  1 map[]}
2020/03/18 22:31:22 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:31:22 Segment &{ annotation to your  1 map[]}
2020/03/18 22:31:22 Segment &{AppConfig 9 map[]}
2020/03/18 22:31:22 Segment &{ class 1 map[]}
2020/03/18 22:31:22 Segment &{Scope 1 map[]}
2020/03/18 22:31:22 Segment &{using scope: 1 map[]}
2020/03/18 22:31:22 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:31:22 Segment &{singleton 1 map[]}
2020/03/18 22:31:22 Segment &{“singleton” 1 map[]}
2020/03/18 22:31:22 Segment &{“singleton” 1 map[]}
2020/03/18 22:31:22 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:31:22 Segment &{prototype 1 map[]}
2020/03/18 22:31:22 Segment &{“prototype” 1 map[]}
2020/03/18 22:31:22 Segment &{“prototype” 1 map[]}
2020/03/18 22:31:22 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:31:22 Segment &{request 1 map[]}
2020/03/18 22:31:22 Segment &{“request” 1 map[]}
2020/03/18 22:31:22 Segment &{“request” 1 map[]}
2020/03/18 22:31:22 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:31:22 Segment &{session 1 map[]}
2020/03/18 22:31:22 Segment &{“session” 1 map[]}
2020/03/18 22:31:22 Segment &{“session” 1 map[]}
2020/03/18 22:31:22 Segment &{Lives per session 1 map[]}
2020/03/18 22:31:22 Segment &{global session 1 map[]}
2020/03/18 22:31:22 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:31:22 Segment &{Properties 1 map[]}
2020/03/18 22:31:22 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:31:22 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:31:22 Segment &{Annotate the value 1 map[]}
2020/03/18 22:31:22 Segment &{in  1 map[]}
2020/03/18 22:31:22 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:31:22 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:31:22 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:31:22 Segment &{UIViewController 1 map[]}
2020/03/18 22:31:22 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:31:22 Segment &{SKScene 1 map[]}
2020/03/18 22:31:22 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:31:22 Segment &{ssh 1 map[]}
2020/03/18 22:31:22 Segment &{ec2 logon 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:31:22 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:31:22 Segment &{setup 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:31:22 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:31:22 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:31:22 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:31:22 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:31:22 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:31:22 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:31:22 Segment &{To logon: 1 map[]}
2020/03/18 22:31:22 Segment &{To end: 1 map[]}
2020/03/18 22:31:22 Segment &{generate 1 map[]}
2020/03/18 22:31:22 Segment &{From the command line: 1 map[]}
2020/03/18 22:31:22 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:31:22 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:31:22 Segment &{view 1 map[]}
2020/03/18 22:31:22 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:31:22 Segment &{scp 1 map[]}
2020/03/18 22:31:22 Segment &{upload: 1 map[]}
2020/03/18 22:31:22 Segment &{download: 1 map[]}
2020/03/18 22:31:22 Segment &{Keys 1 map[]}
2020/03/18 22:31:22 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:31:22 Segment &{id2_rsa 9 map[]}
2020/03/18 22:31:22 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:31:22 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:31:22 Segment &{svn 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:31:22 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:31:22 Segment &{propset 1 map[]}
2020/03/18 22:31:22 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:31:22 Segment &{revert 1 map[]}
2020/03/18 22:31:22 Segment &{delete 1 map[]}
2020/03/18 22:31:22 Segment &{mkdir 1 map[]}
2020/03/18 22:31:22 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:31:22 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:31:22 Segment &{systemd 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:31:22 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{journalctl 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:31:22 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:31:22 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:31:22 Segment &{tar 1 map[]}
2020/03/18 22:31:22 Segment &{create 1 map[]}
2020/03/18 22:31:22 Segment &{unzip 1 map[]}
2020/03/18 22:31:22 Segment &{list files in tar 1 map[]}
2020/03/18 22:31:22 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:31:22 Segment &{tcp/ip 1 map[]}
2020/03/18 22:31:22 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:31:22 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:31:22 Segment &{Protocols 1 map[]}
2020/03/18 22:31:22 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{protocol stack 5 map[]}
2020/03/18 22:31:22 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{gateway 5 map[]}
2020/03/18 22:31:22 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:31:22 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:31:22 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:31:22 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:31:22 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:31:22 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:31:22 Segment &{Architecture 1 map[]}
2020/03/18 22:31:22 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:31:22 Segment &{DARPA 3 map[]}
2020/03/18 22:31:22 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:31:22 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:31:22 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{DARPA Model 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:31:22 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{one to one 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{one to one 1 map[]}
2020/03/18 22:31:22 Segment &{one to one 1 map[]}
2020/03/18 22:31:22 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:22 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:22 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:22 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:22 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{connectionless 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{connectionless 1 map[]}
2020/03/18 22:31:22 Segment &{connectionless 1 map[]}
2020/03/18 22:31:22 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:22 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:22 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{addressing 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{routing 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{addressing 1 map[]}
2020/03/18 22:31:22 Segment &{addressing 1 map[]}
2020/03/18 22:31:22 Segment &{routing 1 map[]}
2020/03/18 22:31:22 Segment &{routing 1 map[]}
2020/03/18 22:31:22 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:22 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:22 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:22 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:22 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:22 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:22 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:31:22 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:22 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:22 Segment &{Three way handshake 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:31:22 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:31:22 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:31:22 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:31:22 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:31:22 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:31:22 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:31:22 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:31:22 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:31:22 Segment &{IP Addresses 1 map[]}
2020/03/18 22:31:22 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:31:22 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:31:22 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:31:22 Segment &{The  1 map[]}
2020/03/18 22:31:22 Segment &{subnet mask 5 map[]}
2020/03/18 22:31:22 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:31:22 Segment &{255 9 map[]}
2020/03/18 22:31:22 Segment &{ and ending in  1 map[]}
2020/03/18 22:31:22 Segment &{0 9 map[]}
2020/03/18 22:31:22 Segment &{.  1 map[]}
2020/03/18 22:31:22 Segment &{255 9 map[]}
2020/03/18 22:31:22 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:31:22 Segment &{0 9 map[]}
2020/03/18 22:31:22 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. 1 map[]}
2020/03/18 22:31:22 Segment &{IP address = 1 map[]}
2020/03/18 22:31:22 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:31:22 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:31:22 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:31:22 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:31:22 Segment &{192.168.10 9 map[]}
2020/03/18 22:31:22 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:31:22 Segment &{1 9 map[]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 Segment &{to see ip info 1 map[]}
2020/03/18 22:31:22 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:31:22 Segment &{it sends an  1 map[]}
2020/03/18 22:31:22 Segment &{echo request 3 map[]}
2020/03/18 22:31:22 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:31:22 Segment &{man ping 9 map[]}
2020/03/18 22:31:22 Segment &{) 1 map[]}
2020/03/18 22:31:22 Segment &{Rules 1 map[]}
2020/03/18 22:31:22 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:31:22 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:31:22 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:31:22 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:31:22 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:31:22 Segment &{Classes 1 map[]}
2020/03/18 22:31:22 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:31:22 Whaaat? table
2020/03/18 22:31:22 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:31:22 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:31:22 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:31:22 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:31:22 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:31:22 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:31:22 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:31:22 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:31:22 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:31:22 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:31:22 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:31:22 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:31:22 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:31:22 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:31:22 Segment &{ (NAT). 1 map[]}
2020/03/18 22:31:22 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:31:22 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:31:22 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:31:22 Segment &{Internetworking 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{router 5 map[]}
2020/03/18 22:31:22 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:31:22 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:31:22 Segment &{router 5 map[]}
2020/03/18 22:31:22 Segment &{. This is  1 map[]}
2020/03/18 22:31:22 Segment &{internetworking 5 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{A  1 map[]}
2020/03/18 22:31:22 Segment &{default gateway 5 map[]}
2020/03/18 22:31:22 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:31:22 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:31:22 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:31:22 Segment &{Subnetting 5 map[]}
2020/03/18 22:31:22 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:31:22 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:31:22 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:31:22 Segment &{Solution is to use  1 map[]}
2020/03/18 22:31:22 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:31:22 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:31:22 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:31:22 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:31:22 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:31:22 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:31:22 Segment &{subnets 5 map[]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 Segment &{e.g.  1 map[]}
2020/03/18 22:31:22 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:31:22 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:31:22 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:31:22 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:31:22 Segment &{CIDR notation 5 map[]}
2020/03/18 22:31:22 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:31:22 Segment &{e.g.  1 map[]}
2020/03/18 22:31:22 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:31:22 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:31:22 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:31:22 Segment &{ can be better read as  1 map[]}
2020/03/18 22:31:22 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:31:22 Segment &{. The segment after the  1 map[]}
2020/03/18 22:31:22 Segment &{/ 9 map[]}
2020/03/18 22:31:22 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:31:22 Segment &{IPv6 1 map[]}
2020/03/18 22:31:22 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:31:22 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:31:22 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:31:22 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:31:22 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:31:22 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:31:22 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:31:22 Segment &{0 9 map[]}
2020/03/18 22:31:22 Segment &{s block with double  1 map[]}
2020/03/18 22:31:22 Segment &{:: 9 map[]}
2020/03/18 22:31:22 Segment &{, ie:  1 map[]}
2020/03/18 22:31:22 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:31:22 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:31:22 Segment &{todo 1 map[]}
2020/03/18 22:31:22 Segment &{lookup 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:31:22 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:31:22 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:31:22 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:31:22 Whaaat? a
2020/03/18 22:31:22 Segment &{projects 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:31:22 Segment &{logic 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:31:22 Segment &{note-worthy 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:31:22 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:31:22 Whaaat? br
2020/03/18 22:31:22 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:31:22 Segment &{:help | :h 9 map[]}
2020/03/18 22:31:22 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:22 Segment &{headers as tags 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:22 Segment &{bugs 1 map[]}
2020/03/18 22:31:22 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:31:22 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:22 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:22 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:22 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:31:22 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:22 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:31:22 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:22 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:22 Segment &{markdown [md] 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:22 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:22 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:22 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:31:22 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:31:22 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:22 Segment &{bugs 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:31:22 Segment &{cppbt 1 map[]}
2020/03/18 22:31:22 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:22 Segment &{
 1 map[]}
2020/03/18 22:31:22 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:22 Segment &{subnets 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:31:22 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:31:22 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:31:22 Segment &{troubleshoot 1 map[]}
2020/03/18 22:31:22 Segment &{ssl 1 map[]}
2020/03/18 22:31:22 Whaaat? ol
2020/03/18 22:31:22 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:31:22 Segment &{realpath 1 map[]}
2020/03/18 22:31:22 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:31:22 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:31:22 Segment &{Vagrant 1 map[]}
2020/03/18 22:31:22 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:31:22 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:31:22 Segment &{Installation 1 map[]}
2020/03/18 22:31:22 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:31:22 Segment &{Usage 1 map[]}
2020/03/18 22:31:22 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:31:22 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:31:22 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:31:22 Segment &{That’s it! 1 map[]}
2020/03/18 22:31:22 Segment &{Examples 1 map[]}
2020/03/18 22:31:22 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:31:22 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:31:22 Segment &{Vagrant version 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:31:22 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:31:22 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:31:22 Segment &{. 1 map[]}
2020/03/18 22:31:22 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:31:22 Segment &{vim 1 map[]}
2020/03/18 22:31:22 Segment &{commands 1 map[]}
2020/03/18 22:31:22 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:31:22 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:31:22 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:31:22 Segment &{In command mode: 1 map[]}
2020/03/18 22:31:22 Segment &{Saving 5 map[]}
2020/03/18 22:31:22 Segment &{:
+  1 map[]}
2020/03/18 22:31:22 Segment &{:wq 9 map[]}
2020/03/18 22:31:22 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:31:22 Segment &{:q! 9 map[]}
2020/03/18 22:31:22 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:31:22 Segment &{Editing 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{x 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete 1 map[]}
2020/03/18 22:31:22 Segment &{x 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete 1 map[]}
2020/03/18 22:31:22 Segment &{u 9 map[]}
2020/03/18 22:31:22 Segment &{ - undo 1 map[]}
2020/03/18 22:31:22 Segment &{u 9 map[]}
2020/03/18 22:31:22 Segment &{ - undo 1 map[]}
2020/03/18 22:31:22 Segment &{ctrl-r 9 map[]}
2020/03/18 22:31:22 Segment &{ - redo 1 map[]}
2020/03/18 22:31:22 Segment &{ctrl-r 9 map[]}
2020/03/18 22:31:22 Segment &{ - redo 1 map[]}
2020/03/18 22:31:22 Segment &{dw 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:31:22 Segment &{dw 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:31:22 Segment &{2w 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:31:22 Segment &{2w 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:31:22 Segment &{3e 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:31:22 Segment &{3e 9 map[]}
2020/03/18 22:31:22 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:31:22 Segment &{0 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:31:22 Segment &{0 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:31:22 Segment &{$ 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:31:22 Segment &{$ 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:31:22 Segment &{e 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to next word 1 map[]}
2020/03/18 22:31:22 Segment &{e 9 map[]}
2020/03/18 22:31:22 Segment &{ - move to next word 1 map[]}
2020/03/18 22:31:22 Segment &{d2w 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete two words 1 map[]}
2020/03/18 22:31:22 Segment &{d2w 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete two words 1 map[]}
2020/03/18 22:31:22 Segment &{dd 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete the line 1 map[]}
2020/03/18 22:31:22 Segment &{dd 9 map[]}
2020/03/18 22:31:22 Segment &{ - delete the line 1 map[]}
2020/03/18 22:31:22 Segment &{yy 9 map[]}
2020/03/18 22:31:22 Segment &{ - copy line 1 map[]}
2020/03/18 22:31:22 Segment &{yy 9 map[]}
2020/03/18 22:31:22 Segment &{ - copy line 1 map[]}
2020/03/18 22:31:22 Segment &{p 9 map[]}
2020/03/18 22:31:22 Segment &{ - paste 1 map[]}
2020/03/18 22:31:22 Segment &{p 9 map[]}
2020/03/18 22:31:22 Segment &{ - paste 1 map[]}
2020/03/18 22:31:22 Segment &{Modes 5 map[]}
2020/03/18 22:31:22 Segment &{: 1 map[]}
2020/03/18 22:31:22 Segment &{i 9 map[]}
2020/03/18 22:31:22 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:31:22 Segment &{a 9 map[]}
2020/03/18 22:31:22 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:31:22 Segment &{A 9 map[]}
2020/03/18 22:31:22 Segment &{ - append text at end 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - append text at end 1 map[]}
2020/03/18 22:31:22 Segment &{a 9 map[]}
2020/03/18 22:31:22 Segment &{ - append text at 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - append text at 1 map[]}
2020/03/18 22:31:22 Segment &{O 9 map[]}
2020/03/18 22:31:22 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:31:22 Segment &{o 9 map[]}
2020/03/18 22:31:22 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:31:22 Segment &{V 9 map[]}
2020/03/18 22:31:22 Segment &{ - visual mode 1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{ - visual mode 1 map[]}
2020/03/18 22:31:22 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:31:22 Segment &{yum 1 map[]}
2020/03/18 22:31:22 Segment &{search 1 map[]}
2020/03/18 22:31:22 Segment &{list 1 map[]}
2020/03/18 22:31:22 Segment &{repositories 1 map[]}
2020/03/18 22:31:22 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:31:22 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:31:22 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:31:22 Segment &{packages 1 map[]}
2020/03/18 22:31:22 Segment &{g++ 9 map[]}
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{rpmbuild 9 map[]}
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:22 Segment &{:  1 map[]}
2020/03/18 22:31:22 Whaaat? code
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:31:51 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:31:51 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:31:51 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:51 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:31:51 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:31:51 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:51 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:31:51 Segment &{h2 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h3 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h4 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h5 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h6 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:31:51 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:31:51 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:31:51 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:31:51 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:31:51 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:31:51 Segment &{Emphasis 1 map[]}
2020/03/18 22:31:51 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:51 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:51 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:51 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:51 Segment &{Strikethrough 1 map[]}
2020/03/18 22:31:51 Segment &{Blockquotes 1 map[]}
2020/03/18 22:31:51 Segment &{Lists 1 map[]}
2020/03/18 22:31:51 Segment &{Unordered 1 map[]}
2020/03/18 22:31:51 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:51 Segment &{+ 9 map[]}
2020/03/18 22:31:51 Segment &{,  1 map[]}
2020/03/18 22:31:51 Segment &{- 9 map[]}
2020/03/18 22:31:51 Segment &{, or  1 map[]}
2020/03/18 22:31:51 Segment &{* 9 map[]}
2020/03/18 22:31:51 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{,  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{, or  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:51 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:51 Segment &{Ordered 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Code 1 map[]}
2020/03/18 22:31:51 Segment &{Inline  1 map[]}
2020/03/18 22:31:51 Segment &{code 9 map[]}
2020/03/18 22:31:51 Segment &{Indented code 1 map[]}
2020/03/18 22:31:51 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:31:51 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:31:51 Segment &{Tables 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Links 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:31:51 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:31:51 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:31:51 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:31:51 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:31:51 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:31:51 Segment &{Images 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:31:51 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:31:51 Segment &{Plugins 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:31:51 Segment &{The killer feature of  1 map[]}
2020/03/18 22:31:51 Segment &{markdown-it 9 map[]}
2020/03/18 22:31:51 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:31:51 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:31:51 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:31:51 Segment &{see  1 map[]}
2020/03/18 22:31:51 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:31:51 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:31:51 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:31:51 Segment &{ /  1 map[]}
2020/03/18 22:31:51 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:31:51 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:51 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:51 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:51 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:31:51 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:31:51 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:31:51 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:31:51 Segment &{==Marked text== 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:31:51 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:31:51 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:31:51 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:31:51 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:31:51 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:31:51 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:31:51 Segment &{can have markup 5 map[]}
2020/03/18 22:31:51 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:31:51 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:31:51 Whaaat? dl
2020/03/18 22:31:51 Segment &{Compact style: 3 map[]}
2020/03/18 22:31:51 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:31:51 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:31:51 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:31:51 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:31:51 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:31:51 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:31:51 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:31:51 Segment &{::: warning
 1 map[]}
2020/03/18 22:31:51 Segment &{here be dragons 3 map[]}
2020/03/18 22:31:51 Segment &{
::: 1 map[]}
2020/03/18 22:31:51 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:31:51 Segment &{test 1 map[]}
2020/03/18 22:31:51 Segment &{hello there. this is  1 map[]}
2020/03/18 22:31:51 Segment &{formatted with  3 map[]}
2020/03/18 22:31:51 Segment &{bold 7 map[]}
2020/03/18 22:31:51 Segment &{ and 3 map[]}
2020/03/18 22:31:51 Segment &{ with some  1 map[]}
2020/03/18 22:31:51 Segment &{bold text 5 map[]}
2020/03/18 22:31:51 Segment &{ and some  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:31:51 Segment &{As a special treat,  1 map[]}
2020/03/18 22:31:51 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:31:51 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:31:51 Segment &{foofoo 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 3 1 map[]}
2020/03/18 22:31:51 Segment &{heading 3 content 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 4 1 map[]}
2020/03/18 22:31:51 Segment &{heading 4 content 1 map[]}
2020/03/18 22:31:51 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 5 1 map[]}
2020/03/18 22:31:51 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:31:51 Segment &{one 1 map[]}
2020/03/18 22:31:51 Segment &{one 1 map[]}
2020/03/18 22:31:51 Segment &{two 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{with some code
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{inner list biatch 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{number 2 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{two 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{three 1 map[]}
2020/03/18 22:31:51 Segment &{three 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 6 1 map[]}
2020/03/18 22:31:51 Segment &{heading 6 content 1 map[]}
2020/03/18 22:31:51 Segment &{####### H7? 1 map[]}
2020/03/18 22:31:51 Segment &{no such thing 1 map[]}
2020/03/18 22:31:51 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:31:51 Segment &{DUMP 1 map[]}
2020/03/18 22:31:51 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:31:51 Segment &{netstat 1 map[]}
2020/03/18 22:31:51 Segment &{(or  1 map[]}
2020/03/18 22:31:51 Segment &{ss 9 map[]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:31:51 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:31:51 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:31:51 Segment &{libexec 1 map[]}
2020/03/18 22:31:51 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:31:51 Segment &{ack 1 map[]}
2020/03/18 22:31:51 Segment &{speedtest 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:31:51 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:31:51 Segment &{rsync 1 map[]}
2020/03/18 22:31:51 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:31:51 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:31:51 Segment &{kubernetes 1 map[]}
2020/03/18 22:31:51 Segment &{hls 1 map[]}
2020/03/18 22:31:51 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:31:51 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:31:51 Segment &{akka 1 map[]}
2020/03/18 22:31:51 Segment &{overview 1 map[]}
2020/03/18 22:31:51 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:31:51 Segment &{domain approach: 5 map[]}
2020/03/18 22:31:51 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:31:51 Segment &{worker systems: 5 map[]}
2020/03/18 22:31:51 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:31:51 Segment &{messaging styles: 5 map[]}
2020/03/18 22:31:51 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:31:51 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:31:51 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:31:51 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:31:51 Segment &{creating actors 1 map[]}
2020/03/18 22:31:51 Segment &{messages 1 map[]}
2020/03/18 22:31:51 Segment &{actors 1 map[]}
2020/03/18 22:31:51 Segment &{actor system 1 map[]}
2020/03/18 22:31:51 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:31:51 Segment &{ActorRef 9 map[]}
2020/03/18 22:31:51 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:31:51 Segment &{Remember to use  1 map[]}
2020/03/18 22:31:51 Segment &{self 9 map[]}
2020/03/18 22:31:51 Segment &{ rather than  1 map[]}
2020/03/18 22:31:51 Segment &{this 9 map[]}
2020/03/18 22:31:51 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:31:51 Segment &{self 9 map[]}
2020/03/18 22:31:51 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:31:51 Segment &{this 9 map[]}
2020/03/18 22:31:51 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:31:51 Segment &{actor system 1 map[]}
2020/03/18 22:31:51 Segment &{actorOf 9 map[]}
2020/03/18 22:31:51 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:31:51 Segment &{message 1 map[]}
2020/03/18 22:31:51 Segment &{error handling 1 map[]}
2020/03/18 22:31:51 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:31:51 Segment &{supervisor 5 map[]}
2020/03/18 22:31:51 Segment &{ of the child 1 map[]}
2020/03/18 22:31:51 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:31:51 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:31:51 Segment &{strategies 5 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{supervision 1 map[]}
2020/03/18 22:31:51 Segment &{strategies 1 map[]}
2020/03/18 22:31:51 Segment &{actor paths 1 map[]}
2020/03/18 22:31:51 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:31:51 Segment &{monitoring 1 map[]}
2020/03/18 22:31:51 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:31:51 Segment &{lifecycle 1 map[]}
2020/03/18 22:31:51 Segment &{dispatching 1 map[]}
2020/03/18 22:31:51 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:31:51 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:31:51 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:31:51 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:31:51 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:31:51 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:31:51 Segment &{scheduling 1 map[]}
2020/03/18 22:31:51 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:31:51 Segment &{dead letter 1 map[]}
2020/03/18 22:31:51 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:31:51 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:31:51 Segment &{routing 1 map[]}
2020/03/18 22:31:51 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:31:51 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:31:51 Segment &{akka.routing 9 map[]}
2020/03/18 22:31:51 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:31:51 Segment &{example 1 map[]}
2020/03/18 22:31:51 Segment &{strategies 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{creating routers 1 map[]}
2020/03/18 22:31:51 Segment &{akka streams 1 map[]}
2020/03/18 22:31:51 Segment &{split and aggregate 1 map[]}
2020/03/18 22:31:51 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:31:51 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:31:51 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:31:51 Segment &{links [links] 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:31:51 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:31:51 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:31:51 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:31:51 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:31:51 Segment &{
   1 map[]}
2020/03/18 22:31:51 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{
   1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:31:51 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:31:51 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:31:51 Segment &{
   1 map[]}
2020/03/18 22:31:51 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{
   1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:31:51 Segment &{apache 1 map[]}
2020/03/18 22:31:51 Segment &{local server 1 map[]}
2020/03/18 22:31:51 Segment &{apache config 5 map[]}
2020/03/18 22:31:51 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:31:51 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:31:51 Segment &{config changes 1 map[]}
2020/03/18 22:31:51 Segment &{in  1 map[]}
2020/03/18 22:31:51 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:31:51 Segment &{: uncommented 1 map[]}
2020/03/18 22:31:51 Segment &{In  1 map[]}
2020/03/18 22:31:51 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:31:51 Segment &{, uncommented: 1 map[]}
2020/03/18 22:31:51 Segment &{commands 1 map[]}
2020/03/18 22:31:51 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:31:51 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:31:51 Segment &{usage 1 map[]}
2020/03/18 22:31:51 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:31:51 Segment &{AWS CLI 1 map[]}
2020/03/18 22:31:51 Segment &{Install 1 map[]}
2020/03/18 22:31:51 Segment &{Configure 1 map[]}
2020/03/18 22:31:51 Segment &{Profiles 1 map[]}
2020/03/18 22:31:51 Segment &{To use a Profile  1 map[]}
2020/03/18 22:31:51 Segment &{--profile <name> 9 map[]}
2020/03/18 22:31:51 Segment &{ in the command 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:31:51 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:31:51 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:31:51 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:31:51 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:31:51 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:31:51 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:31:51 Segment &{labs:  1 map[]}
2020/03/18 22:31:51 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:31:51 Segment &{labs:  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{Acronyms 1 map[]}
2020/03/18 22:31:51 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:31:51 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:31:51 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:31:51 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:31:51 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:31:51 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:31:51 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:31:51 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:31:51 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:31:51 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:31:51 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:31:51 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:31:51 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:31:51 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:31:51 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:31:51 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:31:51 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:31:51 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:31:51 Segment &{Protocols 1 map[]}
2020/03/18 22:31:51 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:31:51 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:31:51 Segment &{Services 1 map[]}
2020/03/18 22:31:51 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:31:51 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:31:51 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:31:51 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:31:51 Segment &{CloudTrail 1 map[]}
2020/03/18 22:31:51 Segment &{reveals account activity 1 map[]}
2020/03/18 22:31:51 Segment &{AWS Config 1 map[]}
2020/03/18 22:31:51 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:31:51 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:31:51 Segment &{Private Link 1 map[]}
2020/03/18 22:31:51 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:31:51 Segment &{AWS Shield 1 map[]}
2020/03/18 22:31:51 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:31:51 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:31:51 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:31:51 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:31:51 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:31:51 Segment &{Module 0 1 map[]}
2020/03/18 22:31:51 Segment &{Best Practicies 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:31:51 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:31:51 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:31:51 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:31:51 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:31:51 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:31:51 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:31:51 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:31:51 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:31:51 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:31:51 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:31:51 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:31:51 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:31:51 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:31:51 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:31:51 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:31:51 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:31:51 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:31:51 Segment &{no integration 1 map[]}
2020/03/18 22:31:51 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:31:51 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:31:51 Segment &{centralised control 1 map[]}
2020/03/18 22:31:51 Segment &{centralised control 1 map[]}
2020/03/18 22:31:51 Segment &{single bill 1 map[]}
2020/03/18 22:31:51 Segment &{single bill 1 map[]}
2020/03/18 22:31:51 Segment &{single instance pools 1 map[]}
2020/03/18 22:31:51 Segment &{single instance pools 1 map[]}
2020/03/18 22:31:51 Segment &{complex admin 1 map[]}
2020/03/18 22:31:51 Segment &{complex admin 1 map[]}
2020/03/18 22:31:51 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:31:51 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:31:51 Segment &{security 1 map[]}
2020/03/18 22:31:51 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:31:51 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:31:51 Segment &{ can be made. 1 map[]}
2020/03/18 22:31:51 Segment &{Policy based management 1 map[]}
2020/03/18 22:31:51 Segment &{Service control policy 5 map[]}
2020/03/18 22:31:51 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:31:51 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:31:51 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:31:51 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:31:51 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:31:51 Segment &{Resource groups 1 map[]}
2020/03/18 22:31:51 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:31:51 Segment &{Module 2 1 map[]}
2020/03/18 22:31:51 Segment &{VPC Peering 1 map[]}
2020/03/18 22:31:51 Segment &{EC2 1 map[]}
2020/03/18 22:31:51 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:31:51 Segment &{Create an  1 map[]}
2020/03/18 22:31:51 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:31:51 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:31:51 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:31:51 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:31:51 Segment &{VPN Connections 1 map[]}
2020/03/18 22:31:51 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:31:51 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:31:51 Segment &{BGP 1 map[]}
2020/03/18 22:31:51 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:31:51 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:31:51 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:31:51 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:31:51 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:31:51 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:31:51 Segment &{Scaling 1 map[]}
2020/03/18 22:31:51 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:31:51 Segment &{Lookup 1 map[]}
2020/03/18 22:31:51 Segment &{split brain condition 1 map[]}
2020/03/18 22:31:51 Segment &{split brain condition 1 map[]}
2020/03/18 22:31:51 Segment &{Base64 1 map[]}
2020/03/18 22:31:51 Segment &{to binary 1 map[]}
2020/03/18 22:31:51 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:31:51 Segment &{bash 1 map[]}
2020/03/18 22:31:51 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:31:51 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{networksetup 1 map[]}
2020/03/18 22:31:51 Segment &{configuring network settings 1 map[]}
2020/03/18 22:31:51 Segment &{logging 1 map[]}
2020/03/18 22:31:51 Segment &{f = live follow 1 map[]}
2020/03/18 22:31:51 Segment &{f = live follow 1 map[]}
2020/03/18 22:31:51 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:31:51 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:31:51 Segment &{shebang 1 map[]}
2020/03/18 22:31:51 Segment &{variable 1 map[]}
2020/03/18 22:31:51 Segment &{special variables 5 map[]}
2020/03/18 22:31:51 Segment &{chmod 1 map[]}
2020/03/18 22:31:51 Segment &{numerical 5 map[]}
2020/03/18 22:31:51 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:31:51 Segment &{homebrew 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:31:51 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{list packages: 1 map[]}
2020/03/18 22:31:51 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:31:51 Segment &{Browserstack 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:31:51 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:31:51 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:31:51 Segment &{This requires you have the  1 map[]}
2020/03/18 22:31:51 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:31:51 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:31:51 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:31:51 Segment &{c 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:31:51 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:31:51 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:31:51 Segment &{; 1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{; 1 map[]}
2020/03/18 22:31:51 Segment &{basics 1 map[]}
2020/03/18 22:31:51 Segment &{native methods 1 map[]}
2020/03/18 22:31:51 Segment &{stdio 1 map[]}
2020/03/18 22:31:51 Segment &{import 5 map[]}
2020/03/18 22:31:51 Segment &{printf 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{scanf 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{fgets 5 map[]}
2020/03/18 22:31:51 Segment &{fputs 5 map[]}
2020/03/18 22:31:51 Segment &{puts 5 map[]}
2020/03/18 22:31:51 Segment &{dynamic memory 1 map[]}
2020/03/18 22:31:51 Segment &{malloc 5 map[]}
2020/03/18 22:31:51 Segment &{memcpy 5 map[]}
2020/03/18 22:31:51 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:31:51 Segment &{building 1 map[]}
2020/03/18 22:31:51 Segment &{compile and link 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{compile 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{linking 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:31:51 Segment &{libraries 1 map[]}
2020/03/18 22:31:51 Segment &{static 5 map[]}
2020/03/18 22:31:51 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:31:51 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:31:51 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:31:51 Segment &{gives you the file  1 map[]}
2020/03/18 22:31:51 Segment &{libname.a 9 map[]}
2020/03/18 22:31:51 Segment &{list files in lib 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:31:51 Segment &{camel 1 map[]}
2020/03/18 22:31:51 Segment &{testing 1 map[]}
2020/03/18 22:31:51 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:31:51 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:31:51 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:31:51 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:31:51 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:31:51 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:31:51 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:31:51 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:31:51 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:31:51 Segment &{systemctl 9 map[]}
2020/03/18 22:31:51 Segment &{ rather than  1 map[]}
2020/03/18 22:31:51 Segment &{service 9 map[]}
2020/03/18 22:31:51 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:31:51 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:31:51 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:31:51 Segment &{): 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:31:51 Segment &{More info here:  1 map[]}
2020/03/18 22:31:51 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:31:51 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:31:51 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:31:51 Segment &{certs 1 map[]}
2020/03/18 22:31:51 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:51 Segment &{cert.p12 5 map[]}
2020/03/18 22:31:51 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:31:51 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:31:51 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:51 Segment &{certificate.pem 5 map[]}
2020/03/18 22:31:51 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:31:51 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:31:51 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:31:51 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:31:51 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{create PEM 1 map[]}
2020/03/18 22:31:51 Segment &{Or with no target password 1 map[]}
2020/03/18 22:31:51 Segment &{Chrome issue 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{svn issue 1 map[]}
2020/03/18 22:31:51 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:31:51 Segment &{Hi all, 1 map[]}
2020/03/18 22:31:51 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:31:51 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:31:51 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:31:51 Segment &{google structured data 1 map[]}
2020/03/18 22:31:51 Segment &{claim review 1 map[]}
2020/03/18 22:31:51 Segment &{required fields 5 map[]}
2020/03/18 22:31:51 Segment &{reviewRating 1 map[]}
2020/03/18 22:31:51 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:31:51 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:31:51 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:31:51 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:31:51 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:31:51 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:31:51 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:31:51 Segment &{what we’re missing 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type 1 map[]}
2020/03/18 22:31:51 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:31:51 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:31:51 Segment &{[x] url 1 map[]}
2020/03/18 22:31:51 Segment &{[x] url 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] author: 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] name 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:31:51 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] type 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] name 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:31:51 Segment &{[x] type 1 map[]}
2020/03/18 22:31:51 Segment &{[x] type 1 map[]}
2020/03/18 22:31:51 Segment &{[x] name 1 map[]}
2020/03/18 22:31:51 Segment &{[x] name 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:51 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:31:51 Segment &{case examples 1 map[]}
2020/03/18 22:31:51 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:31:51 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:31:51 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:31:51 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:31:51 Segment &{coffee script 1 map[]}
2020/03/18 22:31:51 Segment &{functions 1 map[]}
2020/03/18 22:31:51 Segment &{With default values: 1 map[]}
2020/03/18 22:31:51 Segment &{objects 1 map[]}
2020/03/18 22:31:51 Segment &{classes 1 map[]}
2020/03/18 22:31:51 Segment &{splats 1 map[]}
2020/03/18 22:31:51 Segment &{comprehensions 1 map[]}
2020/03/18 22:31:51 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:31:51 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:31:51 Segment &{create stack 1 map[]}
2020/03/18 22:31:51 Segment &{deploy 1 map[]}
2020/03/18 22:31:51 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:31:51 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:31:51 Segment &{curl 1 map[]}
2020/03/18 22:31:51 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:31:51 Segment &{cert 1 map[]}
2020/03/18 22:31:51 Segment &{curl with cert 1 map[]}
2020/03/18 22:31:51 Segment &{with response headers: 1 map[]}
2020/03/18 22:31:51 Segment &{output 1 map[]}
2020/03/18 22:31:51 Segment &{Write output to file 1 map[]}
2020/03/18 22:31:51 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:31:51 Segment &{curses 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:31:51 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:31:51 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{compile 5 map[]}
2020/03/18 22:31:51 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:31:51 Segment &{setup 1 map[]}
2020/03/18 22:31:51 Segment &{screen 1 map[]}
2020/03/18 22:31:51 Segment &{screen dump 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{printing 1 map[]}
2020/03/18 22:31:51 Segment &{output 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{attributes 1 map[]}
2020/03/18 22:31:51 Segment &{attribute options 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{colours 1 map[]}
2020/03/18 22:31:51 Segment &{colours 5 map[]}
2020/03/18 22:31:51 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:31:51 Segment &{reading 1 map[]}
2020/03/18 22:31:51 Segment &{keys constants 5 map[]}
2020/03/18 22:31:51 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:31:51 Segment &{mouse 1 map[]}
2020/03/18 22:31:51 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:31:51 Segment &{MEVENT 5 map[]}
2020/03/18 22:31:51 Segment &{ looks like this: 1 map[]}
2020/03/18 22:31:51 Segment &{key masks 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:31:51 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:31:51 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:31:51 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:31:51 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:31:51 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:31:51 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:31:51 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:31:51 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:31:51 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:31:51 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:31:51 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:31:51 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:31:51 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:31:51 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:31:51 Segment &{D 1 map[]}
2020/03/18 22:31:51 Segment &{## dmd 1 map[]}
2020/03/18 22:31:51 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:31:51 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:31:51 Segment &{Paradigms 1 map[]}
2020/03/18 22:31:51 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:31:51 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:31:51 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:31:51 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:31:51 Segment &{concurrency 1 map[]}
2020/03/18 22:31:51 Segment &{concurrency 1 map[]}
2020/03/18 22:31:51 Segment &{meta programming 1 map[]}
2020/03/18 22:31:51 Segment &{meta programming 1 map[]}
2020/03/18 22:31:51 Segment &{Tools 1 map[]}
2020/03/18 22:31:51 Segment &{dmd 1 map[]}
2020/03/18 22:31:51 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:31:51 Segment &{Libraries 1 map[]}
2020/03/18 22:31:51 Segment &{Phobos 1 map[]}
2020/03/18 22:31:51 Segment &{Offical D library 1 map[]}
2020/03/18 22:31:51 Segment &{stl 1 map[]}
2020/03/18 22:31:51 Segment &{Resources 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:31:51 Segment &{conf:  1 map[]}
2020/03/18 22:31:51 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:31:51 Segment &{conf:  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:31:51 Segment &{lang:  1 map[]}
2020/03/18 22:31:51 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:31:51 Segment &{lang:  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:31:51 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:31:51 Segment &{Types and Operators 1 map[]}
2020/03/18 22:31:51 Segment &{Integral Types 1 map[]}
2020/03/18 22:31:51 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{16 bit 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{8 bit types 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{conversions 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{non decimal 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{floating points 1 map[]}
2020/03/18 22:31:51 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:31:51 Segment &{dagger 1 map[]}
2020/03/18 22:31:51 Segment &{annotations 1 map[]}
2020/03/18 22:31:51 Segment &{provider annotation 1 map[]}
2020/03/18 22:31:51 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:31:51 Segment &{docker 1 map[]}
2020/03/18 22:31:51 Segment &{introduction 1 map[]}
2020/03/18 22:31:51 Segment &{5 core products: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{supporting products: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{hypervisors 1 map[]}
2020/03/18 22:31:51 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{namespaces 5 map[]}
2020/03/18 22:31:51 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:31:51 Segment &{installation 1 map[]}
2020/03/18 22:31:51 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:31:51 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:31:51 Segment &{setup 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:31:51 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:31:51 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:31:51 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{$ docker version 1 map[]}
2020/03/18 22:31:51 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:31:51 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:31:51 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:31:51 Segment &{// this is the vm 1 map[]}
2020/03/18 22:31:51 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:31:51 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine start  1 map[]}
2020/03/18 22:31:51 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:31:51 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:31:51 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:31:51 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:31:51 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:31:51 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:31:51 Segment &{tagging 1 map[]}
2020/03/18 22:31:51 Segment &{images 5 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{containers 5 map[]}
2020/03/18 22:31:51 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:31:51 Segment &{building 1 map[]}
2020/03/18 22:31:51 Segment &{Each  1 map[]}
2020/03/18 22:31:51 Segment &{layer 5 map[]}
2020/03/18 22:31:51 Segment &{ in an image is  1 map[]}
2020/03/18 22:31:51 Segment &{read only 5 map[]}
2020/03/18 22:31:51 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:31:51 Segment &{writeable layer 5 map[]}
2020/03/18 22:31:51 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:31:51 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:31:51 Segment &{build a new image from a  1 map[]}
2020/03/18 22:31:51 Segment &{build context 5 map[]}
2020/03/18 22:31:51 Segment &{running [run] 1 map[]}
2020/03/18 22:31:51 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:31:51 Segment &{default command 5 map[]}
2020/03/18 22:31:51 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:31:51 Segment &{stop a container 1 map[]}
2020/03/18 22:31:51 Segment &{tagging 1 map[]}
2020/03/18 22:31:51 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:31:51 Segment &{containers 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{container 5 map[]}
2020/03/18 22:31:51 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:31:51 Segment &{view containers 1 map[]}
2020/03/18 22:31:51 Segment &{run a container 1 map[]}
2020/03/18 22:31:51 Segment &{save a change: 1 map[]}
2020/03/18 22:31:51 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:31:51 Segment &{inspect 1 map[]}
2020/03/18 22:31:51 Segment &{management 1 map[]}
2020/03/18 22:31:51 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:31:51 Segment &{docker create 5 map[]}
2020/03/18 22:31:51 Segment &{ command 1 map[]}
2020/03/18 22:31:51 Segment &{To stop a container 1 map[]}
2020/03/18 22:31:51 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:31:51 Segment &{terminal access 1 map[]}
2020/03/18 22:31:51 Segment &{Use  1 map[]}
2020/03/18 22:31:51 Segment &{docker exec 5 map[]}
2020/03/18 22:31:51 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:31:51 Segment &{remove 1 map[]}
2020/03/18 22:31:51 Segment &{images 5 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{containers 5 map[]}
2020/03/18 22:31:51 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:31:51 Segment &{remove containers 1 map[]}
2020/03/18 22:31:51 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:31:51 Segment &{port mapping 1 map[]}
2020/03/18 22:31:51 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:31:51 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:31:51 Segment &{use  1 map[]}
2020/03/18 22:31:51 Segment &{EXPOSE 5 map[]}
2020/03/18 22:31:51 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:31:51 Segment &{hub 1 map[]}
2020/03/18 22:31:51 Segment &{login 1 map[]}
2020/03/18 22:31:51 Segment &{PUSH 5 map[]}
2020/03/18 22:31:51 Segment &{
push the new version 1 map[]}
2020/03/18 22:31:51 Segment &{PULL 5 map[]}
2020/03/18 22:31:51 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:31:51 Segment &{configuration 1 map[]}
2020/03/18 22:31:51 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:31:51 Segment &{to set this up: 1 map[]}
2020/03/18 22:31:51 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:31:51 Segment &{remote daemon 1 map[]}
2020/03/18 22:31:51 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:31:51 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:31:51 Segment &{-H 9 map[]}
2020/03/18 22:31:51 Segment &{ flag 1 map[]}
2020/03/18 22:31:51 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:31:51 Segment &{logging 1 map[]}
2020/03/18 22:31:51 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:31:51 Segment &{print all log for a container 1 map[]}
2020/03/18 22:31:51 Segment &{dockerfile 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{docker file 5 map[]}
2020/03/18 22:31:51 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:31:51 Segment &{Save it as  1 map[]}
2020/03/18 22:31:51 Segment &{Dockerfile 9 map[]}
2020/03/18 22:31:51 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:31:51 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:31:51 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:31:51 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:31:51 Segment &{instructions 1 map[]}
2020/03/18 22:31:51 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:31:51 Segment &{FROM 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:31:51 Segment &{RUN 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:31:51 Segment &{ADD 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:31:51 Segment &{CMD 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{override the default command 1 map[]}
2020/03/18 22:31:51 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:31:51 Segment &{running this: 1 map[]}
2020/03/18 22:31:51 Segment &{ENV 5 map[]}
2020/03/18 22:31:51 Segment &{set environment variables 1 map[]}
2020/03/18 22:31:51 Segment &{VOLUME 5 map[]}
2020/03/18 22:31:51 Segment &{specific a volume 1 map[]}
2020/03/18 22:31:51 Segment &{build context 1 map[]}
2020/03/18 22:31:51 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:31:51 Segment &{volumes 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{volume 5 map[]}
2020/03/18 22:31:51 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{simple volume 5 map[]}
2020/03/18 22:31:51 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:31:51 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:31:51 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:31:51 Segment &{host volumes 5 map[]}
2020/03/18 22:31:51 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:31:51 Segment &{overwritten 3 map[]}
2020/03/18 22:31:51 Segment &{named volumes 5 map[]}
2020/03/18 22:31:51 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:31:51 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:31:51 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:31:51 Segment &{dangling volumes 1 map[]}
2020/03/18 22:31:51 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:31:51 Segment &{networking 1 map[]}
2020/03/18 22:31:51 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:31:51 Segment &{list networks: 1 map[]}
2020/03/18 22:31:51 Segment &{create a network 1 map[]}
2020/03/18 22:31:51 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:31:51 Segment &{use a network: 1 map[]}
2020/03/18 22:31:51 Segment &{inspect network: 1 map[]}
2020/03/18 22:31:51 Segment &{remove a network 1 map[]}
2020/03/18 22:31:51 Segment &{network types 1 map[]}
2020/03/18 22:31:51 Segment &{NONE 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{no network 1 map[]}
2020/03/18 22:31:51 Segment &{HOST 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{shares the host network 1 map[]}
2020/03/18 22:31:51 Segment &{BRIDGE 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:31:51 Segment &{requires  linking: 1 map[]}
2020/03/18 22:31:51 Segment &{a  1 map[]}
2020/03/18 22:31:51 Segment &{container link 5 map[]}
2020/03/18 22:31:51 Segment &{continuous integration 1 map[]}
2020/03/18 22:31:51 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:31:51 Segment &{dockerhub 5 map[]}
2020/03/18 22:31:51 Segment &{ has an  1 map[]}
2020/03/18 22:31:51 Segment &{autobuild 5 map[]}
2020/03/18 22:31:51 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:31:51 Segment &{docker compose 1 map[]}
2020/03/18 22:31:51 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:31:51 Segment &{yaml 5 map[]}
2020/03/18 22:31:51 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:31:51 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:31:51 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:31:51 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:31:51 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:31:51 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:31:51 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:31:51 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:31:51 Segment &{eslint 1 map[]}
2020/03/18 22:31:51 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:31:51 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:31:51 Segment &{configuring 1 map[]}
2020/03/18 22:31:51 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:31:51 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:31:51 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:31:51 Segment &{config file 1 map[]}
2020/03/18 22:31:51 Segment &{.eslintrc 9 map[]}
2020/03/18 22:31:51 Segment &{rules 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:31:51 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:31:51 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:31:51 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:31:51 Segment &{gcc 1 map[]}
2020/03/18 22:31:51 Segment &{show include paths: 1 map[]}
2020/03/18 22:31:51 Segment &{show linker paths: 1 map[]}
2020/03/18 22:31:51 Segment &{options 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:31:51 Segment &{see  1 map[]}
2020/03/18 22:31:51 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:31:51 Segment &{compile 1 map[]}
2020/03/18 22:31:51 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:31:51 Segment &{-I 9 map[]}
2020/03/18 22:31:51 Segment &{ option. 1 map[]}
2020/03/18 22:31:51 Segment &{link 1 map[]}
2020/03/18 22:31:51 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:31:51 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:31:51 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:31:51 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:31:51 Segment &{-L 9 map[]}
2020/03/18 22:31:51 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:31:51 Segment &{-l 9 map[]}
2020/03/18 22:31:51 Segment &{ options 1 map[]}
2020/03/18 22:31:51 Segment &{e.g 1 map[]}
2020/03/18 22:31:51 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:31:51 Segment &{lib 9 map[]}
2020/03/18 22:31:51 Segment &{ prefix 1 map[]}
2020/03/18 22:31:51 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:31:51 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:31:51 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:31:51 Segment &{Security 1 map[]}
2020/03/18 22:31:51 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:31:51 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:31:51 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:31:51 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:31:51 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:31:51 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:31:51 Segment &{Handling personal data 1 map[]}
2020/03/18 22:31:51 Segment &{4 principles: 1 map[]}
2020/03/18 22:31:51 Segment &{1 Accountability 1 map[]}
2020/03/18 22:31:51 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:31:51 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:31:51 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:31:51 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:31:51 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:31:51 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:31:51 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:31:51 Segment &{2 Transparency 1 map[]}
2020/03/18 22:31:51 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:31:51 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:31:51 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:31:51 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:31:51 Segment &{4 Data portability 1 map[]}
2020/03/18 22:31:51 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:31:51 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:31:51 Segment &{Breach 1 map[]}
2020/03/18 22:31:51 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:31:51 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:31:51 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:31:51 Segment &{Summary 1 map[]}
2020/03/18 22:31:51 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:31:51 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:31:51 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:31:51 Segment &{Scams 1 map[]}
2020/03/18 22:31:51 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:31:51 Segment &{Phishing 1 map[]}
2020/03/18 22:31:51 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:31:51 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:31:51 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:31:51 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:31:51 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:31:51 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:31:51 Segment &{Misleading sender 1 map[]}
2020/03/18 22:31:51 Segment &{Misleading sender 1 map[]}
2020/03/18 22:31:51 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:31:51 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:31:51 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:31:51 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:31:51 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:31:51 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:31:51 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:31:51 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:31:51 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:31:51 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:31:51 Segment &{Passwords 1 map[]}
2020/03/18 22:31:51 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:31:51 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:31:51 Segment &{Do’s 1 map[]}
2020/03/18 22:31:51 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:31:51 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:31:51 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:31:51 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:31:51 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:31:51 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:31:51 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:31:51 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:31:51 Segment &{Dont’s 1 map[]}
2020/03/18 22:31:51 Segment &{write them down 1 map[]}
2020/03/18 22:31:51 Segment &{write them down 1 map[]}
2020/03/18 22:31:51 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:31:51 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:31:51 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:31:51 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:31:51 Segment &{share the network password 1 map[]}
2020/03/18 22:31:51 Segment &{share the network password 1 map[]}
2020/03/18 22:31:51 Segment &{Email 1 map[]}
2020/03/18 22:31:51 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Handling Data 1 map[]}
2020/03/18 22:31:51 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:31:51 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:31:51 Segment &{This is known as  1 map[]}
2020/03/18 22:31:51 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:31:51 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:31:51 Segment &{PUBLIC 5 map[]}
2020/03/18 22:31:51 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:31:51 Segment &{PROTECTED 5 map[]}
2020/03/18 22:31:51 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:31:51 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:31:51 Segment &{Offline Security 1 map[]}
2020/03/18 22:31:51 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:31:51 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:31:51 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:31:51 Segment &{Help 1 map[]}
2020/03/18 22:31:51 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:31:51 Segment &{24 1 map[]}
2020/03/18 22:31:51 Segment &{⁄ 1 map[]}
2020/03/18 22:31:51 Segment &{7 1 map[]}
2020/03/18 22:31:51 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:31:51 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:31:51 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:31:51 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:31:51 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:31:51 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:31:51 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:31:51 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:31:51 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{fixing  1 map[]}
2020/03/18 22:31:51 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:31:51 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:31:51 Segment &{fixing  1 map[]}
2020/03/18 22:31:51 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:31:51 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:31:51 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:31:51 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:31:51 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:31:51 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list commits between dates 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:31:51 Segment &{list commits between dates 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:31:51 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:31:51 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:31:51 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:31:51 Segment &{specific folder 5 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:31:51 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:31:51 Segment &{specific folder 5 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{applying a diff file 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{run:
 1 map[]}
2020/03/18 22:31:51 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{applying a diff file 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:51 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:31:51 Segment &{run:
 1 map[]}
2020/03/18 22:31:51 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:31:51 Segment &{run:
 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:31:51 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{referring to: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{last commits  1 map[]}
2020/03/18 22:31:51 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:51 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{referring to: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{last commits  1 map[]}
2020/03/18 22:31:51 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:31:51 Segment &{last commits  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:51 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:31:51 Segment &{last 3 commits  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:31:51 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:31:51 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list of all tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:31:51 Segment &{list of all tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:31:51 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:31:51 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:31:51 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:31:51 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list of all developers 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:31:51 Segment &{list of all developers 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{display graph of branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{or 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:31:51 Segment &{display graph of branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{or 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{remembering the password 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:31:51 Segment &{remembering the password 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:31:51 Segment &{path to the global config 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:51 Segment &{
”` 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{path to the global config 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:51 Segment &{
”` 1 map[]}
2020/03/18 22:31:51 Segment &{example of a global config 1 map[]}
2020/03/18 22:31:51 Whaaat? br
2020/03/18 22:31:51 Segment &{
”` 1 map[]}
2020/03/18 22:31:51 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:31:51 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:31:51 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:31:51 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{view all global settings 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:31:51 Segment &{view all global settings 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{delete tag 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:31:51 Segment &{delete tag 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{pushing tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git push --tags
 9 map[]}
2020/03/18 22:31:51 Segment &{pushing tags 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:31:51 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:31:51 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:31:51 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:31:51 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{deleting local branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:31:51 Segment &{deleting local branch 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list  1 map[]}
2020/03/18 22:31:51 Segment &{actual 5 map[]}
2020/03/18 22:31:51 Segment &{ remote branchs 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:31:51 Segment &{list  1 map[]}
2020/03/18 22:31:51 Segment &{actual 5 map[]}
2020/03/18 22:31:51 Segment &{ remote branchs 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch -r
 9 map[]}
2020/03/18 22:31:51 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{list all local branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch -l
 9 map[]}
2020/03/18 22:31:51 Segment &{list all local branches 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:31:51 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:31:51 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:31:51 Segment &{git 1 map[]}
2020/03/18 22:31:51 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:31:51 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:31:51 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:31:51 Segment &{diff 1 map[]}
2020/03/18 22:31:51 Segment &{options 1 map[]}
2020/03/18 22:31:51 Segment &{stat (  1 map[]}
2020/03/18 22:31:51 Segment &{--stat 9 map[]}
2020/03/18 22:31:51 Segment &{ ) 1 map[]}
2020/03/18 22:31:51 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:31:51 Segment &{clone 1 map[]}
2020/03/18 22:31:51 Segment &{push 1 map[]}
2020/03/18 22:31:51 Segment &{branch 1 map[]}
2020/03/18 22:31:51 Segment &{list §branches: 1 map[]}
2020/03/18 22:31:51 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:31:51 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:31:51 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:31:51 Segment &{remote 1 map[]}
2020/03/18 22:31:51 Segment &{config 1 map[]}
2020/03/18 22:31:51 Segment &{file located at  1 map[]}
2020/03/18 22:31:51 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{link 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:31:51 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:31:51 Segment &{reith 1 map[]}
2020/03/18 22:31:51 Segment &{setup 1 map[]}
2020/03/18 22:31:51 Segment &{Add the following in  1 map[]}
2020/03/18 22:31:51 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:31:51 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:31:51 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:31:51 Segment &{Add the following in  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:31:51 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:31:51 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{and some more
 1 map[]}
2020/03/18 22:31:51 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:31:51 Segment &{and some more
 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:31:51 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:31:51 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:31:51 Segment &{view it: 1 map[]}
2020/03/18 22:31:51 Segment &{set it: 1 map[]}
2020/03/18 22:31:51 Segment &{unset it: 1 map[]}
2020/03/18 22:31:51 Segment &{add it: 1 map[]}
2020/03/18 22:31:51 Segment &{alias 1 map[]}
2020/03/18 22:31:51 Segment &{make an alias: 1 map[]}
2020/03/18 22:31:51 Segment &{grep 1 map[]}
2020/03/18 22:31:51 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:31:51 Segment &{stash 1 map[]}
2020/03/18 22:31:51 Segment &{add and pop 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{list 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{delete 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{view 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{github 1 map[]}
2020/03/18 22:31:51 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:31:51 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:31:51 Segment &{hungarian notation 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:31:51 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:31:51 Segment &{lint 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:31:51 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:31:51 Segment &{gnuplot 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:31:51 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:31:51 Segment &{## install 1 map[]}
2020/03/18 22:31:51 Segment &{usage 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:31:51 Segment &{grep 1 map[]}
2020/03/18 22:31:51 Segment &{options 1 map[]}
2020/03/18 22:31:51 Segment &{invert match 5 map[]}
2020/03/18 22:31:51 Segment &{context 5 map[]}
2020/03/18 22:31:51 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:31:51 Segment &{Grunt 1 map[]}
2020/03/18 22:31:51 Segment &{Gruntfile 1 map[]}
2020/03/18 22:31:51 Segment &{Template  1 map[]}
2020/03/18 22:31:51 Segment &{Gruntfile 9 map[]}
2020/03/18 22:31:51 Segment &{ with  1 map[]}
2020/03/18 22:31:51 Segment &{eslint 9 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{jasmine 9 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{babel 9 map[]}
2020/03/18 22:31:51 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:31:51 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{or 1 map[]}
2020/03/18 22:31:51 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:31:51 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:31:51 Segment &{install mongo script 1 map[]}
2020/03/18 22:31:51 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:31:51 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:31:51 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:31:51 Segment &{from Anthony: 1 map[]}
2020/03/18 22:31:51 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:31:51 Segment &{Jasmine 1 map[]}
2020/03/18 22:31:51 Segment &{js testing framework 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:31:51 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:31:51 Segment &{expectations 1 map[]}
2020/03/18 22:31:51 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:31:51 Segment &{or chain with a  1 map[]}
2020/03/18 22:31:51 Segment &{.not 9 map[]}
2020/03/18 22:31:51 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:31:51 Segment &{matchers 1 map[]}
2020/03/18 22:31:51 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:31:51 Segment &{libexec 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:31:51 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:31:51 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:31:51 Segment &{lsof 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:31:51 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:31:51 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:31:51 Segment &{check ports 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:31:51 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:31:51 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:31:51 Segment &{markdown 1 map[]}
2020/03/18 22:31:51 Segment &{lists 1 map[]}
2020/03/18 22:31:51 Segment &{bulleted 5 map[]}
2020/03/18 22:31:51 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:31:51 Segment &{numbered 5 map[]}
2020/03/18 22:31:51 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:31:51 Segment &{checkbox 5 map[]}
2020/03/18 22:31:51 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:31:51 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:31:51 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:31:51 Segment &{code 1 map[]}
2020/03/18 22:31:51 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:31:51 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:31:51 Segment &{links 1 map[]}
2020/03/18 22:31:51 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:31:51 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:31:51 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:31:51 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:31:51 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:31:51 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:31:51 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:31:51 Segment &{ or i can say  1 map[]}
2020/03/18 22:31:51 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:31:51 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:31:51 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:31:51 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:31:51 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:31:51 Segment &{header 3 1 map[]}
2020/03/18 22:31:51 Segment &{blah blah 1 map[]}
2020/03/18 22:31:51 Segment &{header 4 1 map[]}
2020/03/18 22:31:51 Segment &{blah blah 1 map[]}
2020/03/18 22:31:51 Segment &{header 5 1 map[]}
2020/03/18 22:31:51 Segment &{blah blah 1 map[]}
2020/03/18 22:31:51 Segment &{Alternatively: 1 map[]}
2020/03/18 22:31:51 Segment &{blah 1 map[]}
2020/03/18 22:31:51 Segment &{blah blah 1 map[]}
2020/03/18 22:31:51 Segment &{code 1 map[]}
2020/03/18 22:31:51 Segment &{unmarked 1 map[]}
2020/03/18 22:31:51 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:31:51 Segment &{### scala 1 map[]}
2020/03/18 22:31:51 Segment &{### java 1 map[]}
2020/03/18 22:31:51 Segment &{inline formatting 1 map[]}
2020/03/18 22:31:51 Segment &{you can make string  1 map[]}
2020/03/18 22:31:51 Segment &{bold 5 map[]}
2020/03/18 22:31:51 Segment &{ like that or  1 map[]}
2020/03/18 22:31:51 Segment &{like this 5 map[]}
2020/03/18 22:31:51 Segment &{ if you like 1 map[]}
2020/03/18 22:31:51 Segment &{you can also make  1 map[]}
2020/03/18 22:31:51 Segment &{italics 3 map[]}
2020/03/18 22:31:51 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:31:51 Segment &{single underlines 3 map[]}
2020/03/18 22:31:51 Segment &{ if you prefer 1 map[]}
2020/03/18 22:31:51 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:31:51 Segment &{indented literals 1 map[]}
2020/03/18 22:31:51 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:31:51 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:31:51 Segment &{Maven 1 map[]}
2020/03/18 22:31:51 Segment &{command line 1 map[]}
2020/03/18 22:31:51 Segment &{options 1 map[]}
2020/03/18 22:31:51 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:31:51 Segment &{mongo 1 map[]}
2020/03/18 22:31:51 Segment &{To run the server: 1 map[]}
2020/03/18 22:31:51 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:31:51 Segment &{organisation 1 map[]}
2020/03/18 22:31:51 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:31:51 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:31:51 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:31:51 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:31:51 Segment &{config 1 map[]}
2020/03/18 22:31:51 Segment &{default config 3 map[]}
2020/03/18 22:31:51 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:31:51 Segment &{scale-grid 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:31:51 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:31:51 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:31:51 Segment &{crendentials 1 map[]}
2020/03/18 22:31:51 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:31:51 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:31:51 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:31:51 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:31:51 Segment &{ssh access 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:31:51 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:31:51 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{command line 1 map[]}
2020/03/18 22:31:51 Segment &{querying 1 map[]}
2020/03/18 22:31:51 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:31:51 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:31:51 Segment &{query selectors 1 map[]}
2020/03/18 22:31:51 Segment &{comparison 1 map[]}
2020/03/18 22:31:51 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:31:51 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:31:51 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:31:51 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{logical selectors 1 map[]}
2020/03/18 22:31:51 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{logical selectors 1 map[]}
2020/03/18 22:31:51 Segment &{$or 1 map[]}
2020/03/18 22:31:51 Segment &{$or 1 map[]}
2020/03/18 22:31:51 Segment &{$and 1 map[]}
2020/03/18 22:31:51 Segment &{$and 1 map[]}
2020/03/18 22:31:51 Segment &{$not 1 map[]}
2020/03/18 22:31:51 Segment &{$not 1 map[]}
2020/03/18 22:31:51 Segment &{$nor 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{element 1 map[]}
2020/03/18 22:31:51 Segment &{$nor 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{element 1 map[]}
2020/03/18 22:31:51 Segment &{$exists: 1 map[]}
2020/03/18 22:31:51 Segment &{$exists: 1 map[]}
2020/03/18 22:31:51 Segment &{$type: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{evaluation 1 map[]}
2020/03/18 22:31:51 Segment &{$type: 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{evaluation 1 map[]}
2020/03/18 22:31:51 Segment &{$mod: 1 map[]}
2020/03/18 22:31:51 Segment &{$mod: 1 map[]}
2020/03/18 22:31:51 Segment &{$regex: 1 map[]}
2020/03/18 22:31:51 Segment &{$regex: 1 map[]}
2020/03/18 22:31:51 Segment &{$text: 1 map[]}
2020/03/18 22:31:51 Segment &{$text: 1 map[]}
2020/03/18 22:31:51 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:31:51 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:31:51 Segment &{find 3 map[]}
2020/03/18 22:31:51 Segment &{sort 3 map[]}
2020/03/18 22:31:51 Segment &{meta 1 map[]}
2020/03/18 22:31:51 Segment &{Explain a query 1 map[]}
2020/03/18 22:31:51 Segment &{Show all indexes 1 map[]}
2020/03/18 22:31:51 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:31:51 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:31:51 Segment &{aggregation 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:31:51 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:31:51 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:31:51 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:31:51 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:31:51 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:31:51 Segment &{get some basic information 1 map[]}
2020/03/18 22:31:51 Segment &{tools to say hi 1 map[]}
2020/03/18 22:31:51 Segment &{db.version() 1 map[]}
2020/03/18 22:31:51 Segment &{db.version() 1 map[]}
2020/03/18 22:31:51 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:31:51 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:31:51 Segment &{db.isMater() 1 map[]}
2020/03/18 22:31:51 Segment &{db.isMater() 1 map[]}
2020/03/18 22:31:51 Segment &{rs.conf() 1 map[]}
2020/03/18 22:31:51 Segment &{rs.conf() 1 map[]}
2020/03/18 22:31:51 Segment &{rs.status() 1 map[]}
2020/03/18 22:31:51 Segment &{rs.status() 1 map[]}
2020/03/18 22:31:51 Segment &{showing 1 map[]}
2020/03/18 22:31:51 Segment &{shows dbs 1 map[]}
2020/03/18 22:31:51 Segment &{shows dbs 1 map[]}
2020/03/18 22:31:51 Segment &{show collections 1 map[]}
2020/03/18 22:31:51 Segment &{show collections 1 map[]}
2020/03/18 22:31:51 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:31:51 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:31:51 Segment &{more detail 1 map[]}
2020/03/18 22:31:51 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:31:51 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:31:51 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:31:51 Segment &{Set log level: 1 map[]}
2020/03/18 22:31:51 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:31:51 Segment &{mtools 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:31:51 Segment &{On gitHub -  1 map[]}
2020/03/18 22:31:51 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:31:51 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:31:51 Segment &{mongostat 1 map[]}
2020/03/18 22:31:51 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:31:51 Segment &{flaky networks 1 map[]}
2020/03/18 22:31:51 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:31:51 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:31:51 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:31:51 Segment &{primary failover 1 map[]}
2020/03/18 22:31:51 Segment &{primary failover 1 map[]}
2020/03/18 22:31:51 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:31:51 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:31:51 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:31:51 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:31:51 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:31:51 Segment &{transactions 1 map[]}
2020/03/18 22:31:51 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:31:51 Segment &{drivers 1 map[]}
2020/03/18 22:31:51 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:31:51 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:31:51 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:31:51 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:31:51 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:31:51 Segment &{retry stategies 1 map[]}
2020/03/18 22:31:51 Segment &{don’t retry 1 map[]}
2020/03/18 22:31:51 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{don’t retry 1 map[]}
2020/03/18 22:31:51 Whaaat? br
2020/03/18 22:31:51 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:31:51 Whaaat? br
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:31:51 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:31:51 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:31:51 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:31:51 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:31:51 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:31:51 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:31:51 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:31:51 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:31:51 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:31:51 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:31:51 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:31:51 Segment &{black pipe testing 1 map[]}
2020/03/18 22:31:51 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:31:51 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:31:51 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:31:51 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:31:51 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:31:51 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:31:51 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:31:51 Segment &{hadoop 1 map[]}
2020/03/18 22:31:51 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:31:51 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:31:51 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:31:51 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:31:51 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:31:51 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:31:51 Segment &{great references 1 map[]}
2020/03/18 22:31:51 Segment &{great references 1 map[]}
2020/03/18 22:31:51 Segment &{requisites 1 map[]}
2020/03/18 22:31:51 Segment &{low latency 1 map[]}
2020/03/18 22:31:51 Segment &{low latency 1 map[]}
2020/03/18 22:31:51 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:31:51 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:31:51 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:31:51 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:31:51 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:31:51 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:31:51 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:31:51 Segment &{4. spark 1 map[]}
2020/03/18 22:31:51 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:31:51 Segment &{
on maven 1 map[]}
2020/03/18 22:31:51 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:31:51 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:31:51 Segment &{connecting to spark 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:31:51 Segment &{Mozart 1 map[]}
2020/03/18 22:31:51 Segment &{Urls: 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:31:51 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{development 1 map[]}
2020/03/18 22:31:51 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:31:51 Segment &{and do this: 1 map[]}
2020/03/18 22:31:51 Segment &{page configs 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:31:51 Segment &{euler-test job:  1 map[]}
2020/03/18 22:31:51 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:31:51 Segment &{euler-test job:  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{ngrok 1 map[]}
2020/03/18 22:31:51 Segment &{install 1 map[]}
2020/03/18 22:31:51 Segment &{run 1 map[]}
2020/03/18 22:31:51 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:31:51 Segment &{page configs 1 map[]}
2020/03/18 22:31:51 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:31:51 Segment &{mtools 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:31:51 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:31:51 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:31:51 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:31:51 Segment &{mtools 5 map[]}
2020/03/18 22:31:51 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:31:51 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:31:51 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:31:51 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:31:51 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:31:51 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:31:51 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:31:51 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:31:51 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:31:51 Segment &{  1 map[]}
2020/03/18 22:31:51 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:31:51 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:31:51 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:31:51 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:31:51 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:31:51 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:31:51 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:31:51 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:31:51 Segment &{Recent Changes 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:31:51 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:31:51 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:31:51 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:31:51 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:31:51 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:31:51 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:31:51 Segment &{ for instructions. 1 map[]}
2020/03/18 22:31:51 Segment &{Disclaimer 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:31:51 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:31:51 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:31:51 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:31:51 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:31:51 Segment &{ section here on github. 1 map[]}
2020/03/18 22:31:51 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:31:51 Segment &{mustache 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:31:51 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{conditionals: 5 map[]}
2020/03/18 22:31:51 Segment &{iterations: 5 map[]}
2020/03/18 22:31:51 Segment &{partials: 5 map[]}
2020/03/18 22:31:51 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:31:51 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:31:51 Segment &{Node 1 map[]}
2020/03/18 22:31:51 Segment &{nvm 1 map[]}
2020/03/18 22:31:51 Segment &{Node version manager 1 map[]}
2020/03/18 22:31:51 Segment &{versions 1 map[]}
2020/03/18 22:31:51 Segment &{found in 1 map[]}
2020/03/18 22:31:51 Segment &{alias 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:31:51 Segment &{package managers 1 map[]}
2020/03/18 22:31:51 Segment &{npm 1 map[]}
2020/03/18 22:31:51 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:31:51 Segment &{proxy settings 1 map[]}
2020/03/18 22:31:51 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:31:51 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:31:51 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{apm 1 map[]}
2020/03/18 22:31:51 Segment &{Atom package manager 1 map[]}
2020/03/18 22:31:51 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:31:51 Segment &{php 1 map[]}
2020/03/18 22:31:51 Segment &{pluralsight 1 map[]}
2020/03/18 22:31:51 Segment &{constants 1 map[]}
2020/03/18 22:31:51 Segment &{define: 1 map[]}
2020/03/18 22:31:51 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:31:51 Segment &{existence check 1 map[]}
2020/03/18 22:31:51 Segment &{constants: 5 map[]}
2020/03/18 22:31:51 Segment &{variables 5 map[]}
2020/03/18 22:31:51 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:31:51 Segment &{functions 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{type check 1 map[]}
2020/03/18 22:31:51 Segment &{function 1 map[]}
2020/03/18 22:31:51 Segment &{variable functions: 1 map[]}
2020/03/18 22:31:51 Segment &{make a variable global 5 map[]}
2020/03/18 22:31:51 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:31:51 Segment &{strings 1 map[]}
2020/03/18 22:31:51 Segment &{functions 1 map[]}
2020/03/18 22:31:51 Segment &{docker 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:31:51 Segment &{as per the  1 map[]}
2020/03/18 22:31:51 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:31:51 Segment &{ explanation.. 1 map[]}
2020/03/18 22:31:51 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:31:51 Segment &{project 9 map[]}
2020/03/18 22:31:51 Segment &{ folder, with a  1 map[]}
2020/03/18 22:31:51 Segment &{src 9 map[]}
2020/03/18 22:31:51 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:31:51 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:31:51 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:31:51 Segment &{site.conf 9 map[]}
2020/03/18 22:31:51 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:31:51 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:31:51 Segment &{Run  1 map[]}
2020/03/18 22:31:51 Segment &{docker-compose up 9 map[]}
2020/03/18 22:31:51 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:31:51 Segment &{NOTE: 5 map[]}
2020/03/18 22:31:51 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:31:51 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:31:51 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:31:51 Segment &{site.conf 1 map[]}
2020/03/18 22:31:51 Segment &{cheatsheet 1 map[]}
2020/03/18 22:31:51 Segment &{strings 5 map[]}
2020/03/18 22:31:51 Segment &{date 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{arrays 5 map[]}
2020/03/18 22:31:51 Segment &{numeric example 5 map[]}
2020/03/18 22:31:51 Segment &{functions 5 map[]}
2020/03/18 22:31:51 Segment &{classes 5 map[]}
2020/03/18 22:31:51 Segment &{web 5 map[]}
2020/03/18 22:31:51 Segment &{array 1 map[]}
2020/03/18 22:31:51 Segment &{transform 1 map[]}
2020/03/18 22:31:51 Segment &{map 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{filter 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{reset 1 map[]}
2020/03/18 22:31:51 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:31:51 Segment &{strings 1 map[]}
2020/03/18 22:31:51 Segment &{explode 1 map[]}
2020/03/18 22:31:51 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:31:51 Segment &{example 1 map[]}
2020/03/18 22:31:51 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:31:51 Segment &{postgresql 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:31:51 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:31:51 Segment &{run the daemon: 1 map[]}
2020/03/18 22:31:51 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:31:51 Segment &{cli 1 map[]}
2020/03/18 22:31:51 Segment &{commands: 1 map[]}
2020/03/18 22:31:51 Segment &{snapshots 1 map[]}
2020/03/18 22:31:51 Segment &{take snapshot: 1 map[]}
2020/03/18 22:31:51 Segment &{restore: 1 map[]}
2020/03/18 22:31:51 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:31:51 Segment &{pw log 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:31:51 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:31:51 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:31:51 Segment &{] 1 map[]}
2020/03/18 22:31:51 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:31:51 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:31:51 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:31:51 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:31:51 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:31:51 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:31:51 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:31:51 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:31:51 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:31:51 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:31:51 Segment &{hints 1 map[]}
2020/03/18 22:31:51 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:31:51 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:31:51 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:31:51 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:31:51 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:31:51 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:31:51 Segment &{reset 1 map[]}
2020/03/18 22:31:51 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:31:51 Segment &{keys 1 map[]}
2020/03/18 22:31:51 Segment &{textual:  1 map[]}
2020/03/18 22:31:51 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:31:51 Segment &{textual:  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:31:51 Segment &{python 1 map[]}
2020/03/18 22:31:51 Segment &{getting it working 1 map[]}
2020/03/18 22:31:51 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:31:51 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:31:51 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:31:51 Segment &{ as follows: 1 map[]}
2020/03/18 22:31:51 Segment &{useful 1 map[]}
2020/03/18 22:31:51 Segment &{get openssl version 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:31:51 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:31:51 Segment &{user name 5 map[]}
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:31:51 Segment &{API Key 5 map[]}
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:31:51 Segment &{docker 1 map[]}
2020/03/18 22:31:51 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:31:51 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:31:51 Segment &{react 1 map[]}
2020/03/18 22:31:51 Segment &{state 1 map[]}
2020/03/18 22:31:51 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:31:51 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:31:51 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:31:51 Segment &{refs 1 map[]}
2020/03/18 22:31:51 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:31:51 Segment &{unique key 1 map[]}
2020/03/18 22:31:51 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:31:51 Segment &{key 9 map[]}
2020/03/18 22:31:51 Segment &{ item 1 map[]}
2020/03/18 22:31:51 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:31:51 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:31:51 Segment &{redis 1 map[]}
2020/03/18 22:31:51 Segment &{operations 1 map[]}
2020/03/18 22:31:51 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:31:51 Segment &{redis-cli 9 map[]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 Segment &{keys: 5 map[]}
2020/03/18 22:31:51 Segment &{z-range 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:31:51 Segment &{Regex 1 map[]}
2020/03/18 22:31:51 Segment &{group constructs 1 map[]}
2020/03/18 22:31:51 Segment &{lookahead 1 map[]}
2020/03/18 22:31:51 Segment &{positive lookahead 5 map[]}
2020/03/18 22:31:51 Segment &{(?=…) 1 map[]}
2020/03/18 22:31:51 Segment &{(?=…) 1 map[]}
2020/03/18 22:31:51 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:31:51 Segment &{negative lookahead 5 map[]}
2020/03/18 22:31:51 Segment &{(?!…) 1 map[]}
2020/03/18 22:31:51 Segment &{(?!…) 1 map[]}
2020/03/18 22:31:51 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:31:51 Segment &{lookbehind 1 map[]}
2020/03/18 22:31:51 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:31:51 Segment &{(?<=…) 1 map[]}
2020/03/18 22:31:51 Segment &{(?<=…) 1 map[]}
2020/03/18 22:31:51 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:31:51 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:31:51 Segment &{(?<!…) 1 map[]}
2020/03/18 22:31:51 Segment &{(?<!…) 1 map[]}
2020/03/18 22:31:51 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:31:51 Segment &{capturing 1 map[]}
2020/03/18 22:31:51 Segment &{non capturing group 5 map[]}
2020/03/18 22:31:51 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:31:51 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:31:51 Segment &{RPM 1 map[]}
2020/03/18 22:31:51 Segment &{sources 1 map[]}
2020/03/18 22:31:51 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{spec file 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:31:51 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:31:51 Segment &{variables 1 map[]}
2020/03/18 22:31:51 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:31:51 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:31:51 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{building 1 map[]}
2020/03/18 22:31:51 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:31:51 Segment &{You need to have  1 map[]}
2020/03/18 22:31:51 Segment &{rmpbuild 9 map[]}
2020/03/18 22:31:51 Segment &{ installed, so  1 map[]}
2020/03/18 22:31:51 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{Copy  1 map[]}
2020/03/18 22:31:51 Segment &{SOURCES 9 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{SPECS 9 map[]}
2020/03/18 22:31:51 Segment &{ to  1 map[]}
2020/03/18 22:31:51 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:31:51 Segment &{ and  1 map[]}
2020/03/18 22:31:51 Segment &{.../SPECS 9 map[]}
2020/03/18 22:31:51 Segment &{ respectively. 1 map[]}
2020/03/18 22:31:51 Segment &{list 1 map[]}
2020/03/18 22:31:51 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:31:51 Segment &{troubleshoot 1 map[]}
2020/03/18 22:31:51 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:31:51 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:31:51 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:31:51 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:31:51 Segment &{scalegrid 1 map[]}
2020/03/18 22:31:51 Segment &{command line access 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:31:51 Segment &{sed 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:31:51 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:31:51 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:31:51 Segment &{substitute (s) 1 map[]}
2020/03/18 22:31:51 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:31:51 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:31:51 Segment &{Selenium 1 map[]}
2020/03/18 22:31:51 Segment &{Webdrivers 1 map[]}
2020/03/18 22:31:51 Segment &{Capabilities 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:31:51 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:31:51 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:31:51 Segment &{Seyren 1 map[]}
2020/03/18 22:31:51 Segment &{Alerts API 1 map[]}
2020/03/18 22:31:51 Segment &{Get check alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:31:51 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:51 Segment &{Get alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Charts API 1 map[]}
2020/03/18 22:31:51 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Return png image 1 map[]}
2020/03/18 22:31:51 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:31:51 Segment &{Return png image 1 map[]}
2020/03/18 22:31:51 Segment &{Checks API 1 map[]}
2020/03/18 22:31:51 Segment &{Search checks 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:31:51 Segment &{See  1 map[]}
2020/03/18 22:31:51 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:31:51 Segment &{Create a check 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ POST 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ POST 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:31:51 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:31:51 Segment &{Get a check 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:51 Segment &{Update a check 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:31:51 Segment &{Delete a check 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:51 Segment &{Config API 1 map[]}
2020/03/18 22:31:51 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /config 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /config 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{Metrics API 1 map[]}
2020/03/18 22:31:51 Segment &{Get metric count 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ GET 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:31:51 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:31:51 Segment &{Create a subscription 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ POST 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ POST 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:31:51 Segment &{Update a subscription 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:51 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ DELETE 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:51 Segment &{Test a subscription 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:31:51 Segment &{URL 5 map[]}
2020/03/18 22:31:51 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{Method 5 map[]}
2020/03/18 22:31:51 Segment &{ PUT 1 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Segment &{URL Params 5 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Query Params 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Body 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{None 1 map[]}
2020/03/18 22:31:51 Segment &{Response 5 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:31:51 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:31:51 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:31:51 Segment &{Spring 1 map[]}
2020/03/18 22:31:51 Segment &{Context annotations 1 map[]}
2020/03/18 22:31:51 Segment &{xml 1 map[]}
2020/03/18 22:31:51 Segment &{in  1 map[]}
2020/03/18 22:31:51 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:31:51 Segment &{, add the following: 1 map[]}
2020/03/18 22:31:51 Segment &{Types 1 map[]}
2020/03/18 22:31:51 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:31:51 Segment &{: any POJO 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{: any POJO 1 map[]}
2020/03/18 22:31:51 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:31:51 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:31:51 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:31:51 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:31:51 Segment &{@Autowired 9 map[]}
2020/03/18 22:31:51 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:31:51 Segment &{Java configuration 1 map[]}
2020/03/18 22:31:51 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:31:51 Segment &{use  1 map[]}
2020/03/18 22:31:51 Segment &{@Configuration 9 map[]}
2020/03/18 22:31:51 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:31:51 Segment &{use  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:31:51 Segment &{use  1 map[]}
2020/03/18 22:31:51 Segment &{@Bean 9 map[]}
2020/03/18 22:31:51 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:31:51 Segment &{use  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:31:51 Segment &{Autowiring 1 map[]}
2020/03/18 22:31:51 Segment &{add  1 map[]}
2020/03/18 22:31:51 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:31:51 Segment &{ annotation to your  1 map[]}
2020/03/18 22:31:51 Segment &{AppConfig 9 map[]}
2020/03/18 22:31:51 Segment &{ class 1 map[]}
2020/03/18 22:31:51 Segment &{Scope 1 map[]}
2020/03/18 22:31:51 Segment &{using scope: 1 map[]}
2020/03/18 22:31:51 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:31:51 Segment &{singleton 1 map[]}
2020/03/18 22:31:51 Segment &{“singleton” 1 map[]}
2020/03/18 22:31:51 Segment &{“singleton” 1 map[]}
2020/03/18 22:31:51 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:31:51 Segment &{prototype 1 map[]}
2020/03/18 22:31:51 Segment &{“prototype” 1 map[]}
2020/03/18 22:31:51 Segment &{“prototype” 1 map[]}
2020/03/18 22:31:51 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:31:51 Segment &{request 1 map[]}
2020/03/18 22:31:51 Segment &{“request” 1 map[]}
2020/03/18 22:31:51 Segment &{“request” 1 map[]}
2020/03/18 22:31:51 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:31:51 Segment &{session 1 map[]}
2020/03/18 22:31:51 Segment &{“session” 1 map[]}
2020/03/18 22:31:51 Segment &{“session” 1 map[]}
2020/03/18 22:31:51 Segment &{Lives per session 1 map[]}
2020/03/18 22:31:51 Segment &{global session 1 map[]}
2020/03/18 22:31:51 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:31:51 Segment &{Properties 1 map[]}
2020/03/18 22:31:51 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:31:51 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:31:51 Segment &{Annotate the value 1 map[]}
2020/03/18 22:31:51 Segment &{in  1 map[]}
2020/03/18 22:31:51 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:31:51 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:31:51 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:31:51 Segment &{UIViewController 1 map[]}
2020/03/18 22:31:51 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:31:51 Segment &{SKScene 1 map[]}
2020/03/18 22:31:51 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:31:51 Segment &{ssh 1 map[]}
2020/03/18 22:31:51 Segment &{ec2 logon 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:31:51 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:31:51 Segment &{setup 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:31:51 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:31:51 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:31:51 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:31:51 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:31:51 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:31:51 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:31:51 Segment &{To logon: 1 map[]}
2020/03/18 22:31:51 Segment &{To end: 1 map[]}
2020/03/18 22:31:51 Segment &{generate 1 map[]}
2020/03/18 22:31:51 Segment &{From the command line: 1 map[]}
2020/03/18 22:31:51 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:31:51 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:31:51 Segment &{view 1 map[]}
2020/03/18 22:31:51 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:31:51 Segment &{scp 1 map[]}
2020/03/18 22:31:51 Segment &{upload: 1 map[]}
2020/03/18 22:31:51 Segment &{download: 1 map[]}
2020/03/18 22:31:51 Segment &{Keys 1 map[]}
2020/03/18 22:31:51 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:31:51 Segment &{id2_rsa 9 map[]}
2020/03/18 22:31:51 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:31:51 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:31:51 Segment &{svn 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:31:51 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:31:51 Segment &{propset 1 map[]}
2020/03/18 22:31:51 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:31:51 Segment &{revert 1 map[]}
2020/03/18 22:31:51 Segment &{delete 1 map[]}
2020/03/18 22:31:51 Segment &{mkdir 1 map[]}
2020/03/18 22:31:51 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:31:51 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:31:51 Segment &{systemd 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:31:51 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{journalctl 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:31:51 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:31:51 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:31:51 Segment &{tar 1 map[]}
2020/03/18 22:31:51 Segment &{create 1 map[]}
2020/03/18 22:31:51 Segment &{unzip 1 map[]}
2020/03/18 22:31:51 Segment &{list files in tar 1 map[]}
2020/03/18 22:31:51 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:31:51 Segment &{tcp/ip 1 map[]}
2020/03/18 22:31:51 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:31:51 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:31:51 Segment &{Protocols 1 map[]}
2020/03/18 22:31:51 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{protocol stack 5 map[]}
2020/03/18 22:31:51 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{gateway 5 map[]}
2020/03/18 22:31:51 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:31:51 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:31:51 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:31:51 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:31:51 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:31:51 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:31:51 Segment &{Architecture 1 map[]}
2020/03/18 22:31:51 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:31:51 Segment &{DARPA 3 map[]}
2020/03/18 22:31:51 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:31:51 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:31:51 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{DARPA Model 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:31:51 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{one to one 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{one to one 1 map[]}
2020/03/18 22:31:51 Segment &{one to one 1 map[]}
2020/03/18 22:31:51 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:51 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:31:51 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:51 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:31:51 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{connectionless 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{connectionless 1 map[]}
2020/03/18 22:31:51 Segment &{connectionless 1 map[]}
2020/03/18 22:31:51 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:51 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:31:51 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{addressing 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{routing 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{addressing 1 map[]}
2020/03/18 22:31:51 Segment &{addressing 1 map[]}
2020/03/18 22:31:51 Segment &{routing 1 map[]}
2020/03/18 22:31:51 Segment &{routing 1 map[]}
2020/03/18 22:31:51 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:51 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:31:51 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:51 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:31:51 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:51 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:31:51 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:31:51 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:51 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:31:51 Segment &{Three way handshake 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:31:51 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:31:51 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:31:51 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:31:51 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:31:51 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:31:51 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:31:51 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:31:51 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:31:51 Segment &{IP Addresses 1 map[]}
2020/03/18 22:31:51 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:31:51 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:31:51 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:31:51 Segment &{The  1 map[]}
2020/03/18 22:31:51 Segment &{subnet mask 5 map[]}
2020/03/18 22:31:51 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:31:51 Segment &{255 9 map[]}
2020/03/18 22:31:51 Segment &{ and ending in  1 map[]}
2020/03/18 22:31:51 Segment &{0 9 map[]}
2020/03/18 22:31:51 Segment &{.  1 map[]}
2020/03/18 22:31:51 Segment &{255 9 map[]}
2020/03/18 22:31:51 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:31:51 Segment &{0 9 map[]}
2020/03/18 22:31:51 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. 1 map[]}
2020/03/18 22:31:51 Segment &{IP address = 1 map[]}
2020/03/18 22:31:51 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:31:51 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:31:51 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:31:51 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:31:51 Segment &{192.168.10 9 map[]}
2020/03/18 22:31:51 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:31:51 Segment &{1 9 map[]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 Segment &{to see ip info 1 map[]}
2020/03/18 22:31:51 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:31:51 Segment &{it sends an  1 map[]}
2020/03/18 22:31:51 Segment &{echo request 3 map[]}
2020/03/18 22:31:51 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:31:51 Segment &{man ping 9 map[]}
2020/03/18 22:31:51 Segment &{) 1 map[]}
2020/03/18 22:31:51 Segment &{Rules 1 map[]}
2020/03/18 22:31:51 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:31:51 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:31:51 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:31:51 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:31:51 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:31:51 Segment &{Classes 1 map[]}
2020/03/18 22:31:51 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:31:51 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:31:51 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:31:51 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:31:51 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:31:51 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:31:51 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:31:51 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:31:51 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:31:51 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:31:51 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:31:51 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:31:51 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:31:51 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:31:51 Segment &{ (NAT). 1 map[]}
2020/03/18 22:31:51 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:31:51 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:31:51 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:31:51 Segment &{Internetworking 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{router 5 map[]}
2020/03/18 22:31:51 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:31:51 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:31:51 Segment &{router 5 map[]}
2020/03/18 22:31:51 Segment &{. This is  1 map[]}
2020/03/18 22:31:51 Segment &{internetworking 5 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{A  1 map[]}
2020/03/18 22:31:51 Segment &{default gateway 5 map[]}
2020/03/18 22:31:51 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:31:51 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:31:51 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:31:51 Segment &{Subnetting 5 map[]}
2020/03/18 22:31:51 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:31:51 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:31:51 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:31:51 Segment &{Solution is to use  1 map[]}
2020/03/18 22:31:51 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:31:51 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:31:51 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:31:51 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:31:51 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:31:51 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:31:51 Segment &{subnets 5 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 Segment &{e.g.  1 map[]}
2020/03/18 22:31:51 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:31:51 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:31:51 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:31:51 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:31:51 Segment &{CIDR notation 5 map[]}
2020/03/18 22:31:51 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:31:51 Segment &{e.g.  1 map[]}
2020/03/18 22:31:51 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:31:51 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:31:51 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:31:51 Segment &{ can be better read as  1 map[]}
2020/03/18 22:31:51 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:31:51 Segment &{. The segment after the  1 map[]}
2020/03/18 22:31:51 Segment &{/ 9 map[]}
2020/03/18 22:31:51 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:31:51 Segment &{IPv6 1 map[]}
2020/03/18 22:31:51 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:31:51 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:31:51 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:31:51 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:31:51 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:31:51 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:31:51 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:31:51 Segment &{0 9 map[]}
2020/03/18 22:31:51 Segment &{s block with double  1 map[]}
2020/03/18 22:31:51 Segment &{:: 9 map[]}
2020/03/18 22:31:51 Segment &{, ie:  1 map[]}
2020/03/18 22:31:51 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:31:51 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:31:51 Segment &{todo 1 map[]}
2020/03/18 22:31:51 Segment &{lookup 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:31:51 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:31:51 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:31:51 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:31:51 Whaaat? a
2020/03/18 22:31:51 Segment &{projects 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:31:51 Segment &{logic 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:31:51 Segment &{note-worthy 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:31:51 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:31:51 Whaaat? br
2020/03/18 22:31:51 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:31:51 Segment &{:help | :h 9 map[]}
2020/03/18 22:31:51 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:31:51 Segment &{headers as tags 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:31:51 Segment &{bugs 1 map[]}
2020/03/18 22:31:51 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:31:51 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:51 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:31:51 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:51 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:31:51 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:51 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:31:51 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:51 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:31:51 Segment &{markdown [md] 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] sh 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] json 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] scala 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] php 1 map[]}
2020/03/18 22:31:51 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:51 Segment &{global should be protected 1 map[]}
2020/03/18 22:31:51 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:31:51 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:31:51 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] tables 1 map[]}
2020/03/18 22:31:51 Segment &{bugs 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:31:51 Segment &{cppbt 1 map[]}
2020/03/18 22:31:51 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:31:51 Segment &{subnets 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:31:51 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:31:51 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:31:51 Segment &{troubleshoot 1 map[]}
2020/03/18 22:31:51 Segment &{ssl 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:31:51 Segment &{realpath 1 map[]}
2020/03/18 22:31:51 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:31:51 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:31:51 Segment &{Vagrant 1 map[]}
2020/03/18 22:31:51 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:31:51 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:31:51 Segment &{Installation 1 map[]}
2020/03/18 22:31:51 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:31:51 Segment &{Usage 1 map[]}
2020/03/18 22:31:51 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:31:51 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:31:51 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:31:51 Segment &{That’s it! 1 map[]}
2020/03/18 22:31:51 Segment &{Examples 1 map[]}
2020/03/18 22:31:51 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:31:51 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:31:51 Segment &{Vagrant version 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:31:51 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:31:51 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:31:51 Segment &{vim 1 map[]}
2020/03/18 22:31:51 Segment &{commands 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:31:51 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:31:51 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:31:51 Segment &{In command mode: 1 map[]}
2020/03/18 22:31:51 Segment &{Saving 5 map[]}
2020/03/18 22:31:51 Segment &{:
+  1 map[]}
2020/03/18 22:31:51 Segment &{:wq 9 map[]}
2020/03/18 22:31:51 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:31:51 Segment &{:q! 9 map[]}
2020/03/18 22:31:51 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:31:51 Segment &{Editing 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{x 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete 1 map[]}
2020/03/18 22:31:51 Segment &{x 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete 1 map[]}
2020/03/18 22:31:51 Segment &{u 9 map[]}
2020/03/18 22:31:51 Segment &{ - undo 1 map[]}
2020/03/18 22:31:51 Segment &{u 9 map[]}
2020/03/18 22:31:51 Segment &{ - undo 1 map[]}
2020/03/18 22:31:51 Segment &{ctrl-r 9 map[]}
2020/03/18 22:31:51 Segment &{ - redo 1 map[]}
2020/03/18 22:31:51 Segment &{ctrl-r 9 map[]}
2020/03/18 22:31:51 Segment &{ - redo 1 map[]}
2020/03/18 22:31:51 Segment &{dw 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:31:51 Segment &{dw 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:31:51 Segment &{2w 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:31:51 Segment &{2w 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:31:51 Segment &{3e 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:31:51 Segment &{3e 9 map[]}
2020/03/18 22:31:51 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:31:51 Segment &{0 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:31:51 Segment &{0 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:31:51 Segment &{$ 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:31:51 Segment &{$ 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:31:51 Segment &{e 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to next word 1 map[]}
2020/03/18 22:31:51 Segment &{e 9 map[]}
2020/03/18 22:31:51 Segment &{ - move to next word 1 map[]}
2020/03/18 22:31:51 Segment &{d2w 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete two words 1 map[]}
2020/03/18 22:31:51 Segment &{d2w 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete two words 1 map[]}
2020/03/18 22:31:51 Segment &{dd 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete the line 1 map[]}
2020/03/18 22:31:51 Segment &{dd 9 map[]}
2020/03/18 22:31:51 Segment &{ - delete the line 1 map[]}
2020/03/18 22:31:51 Segment &{yy 9 map[]}
2020/03/18 22:31:51 Segment &{ - copy line 1 map[]}
2020/03/18 22:31:51 Segment &{yy 9 map[]}
2020/03/18 22:31:51 Segment &{ - copy line 1 map[]}
2020/03/18 22:31:51 Segment &{p 9 map[]}
2020/03/18 22:31:51 Segment &{ - paste 1 map[]}
2020/03/18 22:31:51 Segment &{p 9 map[]}
2020/03/18 22:31:51 Segment &{ - paste 1 map[]}
2020/03/18 22:31:51 Segment &{Modes 5 map[]}
2020/03/18 22:31:51 Segment &{: 1 map[]}
2020/03/18 22:31:51 Segment &{i 9 map[]}
2020/03/18 22:31:51 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:31:51 Segment &{a 9 map[]}
2020/03/18 22:31:51 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:31:51 Segment &{A 9 map[]}
2020/03/18 22:31:51 Segment &{ - append text at end 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - append text at end 1 map[]}
2020/03/18 22:31:51 Segment &{a 9 map[]}
2020/03/18 22:31:51 Segment &{ - append text at 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - append text at 1 map[]}
2020/03/18 22:31:51 Segment &{O 9 map[]}
2020/03/18 22:31:51 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:31:51 Segment &{o 9 map[]}
2020/03/18 22:31:51 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:31:51 Segment &{V 9 map[]}
2020/03/18 22:31:51 Segment &{ - visual mode 1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{ - visual mode 1 map[]}
2020/03/18 22:31:51 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:31:51 Segment &{yum 1 map[]}
2020/03/18 22:31:51 Segment &{search 1 map[]}
2020/03/18 22:31:51 Segment &{list 1 map[]}
2020/03/18 22:31:51 Segment &{repositories 1 map[]}
2020/03/18 22:31:51 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:31:51 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:31:51 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:31:51 Segment &{packages 1 map[]}
2020/03/18 22:31:51 Segment &{g++ 9 map[]}
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{rpmbuild 9 map[]}
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{:  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:31:51 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:51 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:31:51 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:31:51 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:51 Whaaat? strong
2020/03/18 22:31:51 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:51 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:31:51 Segment &{h2 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h3 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h4 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h5 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{h6 Heading 1 map[]}
2020/03/18 22:31:51 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Whaaat? hr
2020/03/18 22:31:51 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:31:51 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:31:51 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:31:51 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:31:51 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:31:51 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:31:51 Segment &{Emphasis 1 map[]}
2020/03/18 22:31:51 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:51 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:51 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:51 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:51 Segment &{Strikethrough 1 map[]}
2020/03/18 22:31:51 Segment &{Blockquotes 1 map[]}
2020/03/18 22:31:51 Segment &{Lists 1 map[]}
2020/03/18 22:31:51 Segment &{Unordered 1 map[]}
2020/03/18 22:31:51 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:51 Segment &{+ 9 map[]}
2020/03/18 22:31:51 Segment &{,  1 map[]}
2020/03/18 22:31:51 Segment &{- 9 map[]}
2020/03/18 22:31:51 Segment &{, or  1 map[]}
2020/03/18 22:31:51 Segment &{* 9 map[]}
2020/03/18 22:31:51 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{,  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{, or  1 map[]}
2020/03/18 22:31:51 Whaaat? code
2020/03/18 22:31:51 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:51 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:51 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:51 Segment &{Ordered 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{Code 1 map[]}
2020/03/18 22:31:51 Segment &{Inline  1 map[]}
2020/03/18 22:31:51 Segment &{code 9 map[]}
2020/03/18 22:31:51 Segment &{Indented code 1 map[]}
2020/03/18 22:31:51 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:31:51 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:31:51 Segment &{Tables 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:31:51 Whaaat? table
2020/03/18 22:31:51 Segment &{Links 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:31:51 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:31:51 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:31:51 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:31:51 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:31:51 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:31:51 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:31:51 Segment &{Images 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:31:51 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:31:51 Segment &{Plugins 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:31:51 Segment &{The killer feature of  1 map[]}
2020/03/18 22:31:51 Segment &{markdown-it 9 map[]}
2020/03/18 22:31:51 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:31:51 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:31:51 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:31:51 Segment &{see  1 map[]}
2020/03/18 22:31:51 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:31:51 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:31:51 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:31:51 Segment &{ /  1 map[]}
2020/03/18 22:31:51 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:31:51 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:51 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:51 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:51 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:31:51 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:31:51 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:31:51 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:31:51 Segment &{==Marked text== 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:31:51 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:31:51 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:31:51 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:31:51 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:31:51 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:31:51 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:31:51 Segment &{can have markup 5 map[]}
2020/03/18 22:31:51 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:31:51 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:31:51 Whaaat? dl
2020/03/18 22:31:51 Segment &{Compact style: 3 map[]}
2020/03/18 22:31:51 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:31:51 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:31:51 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:31:51 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:31:51 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:31:51 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:31:51 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:31:51 Segment &{::: warning
 1 map[]}
2020/03/18 22:31:51 Segment &{here be dragons 3 map[]}
2020/03/18 22:31:51 Segment &{
::: 1 map[]}
2020/03/18 22:31:51 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:31:51 Segment &{test 1 map[]}
2020/03/18 22:31:51 Segment &{hello there. this is  1 map[]}
2020/03/18 22:31:51 Segment &{formatted with  3 map[]}
2020/03/18 22:31:51 Segment &{bold 7 map[]}
2020/03/18 22:31:51 Segment &{ and 3 map[]}
2020/03/18 22:31:51 Segment &{ with some  1 map[]}
2020/03/18 22:31:51 Segment &{bold text 5 map[]}
2020/03/18 22:31:51 Segment &{ and some  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{. 1 map[]}
2020/03/18 22:31:51 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:31:51 Segment &{As a special treat,  1 map[]}
2020/03/18 22:31:51 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:31:51 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:31:51 Segment &{foofoo 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 3 1 map[]}
2020/03/18 22:31:51 Segment &{heading 3 content 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 4 1 map[]}
2020/03/18 22:31:51 Segment &{heading 4 content 1 map[]}
2020/03/18 22:31:51 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 5 1 map[]}
2020/03/18 22:31:51 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:31:51 Segment &{one 1 map[]}
2020/03/18 22:31:51 Segment &{one 1 map[]}
2020/03/18 22:31:51 Segment &{two 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{with some code
 9 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{inner list biatch 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{number 2 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{two 1 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Segment &{
 1 map[]}
2020/03/18 22:31:51 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:51 Segment &{inline code 9 map[]}
2020/03/18 22:31:51 Segment &{

 1 map[]}
2020/03/18 22:31:51 Whaaat? ol
2020/03/18 22:31:51 Segment &{three 1 map[]}
2020/03/18 22:31:51 Segment &{three 1 map[]}
2020/03/18 22:31:51 Segment &{Heading 6 1 map[]}
2020/03/18 22:31:51 Segment &{heading 6 content 1 map[]}
2020/03/18 22:31:51 Segment &{####### H7? 1 map[]}
2020/03/18 22:31:51 Segment &{no such thing 1 map[]}
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:31:59 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:31:59 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:31:59 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:59 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:59 Whaaat? strong
2020/03/18 22:31:59 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:31:59 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:31:59 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:59 Whaaat? strong
2020/03/18 22:31:59 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:59 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:31:59 Segment &{h2 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h3 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h4 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h5 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h6 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:31:59 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:31:59 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:31:59 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:31:59 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:31:59 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:31:59 Segment &{Emphasis 1 map[]}
2020/03/18 22:31:59 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:59 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:59 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:59 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:59 Segment &{Strikethrough 1 map[]}
2020/03/18 22:31:59 Segment &{Blockquotes 1 map[]}
2020/03/18 22:31:59 Segment &{Lists 1 map[]}
2020/03/18 22:31:59 Segment &{Unordered 1 map[]}
2020/03/18 22:31:59 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:59 Segment &{+ 9 map[]}
2020/03/18 22:31:59 Segment &{,  1 map[]}
2020/03/18 22:31:59 Segment &{- 9 map[]}
2020/03/18 22:31:59 Segment &{, or  1 map[]}
2020/03/18 22:31:59 Segment &{* 9 map[]}
2020/03/18 22:31:59 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{,  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{, or  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:59 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:59 Segment &{Ordered 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{Code 1 map[]}
2020/03/18 22:31:59 Segment &{Inline  1 map[]}
2020/03/18 22:31:59 Segment &{code 9 map[]}
2020/03/18 22:31:59 Segment &{Indented code 1 map[]}
2020/03/18 22:31:59 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:31:59 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:31:59 Segment &{Tables 1 map[]}
2020/03/18 22:31:59 Whaaat? table
2020/03/18 22:31:59 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:31:59 Whaaat? table
2020/03/18 22:31:59 Segment &{Links 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:31:59 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:31:59 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:31:59 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:31:59 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:31:59 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:31:59 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:31:59 Segment &{Images 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:31:59 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:31:59 Segment &{Plugins 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:31:59 Segment &{The killer feature of  1 map[]}
2020/03/18 22:31:59 Segment &{markdown-it 9 map[]}
2020/03/18 22:31:59 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:31:59 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:31:59 Segment &{. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:31:59 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:31:59 Segment &{see  1 map[]}
2020/03/18 22:31:59 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:31:59 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:31:59 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:31:59 Segment &{ /  1 map[]}
2020/03/18 22:31:59 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:31:59 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:59 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:59 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:59 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:31:59 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:31:59 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:31:59 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:31:59 Segment &{==Marked text== 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:31:59 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:31:59 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:31:59 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:31:59 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:31:59 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:31:59 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:31:59 Segment &{can have markup 5 map[]}
2020/03/18 22:31:59 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:31:59 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:31:59 Whaaat? dl
2020/03/18 22:31:59 Segment &{Compact style: 3 map[]}
2020/03/18 22:31:59 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:31:59 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:31:59 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:31:59 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:31:59 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:31:59 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:31:59 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:31:59 Segment &{::: warning
 1 map[]}
2020/03/18 22:31:59 Segment &{here be dragons 3 map[]}
2020/03/18 22:31:59 Segment &{
::: 1 map[]}
2020/03/18 22:31:59 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:31:59 Segment &{test 1 map[]}
2020/03/18 22:31:59 Segment &{hello there. this is  1 map[]}
2020/03/18 22:31:59 Segment &{formatted with  3 map[]}
2020/03/18 22:31:59 Segment &{bold 7 map[]}
2020/03/18 22:31:59 Segment &{ and 3 map[]}
2020/03/18 22:31:59 Segment &{ with some  1 map[]}
2020/03/18 22:31:59 Segment &{bold text 5 map[]}
2020/03/18 22:31:59 Segment &{ and some  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:31:59 Segment &{As a special treat,  1 map[]}
2020/03/18 22:31:59 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:31:59 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:31:59 Segment &{foofoo 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 3 1 map[]}
2020/03/18 22:31:59 Segment &{heading 3 content 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 4 1 map[]}
2020/03/18 22:31:59 Segment &{heading 4 content 1 map[]}
2020/03/18 22:31:59 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 5 1 map[]}
2020/03/18 22:31:59 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:31:59 Segment &{one 1 map[]}
2020/03/18 22:31:59 Segment &{one 1 map[]}
2020/03/18 22:31:59 Segment &{two 1 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{with some code
 9 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{inner list biatch 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{number 2 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{two 1 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{three 1 map[]}
2020/03/18 22:31:59 Segment &{three 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 6 1 map[]}
2020/03/18 22:31:59 Segment &{heading 6 content 1 map[]}
2020/03/18 22:31:59 Segment &{####### H7? 1 map[]}
2020/03/18 22:31:59 Segment &{no such thing 1 map[]}
2020/03/18 22:31:59 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:31:59 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:59 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:59 Whaaat? strong
2020/03/18 22:31:59 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:31:59 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:31:59 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:59 Whaaat? strong
2020/03/18 22:31:59 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:31:59 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:31:59 Segment &{h2 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h3 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h4 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h5 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{h6 Heading 1 map[]}
2020/03/18 22:31:59 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Whaaat? hr
2020/03/18 22:31:59 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:31:59 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:31:59 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:31:59 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:31:59 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:31:59 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:31:59 Segment &{Emphasis 1 map[]}
2020/03/18 22:31:59 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:59 Segment &{This is bold text 5 map[]}
2020/03/18 22:31:59 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:59 Segment &{This is italic text 3 map[]}
2020/03/18 22:31:59 Segment &{Strikethrough 1 map[]}
2020/03/18 22:31:59 Segment &{Blockquotes 1 map[]}
2020/03/18 22:31:59 Segment &{Lists 1 map[]}
2020/03/18 22:31:59 Segment &{Unordered 1 map[]}
2020/03/18 22:31:59 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:59 Segment &{+ 9 map[]}
2020/03/18 22:31:59 Segment &{,  1 map[]}
2020/03/18 22:31:59 Segment &{- 9 map[]}
2020/03/18 22:31:59 Segment &{, or  1 map[]}
2020/03/18 22:31:59 Segment &{* 9 map[]}
2020/03/18 22:31:59 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{,  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{, or  1 map[]}
2020/03/18 22:31:59 Whaaat? code
2020/03/18 22:31:59 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:31:59 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:59 Segment &{Very easy! 1 map[]}
2020/03/18 22:31:59 Segment &{Ordered 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{Code 1 map[]}
2020/03/18 22:31:59 Segment &{Inline  1 map[]}
2020/03/18 22:31:59 Segment &{code 9 map[]}
2020/03/18 22:31:59 Segment &{Indented code 1 map[]}
2020/03/18 22:31:59 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:31:59 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:31:59 Segment &{Tables 1 map[]}
2020/03/18 22:31:59 Whaaat? table
2020/03/18 22:31:59 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:31:59 Whaaat? table
2020/03/18 22:31:59 Segment &{Links 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:31:59 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:31:59 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:31:59 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:31:59 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:31:59 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:31:59 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:31:59 Segment &{Images 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:31:59 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:31:59 Segment &{Plugins 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:31:59 Segment &{The killer feature of  1 map[]}
2020/03/18 22:31:59 Segment &{markdown-it 9 map[]}
2020/03/18 22:31:59 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:31:59 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:31:59 Segment &{. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:31:59 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:31:59 Segment &{see  1 map[]}
2020/03/18 22:31:59 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:31:59 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:31:59 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:31:59 Segment &{ /  1 map[]}
2020/03/18 22:31:59 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:31:59 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:59 Segment &{19^th^ 1 map[]}
2020/03/18 22:31:59 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:59 Segment &{H~2~O 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:31:59 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:31:59 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:31:59 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:31:59 Segment &{==Marked text== 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:31:59 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:31:59 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:31:59 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:31:59 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:31:59 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:31:59 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:31:59 Segment &{can have markup 5 map[]}
2020/03/18 22:31:59 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:31:59 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:31:59 Whaaat? dl
2020/03/18 22:31:59 Segment &{Compact style: 3 map[]}
2020/03/18 22:31:59 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:31:59 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:31:59 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:31:59 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:31:59 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:31:59 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:31:59 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:31:59 Segment &{::: warning
 1 map[]}
2020/03/18 22:31:59 Segment &{here be dragons 3 map[]}
2020/03/18 22:31:59 Segment &{
::: 1 map[]}
2020/03/18 22:31:59 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:31:59 Segment &{test 1 map[]}
2020/03/18 22:31:59 Segment &{hello there. this is  1 map[]}
2020/03/18 22:31:59 Segment &{formatted with  3 map[]}
2020/03/18 22:31:59 Segment &{bold 7 map[]}
2020/03/18 22:31:59 Segment &{ and 3 map[]}
2020/03/18 22:31:59 Segment &{ with some  1 map[]}
2020/03/18 22:31:59 Segment &{bold text 5 map[]}
2020/03/18 22:31:59 Segment &{ and some  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{. 1 map[]}
2020/03/18 22:31:59 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:31:59 Segment &{As a special treat,  1 map[]}
2020/03/18 22:31:59 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:31:59 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:31:59 Segment &{foofoo 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 3 1 map[]}
2020/03/18 22:31:59 Segment &{heading 3 content 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 4 1 map[]}
2020/03/18 22:31:59 Segment &{heading 4 content 1 map[]}
2020/03/18 22:31:59 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 5 1 map[]}
2020/03/18 22:31:59 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:31:59 Segment &{one 1 map[]}
2020/03/18 22:31:59 Segment &{one 1 map[]}
2020/03/18 22:31:59 Segment &{two 1 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{with some code
 9 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{inner list biatch 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{number 2 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{two 1 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Segment &{
 1 map[]}
2020/03/18 22:31:59 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:31:59 Segment &{inline code 9 map[]}
2020/03/18 22:31:59 Segment &{

 1 map[]}
2020/03/18 22:31:59 Whaaat? ol
2020/03/18 22:31:59 Segment &{three 1 map[]}
2020/03/18 22:31:59 Segment &{three 1 map[]}
2020/03/18 22:31:59 Segment &{Heading 6 1 map[]}
2020/03/18 22:31:59 Segment &{heading 6 content 1 map[]}
2020/03/18 22:31:59 Segment &{####### H7? 1 map[]}
2020/03/18 22:31:59 Segment &{no such thing 1 map[]}
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:32:16 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:32:16 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:32:16 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:16 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:32:16 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:32:16 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:16 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:32:16 Segment &{h2 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h3 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h4 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h5 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h6 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:32:16 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:32:16 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:32:16 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:32:16 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:32:16 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:32:16 Segment &{Emphasis 1 map[]}
2020/03/18 22:32:16 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:16 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:16 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:16 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:16 Segment &{Strikethrough 1 map[]}
2020/03/18 22:32:16 Segment &{Blockquotes 1 map[]}
2020/03/18 22:32:16 Segment &{Lists 1 map[]}
2020/03/18 22:32:16 Segment &{Unordered 1 map[]}
2020/03/18 22:32:16 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:16 Segment &{+ 9 map[]}
2020/03/18 22:32:16 Segment &{,  1 map[]}
2020/03/18 22:32:16 Segment &{- 9 map[]}
2020/03/18 22:32:16 Segment &{, or  1 map[]}
2020/03/18 22:32:16 Segment &{* 9 map[]}
2020/03/18 22:32:16 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{,  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{, or  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:16 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:16 Segment &{Ordered 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Code 1 map[]}
2020/03/18 22:32:16 Segment &{Inline  1 map[]}
2020/03/18 22:32:16 Segment &{code 9 map[]}
2020/03/18 22:32:16 Segment &{Indented code 1 map[]}
2020/03/18 22:32:16 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:32:16 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:32:16 Segment &{Tables 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Links 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:32:16 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:32:16 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:32:16 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:32:16 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:32:16 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:32:16 Segment &{Images 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:32:16 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:32:16 Segment &{Plugins 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:32:16 Segment &{The killer feature of  1 map[]}
2020/03/18 22:32:16 Segment &{markdown-it 9 map[]}
2020/03/18 22:32:16 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:32:16 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:32:16 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:32:16 Segment &{see  1 map[]}
2020/03/18 22:32:16 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:32:16 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:32:16 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:32:16 Segment &{ /  1 map[]}
2020/03/18 22:32:16 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:32:16 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:16 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:16 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:16 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:32:16 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:32:16 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:32:16 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:32:16 Segment &{==Marked text== 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:32:16 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:32:16 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:32:16 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:32:16 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:32:16 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:32:16 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:32:16 Segment &{can have markup 5 map[]}
2020/03/18 22:32:16 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:32:16 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:32:16 Whaaat? dl
2020/03/18 22:32:16 Segment &{Compact style: 3 map[]}
2020/03/18 22:32:16 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:32:16 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:32:16 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:32:16 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:32:16 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:32:16 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:32:16 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:32:16 Segment &{::: warning
 1 map[]}
2020/03/18 22:32:16 Segment &{here be dragons 3 map[]}
2020/03/18 22:32:16 Segment &{
::: 1 map[]}
2020/03/18 22:32:16 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:32:16 Segment &{test 1 map[]}
2020/03/18 22:32:16 Segment &{hello there. this is  1 map[]}
2020/03/18 22:32:16 Segment &{formatted with  3 map[]}
2020/03/18 22:32:16 Segment &{bold 7 map[]}
2020/03/18 22:32:16 Segment &{ and 3 map[]}
2020/03/18 22:32:16 Segment &{ with some  1 map[]}
2020/03/18 22:32:16 Segment &{bold text 5 map[]}
2020/03/18 22:32:16 Segment &{ and some  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:32:16 Segment &{As a special treat,  1 map[]}
2020/03/18 22:32:16 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:32:16 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:32:16 Segment &{foofoo 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 3 1 map[]}
2020/03/18 22:32:16 Segment &{heading 3 content 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 4 1 map[]}
2020/03/18 22:32:16 Segment &{heading 4 content 1 map[]}
2020/03/18 22:32:16 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 5 1 map[]}
2020/03/18 22:32:16 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:32:16 Segment &{one 1 map[]}
2020/03/18 22:32:16 Segment &{one 1 map[]}
2020/03/18 22:32:16 Segment &{two 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{with some code
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{inner list biatch 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{number 2 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{two 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{three 1 map[]}
2020/03/18 22:32:16 Segment &{three 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 6 1 map[]}
2020/03/18 22:32:16 Segment &{heading 6 content 1 map[]}
2020/03/18 22:32:16 Segment &{####### H7? 1 map[]}
2020/03/18 22:32:16 Segment &{no such thing 1 map[]}
2020/03/18 22:32:16 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:32:16 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:16 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:32:16 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:32:16 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:16 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:32:16 Segment &{h2 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h3 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h4 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h5 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{h6 Heading 1 map[]}
2020/03/18 22:32:16 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Whaaat? hr
2020/03/18 22:32:16 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:32:16 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:32:16 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:32:16 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:32:16 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:32:16 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:32:16 Segment &{Emphasis 1 map[]}
2020/03/18 22:32:16 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:16 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:16 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:16 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:16 Segment &{Strikethrough 1 map[]}
2020/03/18 22:32:16 Segment &{Blockquotes 1 map[]}
2020/03/18 22:32:16 Segment &{Lists 1 map[]}
2020/03/18 22:32:16 Segment &{Unordered 1 map[]}
2020/03/18 22:32:16 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:16 Segment &{+ 9 map[]}
2020/03/18 22:32:16 Segment &{,  1 map[]}
2020/03/18 22:32:16 Segment &{- 9 map[]}
2020/03/18 22:32:16 Segment &{, or  1 map[]}
2020/03/18 22:32:16 Segment &{* 9 map[]}
2020/03/18 22:32:16 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{,  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{, or  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:16 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:16 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:16 Segment &{Ordered 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Code 1 map[]}
2020/03/18 22:32:16 Segment &{Inline  1 map[]}
2020/03/18 22:32:16 Segment &{code 9 map[]}
2020/03/18 22:32:16 Segment &{Indented code 1 map[]}
2020/03/18 22:32:16 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:32:16 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:32:16 Segment &{Tables 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Links 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:32:16 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:32:16 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:32:16 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:32:16 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:32:16 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:32:16 Segment &{Images 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:32:16 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:32:16 Segment &{Plugins 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:32:16 Segment &{The killer feature of  1 map[]}
2020/03/18 22:32:16 Segment &{markdown-it 9 map[]}
2020/03/18 22:32:16 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:32:16 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:32:16 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:32:16 Segment &{see  1 map[]}
2020/03/18 22:32:16 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:32:16 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:32:16 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:32:16 Segment &{ /  1 map[]}
2020/03/18 22:32:16 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:32:16 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:16 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:16 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:16 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:32:16 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:32:16 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:32:16 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:32:16 Segment &{==Marked text== 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:32:16 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:32:16 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:32:16 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:32:16 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:32:16 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:32:16 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:32:16 Segment &{can have markup 5 map[]}
2020/03/18 22:32:16 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:32:16 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:32:16 Whaaat? dl
2020/03/18 22:32:16 Segment &{Compact style: 3 map[]}
2020/03/18 22:32:16 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:32:16 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:32:16 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:32:16 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:32:16 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:32:16 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:32:16 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:32:16 Segment &{::: warning
 1 map[]}
2020/03/18 22:32:16 Segment &{here be dragons 3 map[]}
2020/03/18 22:32:16 Segment &{
::: 1 map[]}
2020/03/18 22:32:16 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:32:16 Segment &{test 1 map[]}
2020/03/18 22:32:16 Segment &{hello there. this is  1 map[]}
2020/03/18 22:32:16 Segment &{formatted with  3 map[]}
2020/03/18 22:32:16 Segment &{bold 7 map[]}
2020/03/18 22:32:16 Segment &{ and 3 map[]}
2020/03/18 22:32:16 Segment &{ with some  1 map[]}
2020/03/18 22:32:16 Segment &{bold text 5 map[]}
2020/03/18 22:32:16 Segment &{ and some  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:32:16 Segment &{As a special treat,  1 map[]}
2020/03/18 22:32:16 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:32:16 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:32:16 Segment &{foofoo 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 3 1 map[]}
2020/03/18 22:32:16 Segment &{heading 3 content 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 4 1 map[]}
2020/03/18 22:32:16 Segment &{heading 4 content 1 map[]}
2020/03/18 22:32:16 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 5 1 map[]}
2020/03/18 22:32:16 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:32:16 Segment &{one 1 map[]}
2020/03/18 22:32:16 Segment &{one 1 map[]}
2020/03/18 22:32:16 Segment &{two 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{with some code
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{inner list biatch 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{number 2 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{two 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:16 Segment &{inline code 9 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{three 1 map[]}
2020/03/18 22:32:16 Segment &{three 1 map[]}
2020/03/18 22:32:16 Segment &{Heading 6 1 map[]}
2020/03/18 22:32:16 Segment &{heading 6 content 1 map[]}
2020/03/18 22:32:16 Segment &{####### H7? 1 map[]}
2020/03/18 22:32:16 Segment &{no such thing 1 map[]}
2020/03/18 22:32:16 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:32:16 Segment &{DUMP 1 map[]}
2020/03/18 22:32:16 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:32:16 Segment &{netstat 1 map[]}
2020/03/18 22:32:16 Segment &{(or  1 map[]}
2020/03/18 22:32:16 Segment &{ss 9 map[]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:32:16 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:32:16 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:32:16 Segment &{libexec 1 map[]}
2020/03/18 22:32:16 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:32:16 Segment &{ack 1 map[]}
2020/03/18 22:32:16 Segment &{speedtest 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:32:16 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:32:16 Segment &{rsync 1 map[]}
2020/03/18 22:32:16 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:32:16 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:32:16 Segment &{kubernetes 1 map[]}
2020/03/18 22:32:16 Segment &{hls 1 map[]}
2020/03/18 22:32:16 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:32:16 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:32:16 Segment &{akka 1 map[]}
2020/03/18 22:32:16 Segment &{overview 1 map[]}
2020/03/18 22:32:16 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:32:16 Segment &{domain approach: 5 map[]}
2020/03/18 22:32:16 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:32:16 Segment &{worker systems: 5 map[]}
2020/03/18 22:32:16 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:32:16 Segment &{messaging styles: 5 map[]}
2020/03/18 22:32:16 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:32:16 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:32:16 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:32:16 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:32:16 Segment &{creating actors 1 map[]}
2020/03/18 22:32:16 Segment &{messages 1 map[]}
2020/03/18 22:32:16 Segment &{actors 1 map[]}
2020/03/18 22:32:16 Segment &{actor system 1 map[]}
2020/03/18 22:32:16 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:32:16 Segment &{ActorRef 9 map[]}
2020/03/18 22:32:16 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:32:16 Segment &{Remember to use  1 map[]}
2020/03/18 22:32:16 Segment &{self 9 map[]}
2020/03/18 22:32:16 Segment &{ rather than  1 map[]}
2020/03/18 22:32:16 Segment &{this 9 map[]}
2020/03/18 22:32:16 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:32:16 Segment &{self 9 map[]}
2020/03/18 22:32:16 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:32:16 Segment &{this 9 map[]}
2020/03/18 22:32:16 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:32:16 Segment &{actor system 1 map[]}
2020/03/18 22:32:16 Segment &{actorOf 9 map[]}
2020/03/18 22:32:16 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:32:16 Segment &{message 1 map[]}
2020/03/18 22:32:16 Segment &{error handling 1 map[]}
2020/03/18 22:32:16 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:32:16 Segment &{supervisor 5 map[]}
2020/03/18 22:32:16 Segment &{ of the child 1 map[]}
2020/03/18 22:32:16 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:32:16 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:32:16 Segment &{strategies 5 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{supervision 1 map[]}
2020/03/18 22:32:16 Segment &{strategies 1 map[]}
2020/03/18 22:32:16 Segment &{actor paths 1 map[]}
2020/03/18 22:32:16 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:32:16 Segment &{monitoring 1 map[]}
2020/03/18 22:32:16 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:32:16 Segment &{lifecycle 1 map[]}
2020/03/18 22:32:16 Segment &{dispatching 1 map[]}
2020/03/18 22:32:16 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:16 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:16 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:16 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:16 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:32:16 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:32:16 Segment &{scheduling 1 map[]}
2020/03/18 22:32:16 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:32:16 Segment &{dead letter 1 map[]}
2020/03/18 22:32:16 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:32:16 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:32:16 Segment &{routing 1 map[]}
2020/03/18 22:32:16 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:32:16 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:32:16 Segment &{akka.routing 9 map[]}
2020/03/18 22:32:16 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:32:16 Segment &{example 1 map[]}
2020/03/18 22:32:16 Segment &{strategies 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{creating routers 1 map[]}
2020/03/18 22:32:16 Segment &{akka streams 1 map[]}
2020/03/18 22:32:16 Segment &{split and aggregate 1 map[]}
2020/03/18 22:32:16 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:32:16 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:32:16 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:32:16 Segment &{links [links] 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:32:16 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:32:16 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:32:16 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:32:16 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:16 Segment &{
   1 map[]}
2020/03/18 22:32:16 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{
   1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:32:16 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:32:16 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:16 Segment &{
   1 map[]}
2020/03/18 22:32:16 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{
   1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:32:16 Segment &{apache 1 map[]}
2020/03/18 22:32:16 Segment &{local server 1 map[]}
2020/03/18 22:32:16 Segment &{apache config 5 map[]}
2020/03/18 22:32:16 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:32:16 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:32:16 Segment &{config changes 1 map[]}
2020/03/18 22:32:16 Segment &{in  1 map[]}
2020/03/18 22:32:16 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:32:16 Segment &{: uncommented 1 map[]}
2020/03/18 22:32:16 Segment &{In  1 map[]}
2020/03/18 22:32:16 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:32:16 Segment &{, uncommented: 1 map[]}
2020/03/18 22:32:16 Segment &{commands 1 map[]}
2020/03/18 22:32:16 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:32:16 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:32:16 Segment &{usage 1 map[]}
2020/03/18 22:32:16 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:32:16 Segment &{AWS CLI 1 map[]}
2020/03/18 22:32:16 Segment &{Install 1 map[]}
2020/03/18 22:32:16 Segment &{Configure 1 map[]}
2020/03/18 22:32:16 Segment &{Profiles 1 map[]}
2020/03/18 22:32:16 Segment &{To use a Profile  1 map[]}
2020/03/18 22:32:16 Segment &{--profile <name> 9 map[]}
2020/03/18 22:32:16 Segment &{ in the command 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:32:16 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:32:16 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:32:16 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:32:16 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:32:16 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:32:16 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:32:16 Segment &{labs:  1 map[]}
2020/03/18 22:32:16 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:32:16 Segment &{labs:  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{Acronyms 1 map[]}
2020/03/18 22:32:16 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:16 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:16 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:16 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:16 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:16 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:16 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:16 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:16 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:16 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:16 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:16 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:16 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:16 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:16 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:16 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:16 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:16 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:16 Segment &{Protocols 1 map[]}
2020/03/18 22:32:16 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:16 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:16 Segment &{Services 1 map[]}
2020/03/18 22:32:16 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:32:16 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:32:16 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:32:16 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:32:16 Segment &{CloudTrail 1 map[]}
2020/03/18 22:32:16 Segment &{reveals account activity 1 map[]}
2020/03/18 22:32:16 Segment &{AWS Config 1 map[]}
2020/03/18 22:32:16 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:32:16 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:32:16 Segment &{Private Link 1 map[]}
2020/03/18 22:32:16 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:32:16 Segment &{AWS Shield 1 map[]}
2020/03/18 22:32:16 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:32:16 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:32:16 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:32:16 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:32:16 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:32:16 Segment &{Module 0 1 map[]}
2020/03/18 22:32:16 Segment &{Best Practicies 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:32:16 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:16 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:16 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:16 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:16 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:16 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:16 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:16 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:16 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:16 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:16 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:32:16 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:32:16 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:32:16 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:32:16 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:32:16 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:32:16 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:32:16 Segment &{no integration 1 map[]}
2020/03/18 22:32:16 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:32:16 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:32:16 Segment &{centralised control 1 map[]}
2020/03/18 22:32:16 Segment &{centralised control 1 map[]}
2020/03/18 22:32:16 Segment &{single bill 1 map[]}
2020/03/18 22:32:16 Segment &{single bill 1 map[]}
2020/03/18 22:32:16 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:16 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:16 Segment &{complex admin 1 map[]}
2020/03/18 22:32:16 Segment &{complex admin 1 map[]}
2020/03/18 22:32:16 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:32:16 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:32:16 Segment &{security 1 map[]}
2020/03/18 22:32:16 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:32:16 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:32:16 Segment &{ can be made. 1 map[]}
2020/03/18 22:32:16 Segment &{Policy based management 1 map[]}
2020/03/18 22:32:16 Segment &{Service control policy 5 map[]}
2020/03/18 22:32:16 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:32:16 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:32:16 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:32:16 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:32:16 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:32:16 Segment &{Resource groups 1 map[]}
2020/03/18 22:32:16 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:32:16 Segment &{Module 2 1 map[]}
2020/03/18 22:32:16 Segment &{VPC Peering 1 map[]}
2020/03/18 22:32:16 Segment &{EC2 1 map[]}
2020/03/18 22:32:16 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:32:16 Segment &{Create an  1 map[]}
2020/03/18 22:32:16 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:32:16 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:32:16 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:32:16 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:32:16 Segment &{VPN Connections 1 map[]}
2020/03/18 22:32:16 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:32:16 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:32:16 Segment &{BGP 1 map[]}
2020/03/18 22:32:16 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:32:16 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:32:16 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:32:16 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:32:16 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:32:16 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:32:16 Segment &{Scaling 1 map[]}
2020/03/18 22:32:16 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:32:16 Segment &{Lookup 1 map[]}
2020/03/18 22:32:16 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:16 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:16 Segment &{Base64 1 map[]}
2020/03/18 22:32:16 Segment &{to binary 1 map[]}
2020/03/18 22:32:16 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:32:16 Segment &{bash 1 map[]}
2020/03/18 22:32:16 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:32:16 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{networksetup 1 map[]}
2020/03/18 22:32:16 Segment &{configuring network settings 1 map[]}
2020/03/18 22:32:16 Segment &{logging 1 map[]}
2020/03/18 22:32:16 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:16 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:16 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:16 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:16 Segment &{shebang 1 map[]}
2020/03/18 22:32:16 Segment &{variable 1 map[]}
2020/03/18 22:32:16 Segment &{special variables 5 map[]}
2020/03/18 22:32:16 Segment &{chmod 1 map[]}
2020/03/18 22:32:16 Segment &{numerical 5 map[]}
2020/03/18 22:32:16 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:32:16 Segment &{homebrew 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:32:16 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{list packages: 1 map[]}
2020/03/18 22:32:16 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:32:16 Segment &{Browserstack 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:32:16 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:16 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:32:16 Segment &{This requires you have the  1 map[]}
2020/03/18 22:32:16 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:32:16 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:32:16 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:32:16 Segment &{c 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:32:16 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:32:16 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:32:16 Segment &{; 1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{; 1 map[]}
2020/03/18 22:32:16 Segment &{basics 1 map[]}
2020/03/18 22:32:16 Segment &{native methods 1 map[]}
2020/03/18 22:32:16 Segment &{stdio 1 map[]}
2020/03/18 22:32:16 Segment &{import 5 map[]}
2020/03/18 22:32:16 Segment &{printf 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{scanf 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{fgets 5 map[]}
2020/03/18 22:32:16 Segment &{fputs 5 map[]}
2020/03/18 22:32:16 Segment &{puts 5 map[]}
2020/03/18 22:32:16 Segment &{dynamic memory 1 map[]}
2020/03/18 22:32:16 Segment &{malloc 5 map[]}
2020/03/18 22:32:16 Segment &{memcpy 5 map[]}
2020/03/18 22:32:16 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:32:16 Segment &{building 1 map[]}
2020/03/18 22:32:16 Segment &{compile and link 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{compile 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{linking 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:32:16 Segment &{libraries 1 map[]}
2020/03/18 22:32:16 Segment &{static 5 map[]}
2020/03/18 22:32:16 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:32:16 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:32:16 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:32:16 Segment &{gives you the file  1 map[]}
2020/03/18 22:32:16 Segment &{libname.a 9 map[]}
2020/03/18 22:32:16 Segment &{list files in lib 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:32:16 Segment &{camel 1 map[]}
2020/03/18 22:32:16 Segment &{testing 1 map[]}
2020/03/18 22:32:16 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:32:16 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:32:16 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:32:16 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:32:16 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:32:16 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:32:16 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:32:16 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:32:16 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:32:16 Segment &{systemctl 9 map[]}
2020/03/18 22:32:16 Segment &{ rather than  1 map[]}
2020/03/18 22:32:16 Segment &{service 9 map[]}
2020/03/18 22:32:16 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:32:16 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:32:16 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:32:16 Segment &{): 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:32:16 Segment &{More info here:  1 map[]}
2020/03/18 22:32:16 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:32:16 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:32:16 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:32:16 Segment &{certs 1 map[]}
2020/03/18 22:32:16 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:16 Segment &{cert.p12 5 map[]}
2020/03/18 22:32:16 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:16 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:16 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:16 Segment &{certificate.pem 5 map[]}
2020/03/18 22:32:16 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:16 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:32:16 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:16 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:32:16 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{create PEM 1 map[]}
2020/03/18 22:32:16 Segment &{Or with no target password 1 map[]}
2020/03/18 22:32:16 Segment &{Chrome issue 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{svn issue 1 map[]}
2020/03/18 22:32:16 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:32:16 Segment &{Hi all, 1 map[]}
2020/03/18 22:32:16 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:32:16 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:32:16 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:32:16 Segment &{google structured data 1 map[]}
2020/03/18 22:32:16 Segment &{claim review 1 map[]}
2020/03/18 22:32:16 Segment &{required fields 5 map[]}
2020/03/18 22:32:16 Segment &{reviewRating 1 map[]}
2020/03/18 22:32:16 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:32:16 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:32:16 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:32:16 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:32:16 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:32:16 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:32:16 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:32:16 Segment &{what we’re missing 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:16 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:16 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:16 Segment &{[x] url 1 map[]}
2020/03/18 22:32:16 Segment &{[x] url 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:16 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] type 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] name 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:16 Segment &{[x] type 1 map[]}
2020/03/18 22:32:16 Segment &{[x] type 1 map[]}
2020/03/18 22:32:16 Segment &{[x] name 1 map[]}
2020/03/18 22:32:16 Segment &{[x] name 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:16 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:16 Segment &{case examples 1 map[]}
2020/03/18 22:32:16 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:32:16 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:32:16 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:32:16 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:32:16 Segment &{coffee script 1 map[]}
2020/03/18 22:32:16 Segment &{functions 1 map[]}
2020/03/18 22:32:16 Segment &{With default values: 1 map[]}
2020/03/18 22:32:16 Segment &{objects 1 map[]}
2020/03/18 22:32:16 Segment &{classes 1 map[]}
2020/03/18 22:32:16 Segment &{splats 1 map[]}
2020/03/18 22:32:16 Segment &{comprehensions 1 map[]}
2020/03/18 22:32:16 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:32:16 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:32:16 Segment &{create stack 1 map[]}
2020/03/18 22:32:16 Segment &{deploy 1 map[]}
2020/03/18 22:32:16 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:32:16 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:32:16 Segment &{curl 1 map[]}
2020/03/18 22:32:16 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:32:16 Segment &{cert 1 map[]}
2020/03/18 22:32:16 Segment &{curl with cert 1 map[]}
2020/03/18 22:32:16 Segment &{with response headers: 1 map[]}
2020/03/18 22:32:16 Segment &{output 1 map[]}
2020/03/18 22:32:16 Segment &{Write output to file 1 map[]}
2020/03/18 22:32:16 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:32:16 Segment &{curses 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:32:16 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:32:16 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{compile 5 map[]}
2020/03/18 22:32:16 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:32:16 Segment &{setup 1 map[]}
2020/03/18 22:32:16 Segment &{screen 1 map[]}
2020/03/18 22:32:16 Segment &{screen dump 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{printing 1 map[]}
2020/03/18 22:32:16 Segment &{output 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{attributes 1 map[]}
2020/03/18 22:32:16 Segment &{attribute options 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{colours 1 map[]}
2020/03/18 22:32:16 Segment &{colours 5 map[]}
2020/03/18 22:32:16 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:32:16 Segment &{reading 1 map[]}
2020/03/18 22:32:16 Segment &{keys constants 5 map[]}
2020/03/18 22:32:16 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:32:16 Segment &{mouse 1 map[]}
2020/03/18 22:32:16 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:32:16 Segment &{MEVENT 5 map[]}
2020/03/18 22:32:16 Segment &{ looks like this: 1 map[]}
2020/03/18 22:32:16 Segment &{key masks 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:32:16 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:32:16 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:32:16 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:32:16 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:16 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:32:16 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:32:16 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:16 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:32:16 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:16 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:32:16 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:16 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:32:16 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:16 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:32:16 Segment &{D 1 map[]}
2020/03/18 22:32:16 Segment &{## dmd 1 map[]}
2020/03/18 22:32:16 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:32:16 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:32:16 Segment &{Paradigms 1 map[]}
2020/03/18 22:32:16 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:16 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:16 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:16 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:16 Segment &{concurrency 1 map[]}
2020/03/18 22:32:16 Segment &{concurrency 1 map[]}
2020/03/18 22:32:16 Segment &{meta programming 1 map[]}
2020/03/18 22:32:16 Segment &{meta programming 1 map[]}
2020/03/18 22:32:16 Segment &{Tools 1 map[]}
2020/03/18 22:32:16 Segment &{dmd 1 map[]}
2020/03/18 22:32:16 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:32:16 Segment &{Libraries 1 map[]}
2020/03/18 22:32:16 Segment &{Phobos 1 map[]}
2020/03/18 22:32:16 Segment &{Offical D library 1 map[]}
2020/03/18 22:32:16 Segment &{stl 1 map[]}
2020/03/18 22:32:16 Segment &{Resources 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:32:16 Segment &{conf:  1 map[]}
2020/03/18 22:32:16 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:32:16 Segment &{conf:  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:32:16 Segment &{lang:  1 map[]}
2020/03/18 22:32:16 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:32:16 Segment &{lang:  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:16 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:16 Segment &{Types and Operators 1 map[]}
2020/03/18 22:32:16 Segment &{Integral Types 1 map[]}
2020/03/18 22:32:16 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{16 bit 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{8 bit types 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{conversions 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{non decimal 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{floating points 1 map[]}
2020/03/18 22:32:16 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:32:16 Segment &{dagger 1 map[]}
2020/03/18 22:32:16 Segment &{annotations 1 map[]}
2020/03/18 22:32:16 Segment &{provider annotation 1 map[]}
2020/03/18 22:32:16 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:32:16 Segment &{docker 1 map[]}
2020/03/18 22:32:16 Segment &{introduction 1 map[]}
2020/03/18 22:32:16 Segment &{5 core products: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{supporting products: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{hypervisors 1 map[]}
2020/03/18 22:32:16 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{namespaces 5 map[]}
2020/03/18 22:32:16 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:32:16 Segment &{installation 1 map[]}
2020/03/18 22:32:16 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:32:16 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:32:16 Segment &{setup 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:32:16 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:32:16 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:32:16 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{$ docker version 1 map[]}
2020/03/18 22:32:16 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:32:16 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:32:16 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:32:16 Segment &{// this is the vm 1 map[]}
2020/03/18 22:32:16 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:32:16 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine start  1 map[]}
2020/03/18 22:32:16 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:32:16 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:32:16 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:32:16 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:32:16 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:32:16 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:32:16 Segment &{tagging 1 map[]}
2020/03/18 22:32:16 Segment &{images 5 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{containers 5 map[]}
2020/03/18 22:32:16 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:16 Segment &{building 1 map[]}
2020/03/18 22:32:16 Segment &{Each  1 map[]}
2020/03/18 22:32:16 Segment &{layer 5 map[]}
2020/03/18 22:32:16 Segment &{ in an image is  1 map[]}
2020/03/18 22:32:16 Segment &{read only 5 map[]}
2020/03/18 22:32:16 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:32:16 Segment &{writeable layer 5 map[]}
2020/03/18 22:32:16 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:32:16 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:32:16 Segment &{build a new image from a  1 map[]}
2020/03/18 22:32:16 Segment &{build context 5 map[]}
2020/03/18 22:32:16 Segment &{running [run] 1 map[]}
2020/03/18 22:32:16 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:32:16 Segment &{default command 5 map[]}
2020/03/18 22:32:16 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:32:16 Segment &{stop a container 1 map[]}
2020/03/18 22:32:16 Segment &{tagging 1 map[]}
2020/03/18 22:32:16 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:32:16 Segment &{containers 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{container 5 map[]}
2020/03/18 22:32:16 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:32:16 Segment &{view containers 1 map[]}
2020/03/18 22:32:16 Segment &{run a container 1 map[]}
2020/03/18 22:32:16 Segment &{save a change: 1 map[]}
2020/03/18 22:32:16 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:32:16 Segment &{inspect 1 map[]}
2020/03/18 22:32:16 Segment &{management 1 map[]}
2020/03/18 22:32:16 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:32:16 Segment &{docker create 5 map[]}
2020/03/18 22:32:16 Segment &{ command 1 map[]}
2020/03/18 22:32:16 Segment &{To stop a container 1 map[]}
2020/03/18 22:32:16 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:32:16 Segment &{terminal access 1 map[]}
2020/03/18 22:32:16 Segment &{Use  1 map[]}
2020/03/18 22:32:16 Segment &{docker exec 5 map[]}
2020/03/18 22:32:16 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:32:16 Segment &{remove 1 map[]}
2020/03/18 22:32:16 Segment &{images 5 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{containers 5 map[]}
2020/03/18 22:32:16 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:16 Segment &{remove containers 1 map[]}
2020/03/18 22:32:16 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:32:16 Segment &{port mapping 1 map[]}
2020/03/18 22:32:16 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:32:16 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:32:16 Segment &{use  1 map[]}
2020/03/18 22:32:16 Segment &{EXPOSE 5 map[]}
2020/03/18 22:32:16 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:32:16 Segment &{hub 1 map[]}
2020/03/18 22:32:16 Segment &{login 1 map[]}
2020/03/18 22:32:16 Segment &{PUSH 5 map[]}
2020/03/18 22:32:16 Segment &{
push the new version 1 map[]}
2020/03/18 22:32:16 Segment &{PULL 5 map[]}
2020/03/18 22:32:16 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:32:16 Segment &{configuration 1 map[]}
2020/03/18 22:32:16 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:32:16 Segment &{to set this up: 1 map[]}
2020/03/18 22:32:16 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:32:16 Segment &{remote daemon 1 map[]}
2020/03/18 22:32:16 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:32:16 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:32:16 Segment &{-H 9 map[]}
2020/03/18 22:32:16 Segment &{ flag 1 map[]}
2020/03/18 22:32:16 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:32:16 Segment &{logging 1 map[]}
2020/03/18 22:32:16 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:32:16 Segment &{print all log for a container 1 map[]}
2020/03/18 22:32:16 Segment &{dockerfile 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{docker file 5 map[]}
2020/03/18 22:32:16 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:32:16 Segment &{Save it as  1 map[]}
2020/03/18 22:32:16 Segment &{Dockerfile 9 map[]}
2020/03/18 22:32:16 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:32:16 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:32:16 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:32:16 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:32:16 Segment &{instructions 1 map[]}
2020/03/18 22:32:16 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:32:16 Segment &{FROM 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:32:16 Segment &{RUN 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:32:16 Segment &{ADD 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:32:16 Segment &{CMD 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{override the default command 1 map[]}
2020/03/18 22:32:16 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:32:16 Segment &{running this: 1 map[]}
2020/03/18 22:32:16 Segment &{ENV 5 map[]}
2020/03/18 22:32:16 Segment &{set environment variables 1 map[]}
2020/03/18 22:32:16 Segment &{VOLUME 5 map[]}
2020/03/18 22:32:16 Segment &{specific a volume 1 map[]}
2020/03/18 22:32:16 Segment &{build context 1 map[]}
2020/03/18 22:32:16 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:32:16 Segment &{volumes 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{volume 5 map[]}
2020/03/18 22:32:16 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{simple volume 5 map[]}
2020/03/18 22:32:16 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:32:16 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:32:16 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:32:16 Segment &{host volumes 5 map[]}
2020/03/18 22:32:16 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:32:16 Segment &{overwritten 3 map[]}
2020/03/18 22:32:16 Segment &{named volumes 5 map[]}
2020/03/18 22:32:16 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:32:16 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:32:16 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:32:16 Segment &{dangling volumes 1 map[]}
2020/03/18 22:32:16 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:32:16 Segment &{networking 1 map[]}
2020/03/18 22:32:16 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:32:16 Segment &{list networks: 1 map[]}
2020/03/18 22:32:16 Segment &{create a network 1 map[]}
2020/03/18 22:32:16 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:32:16 Segment &{use a network: 1 map[]}
2020/03/18 22:32:16 Segment &{inspect network: 1 map[]}
2020/03/18 22:32:16 Segment &{remove a network 1 map[]}
2020/03/18 22:32:16 Segment &{network types 1 map[]}
2020/03/18 22:32:16 Segment &{NONE 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{no network 1 map[]}
2020/03/18 22:32:16 Segment &{HOST 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{shares the host network 1 map[]}
2020/03/18 22:32:16 Segment &{BRIDGE 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:32:16 Segment &{requires  linking: 1 map[]}
2020/03/18 22:32:16 Segment &{a  1 map[]}
2020/03/18 22:32:16 Segment &{container link 5 map[]}
2020/03/18 22:32:16 Segment &{continuous integration 1 map[]}
2020/03/18 22:32:16 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:32:16 Segment &{dockerhub 5 map[]}
2020/03/18 22:32:16 Segment &{ has an  1 map[]}
2020/03/18 22:32:16 Segment &{autobuild 5 map[]}
2020/03/18 22:32:16 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:32:16 Segment &{docker compose 1 map[]}
2020/03/18 22:32:16 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:32:16 Segment &{yaml 5 map[]}
2020/03/18 22:32:16 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:32:16 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:32:16 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:32:16 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:32:16 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:32:16 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:32:16 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:32:16 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:32:16 Segment &{eslint 1 map[]}
2020/03/18 22:32:16 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:32:16 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:32:16 Segment &{configuring 1 map[]}
2020/03/18 22:32:16 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:32:16 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:32:16 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:32:16 Segment &{config file 1 map[]}
2020/03/18 22:32:16 Segment &{.eslintrc 9 map[]}
2020/03/18 22:32:16 Segment &{rules 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:32:16 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:32:16 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:32:16 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:32:16 Segment &{gcc 1 map[]}
2020/03/18 22:32:16 Segment &{show include paths: 1 map[]}
2020/03/18 22:32:16 Segment &{show linker paths: 1 map[]}
2020/03/18 22:32:16 Segment &{options 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:32:16 Segment &{see  1 map[]}
2020/03/18 22:32:16 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:32:16 Segment &{compile 1 map[]}
2020/03/18 22:32:16 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:32:16 Segment &{-I 9 map[]}
2020/03/18 22:32:16 Segment &{ option. 1 map[]}
2020/03/18 22:32:16 Segment &{link 1 map[]}
2020/03/18 22:32:16 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:32:16 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:32:16 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:32:16 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:32:16 Segment &{-L 9 map[]}
2020/03/18 22:32:16 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:32:16 Segment &{-l 9 map[]}
2020/03/18 22:32:16 Segment &{ options 1 map[]}
2020/03/18 22:32:16 Segment &{e.g 1 map[]}
2020/03/18 22:32:16 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:32:16 Segment &{lib 9 map[]}
2020/03/18 22:32:16 Segment &{ prefix 1 map[]}
2020/03/18 22:32:16 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:32:16 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:32:16 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:32:16 Segment &{Security 1 map[]}
2020/03/18 22:32:16 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:32:16 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:32:16 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:32:16 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:32:16 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:32:16 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:32:16 Segment &{Handling personal data 1 map[]}
2020/03/18 22:32:16 Segment &{4 principles: 1 map[]}
2020/03/18 22:32:16 Segment &{1 Accountability 1 map[]}
2020/03/18 22:32:16 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:32:16 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:32:16 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:16 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:16 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:16 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:16 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:32:16 Segment &{2 Transparency 1 map[]}
2020/03/18 22:32:16 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:32:16 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:32:16 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:32:16 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:32:16 Segment &{4 Data portability 1 map[]}
2020/03/18 22:32:16 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:32:16 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:32:16 Segment &{Breach 1 map[]}
2020/03/18 22:32:16 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:32:16 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:32:16 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:32:16 Segment &{Summary 1 map[]}
2020/03/18 22:32:16 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:32:16 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:32:16 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:32:16 Segment &{Scams 1 map[]}
2020/03/18 22:32:16 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:32:16 Segment &{Phishing 1 map[]}
2020/03/18 22:32:16 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:32:16 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:32:16 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:16 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:16 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:16 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:16 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:16 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:16 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:16 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:16 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:16 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:16 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:16 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:16 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:32:16 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:32:16 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:32:16 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:32:16 Segment &{Passwords 1 map[]}
2020/03/18 22:32:16 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:32:16 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:32:16 Segment &{Do’s 1 map[]}
2020/03/18 22:32:16 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:16 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:16 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:16 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:16 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:16 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:16 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:16 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:16 Segment &{Dont’s 1 map[]}
2020/03/18 22:32:16 Segment &{write them down 1 map[]}
2020/03/18 22:32:16 Segment &{write them down 1 map[]}
2020/03/18 22:32:16 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:16 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:16 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:16 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:16 Segment &{share the network password 1 map[]}
2020/03/18 22:32:16 Segment &{share the network password 1 map[]}
2020/03/18 22:32:16 Segment &{Email 1 map[]}
2020/03/18 22:32:16 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Handling Data 1 map[]}
2020/03/18 22:32:16 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:32:16 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:32:16 Segment &{This is known as  1 map[]}
2020/03/18 22:32:16 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:32:16 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:32:16 Segment &{PUBLIC 5 map[]}
2020/03/18 22:32:16 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:32:16 Segment &{PROTECTED 5 map[]}
2020/03/18 22:32:16 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:32:16 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:32:16 Segment &{Offline Security 1 map[]}
2020/03/18 22:32:16 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:32:16 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:32:16 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:32:16 Segment &{Help 1 map[]}
2020/03/18 22:32:16 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:32:16 Segment &{24 1 map[]}
2020/03/18 22:32:16 Segment &{⁄ 1 map[]}
2020/03/18 22:32:16 Segment &{7 1 map[]}
2020/03/18 22:32:16 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:32:16 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:32:16 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:32:16 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:32:16 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:32:16 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:32:16 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:32:16 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:32:16 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{fixing  1 map[]}
2020/03/18 22:32:16 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:16 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:32:16 Segment &{fixing  1 map[]}
2020/03/18 22:32:16 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:16 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:32:16 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:32:16 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:32:16 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:32:16 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:32:16 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:32:16 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:32:16 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:16 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:16 Segment &{specific folder 5 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:32:16 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:16 Segment &{specific folder 5 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{run:
 1 map[]}
2020/03/18 22:32:16 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:16 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:16 Segment &{run:
 1 map[]}
2020/03/18 22:32:16 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:16 Segment &{run:
 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:32:16 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{referring to: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{last commits  1 map[]}
2020/03/18 22:32:16 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:16 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{referring to: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{last commits  1 map[]}
2020/03/18 22:32:16 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:16 Segment &{last commits  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:16 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:16 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:32:16 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:32:16 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:32:16 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:16 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:16 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:32:16 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:32:16 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:32:16 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{or 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:32:16 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{or 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:16 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:16 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:16 Segment &{
”` 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:16 Segment &{
”` 1 map[]}
2020/03/18 22:32:16 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:16 Whaaat? br
2020/03/18 22:32:16 Segment &{
”` 1 map[]}
2020/03/18 22:32:16 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:32:16 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:32:16 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:32:16 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:32:16 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{delete tag 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:32:16 Segment &{delete tag 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git push --tags
 9 map[]}
2020/03/18 22:32:16 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:32:16 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:32:16 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:32:16 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:32:16 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:16 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list  1 map[]}
2020/03/18 22:32:16 Segment &{actual 5 map[]}
2020/03/18 22:32:16 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:32:16 Segment &{list  1 map[]}
2020/03/18 22:32:16 Segment &{actual 5 map[]}
2020/03/18 22:32:16 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch -r
 9 map[]}
2020/03/18 22:32:16 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch -l
 9 map[]}
2020/03/18 22:32:16 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:32:16 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:32:16 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:32:16 Segment &{git 1 map[]}
2020/03/18 22:32:16 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:32:16 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:32:16 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:32:16 Segment &{diff 1 map[]}
2020/03/18 22:32:16 Segment &{options 1 map[]}
2020/03/18 22:32:16 Segment &{stat (  1 map[]}
2020/03/18 22:32:16 Segment &{--stat 9 map[]}
2020/03/18 22:32:16 Segment &{ ) 1 map[]}
2020/03/18 22:32:16 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:32:16 Segment &{clone 1 map[]}
2020/03/18 22:32:16 Segment &{push 1 map[]}
2020/03/18 22:32:16 Segment &{branch 1 map[]}
2020/03/18 22:32:16 Segment &{list §branches: 1 map[]}
2020/03/18 22:32:16 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:32:16 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:32:16 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:32:16 Segment &{remote 1 map[]}
2020/03/18 22:32:16 Segment &{config 1 map[]}
2020/03/18 22:32:16 Segment &{file located at  1 map[]}
2020/03/18 22:32:16 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{link 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:32:16 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:32:16 Segment &{reith 1 map[]}
2020/03/18 22:32:16 Segment &{setup 1 map[]}
2020/03/18 22:32:16 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:16 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:32:16 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:16 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:32:16 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:16 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:32:16 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{and some more
 1 map[]}
2020/03/18 22:32:16 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:32:16 Segment &{and some more
 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:32:16 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:32:16 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:32:16 Segment &{view it: 1 map[]}
2020/03/18 22:32:16 Segment &{set it: 1 map[]}
2020/03/18 22:32:16 Segment &{unset it: 1 map[]}
2020/03/18 22:32:16 Segment &{add it: 1 map[]}
2020/03/18 22:32:16 Segment &{alias 1 map[]}
2020/03/18 22:32:16 Segment &{make an alias: 1 map[]}
2020/03/18 22:32:16 Segment &{grep 1 map[]}
2020/03/18 22:32:16 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:32:16 Segment &{stash 1 map[]}
2020/03/18 22:32:16 Segment &{add and pop 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{list 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{delete 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{view 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{github 1 map[]}
2020/03/18 22:32:16 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:32:16 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:32:16 Segment &{hungarian notation 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:32:16 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:32:16 Segment &{lint 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:32:16 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:32:16 Segment &{gnuplot 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:32:16 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:32:16 Segment &{## install 1 map[]}
2020/03/18 22:32:16 Segment &{usage 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:32:16 Segment &{grep 1 map[]}
2020/03/18 22:32:16 Segment &{options 1 map[]}
2020/03/18 22:32:16 Segment &{invert match 5 map[]}
2020/03/18 22:32:16 Segment &{context 5 map[]}
2020/03/18 22:32:16 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:32:16 Segment &{Grunt 1 map[]}
2020/03/18 22:32:16 Segment &{Gruntfile 1 map[]}
2020/03/18 22:32:16 Segment &{Template  1 map[]}
2020/03/18 22:32:16 Segment &{Gruntfile 9 map[]}
2020/03/18 22:32:16 Segment &{ with  1 map[]}
2020/03/18 22:32:16 Segment &{eslint 9 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{jasmine 9 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{babel 9 map[]}
2020/03/18 22:32:16 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:32:16 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{or 1 map[]}
2020/03/18 22:32:16 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:32:16 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:32:16 Segment &{install mongo script 1 map[]}
2020/03/18 22:32:16 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:32:16 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:32:16 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:32:16 Segment &{from Anthony: 1 map[]}
2020/03/18 22:32:16 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:32:16 Segment &{Jasmine 1 map[]}
2020/03/18 22:32:16 Segment &{js testing framework 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:32:16 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:32:16 Segment &{expectations 1 map[]}
2020/03/18 22:32:16 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:32:16 Segment &{or chain with a  1 map[]}
2020/03/18 22:32:16 Segment &{.not 9 map[]}
2020/03/18 22:32:16 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:32:16 Segment &{matchers 1 map[]}
2020/03/18 22:32:16 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:32:16 Segment &{libexec 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:32:16 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:32:16 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:32:16 Segment &{lsof 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:32:16 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:32:16 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:32:16 Segment &{check ports 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:32:16 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:32:16 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:32:16 Segment &{markdown 1 map[]}
2020/03/18 22:32:16 Segment &{lists 1 map[]}
2020/03/18 22:32:16 Segment &{bulleted 5 map[]}
2020/03/18 22:32:16 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:32:16 Segment &{numbered 5 map[]}
2020/03/18 22:32:16 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:32:16 Segment &{checkbox 5 map[]}
2020/03/18 22:32:16 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:16 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:16 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:16 Segment &{code 1 map[]}
2020/03/18 22:32:16 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:32:16 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:32:16 Segment &{links 1 map[]}
2020/03/18 22:32:16 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:32:16 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:32:16 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:32:16 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:32:16 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:32:16 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:32:16 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:16 Segment &{ or i can say  1 map[]}
2020/03/18 22:32:16 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:16 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:32:16 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:32:16 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:32:16 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:32:16 Segment &{header 3 1 map[]}
2020/03/18 22:32:16 Segment &{blah blah 1 map[]}
2020/03/18 22:32:16 Segment &{header 4 1 map[]}
2020/03/18 22:32:16 Segment &{blah blah 1 map[]}
2020/03/18 22:32:16 Segment &{header 5 1 map[]}
2020/03/18 22:32:16 Segment &{blah blah 1 map[]}
2020/03/18 22:32:16 Segment &{Alternatively: 1 map[]}
2020/03/18 22:32:16 Segment &{blah 1 map[]}
2020/03/18 22:32:16 Segment &{blah blah 1 map[]}
2020/03/18 22:32:16 Segment &{code 1 map[]}
2020/03/18 22:32:16 Segment &{unmarked 1 map[]}
2020/03/18 22:32:16 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:32:16 Segment &{### scala 1 map[]}
2020/03/18 22:32:16 Segment &{### java 1 map[]}
2020/03/18 22:32:16 Segment &{inline formatting 1 map[]}
2020/03/18 22:32:16 Segment &{you can make string  1 map[]}
2020/03/18 22:32:16 Segment &{bold 5 map[]}
2020/03/18 22:32:16 Segment &{ like that or  1 map[]}
2020/03/18 22:32:16 Segment &{like this 5 map[]}
2020/03/18 22:32:16 Segment &{ if you like 1 map[]}
2020/03/18 22:32:16 Segment &{you can also make  1 map[]}
2020/03/18 22:32:16 Segment &{italics 3 map[]}
2020/03/18 22:32:16 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:32:16 Segment &{single underlines 3 map[]}
2020/03/18 22:32:16 Segment &{ if you prefer 1 map[]}
2020/03/18 22:32:16 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:32:16 Segment &{indented literals 1 map[]}
2020/03/18 22:32:16 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:32:16 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:32:16 Segment &{Maven 1 map[]}
2020/03/18 22:32:16 Segment &{command line 1 map[]}
2020/03/18 22:32:16 Segment &{options 1 map[]}
2020/03/18 22:32:16 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:32:16 Segment &{mongo 1 map[]}
2020/03/18 22:32:16 Segment &{To run the server: 1 map[]}
2020/03/18 22:32:16 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:32:16 Segment &{organisation 1 map[]}
2020/03/18 22:32:16 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:16 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:16 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:16 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:16 Segment &{config 1 map[]}
2020/03/18 22:32:16 Segment &{default config 3 map[]}
2020/03/18 22:32:16 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:32:16 Segment &{scale-grid 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:32:16 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:32:16 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:32:16 Segment &{crendentials 1 map[]}
2020/03/18 22:32:16 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:16 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:16 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:16 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:16 Segment &{ssh access 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:16 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:32:16 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{command line 1 map[]}
2020/03/18 22:32:16 Segment &{querying 1 map[]}
2020/03/18 22:32:16 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:32:16 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:32:16 Segment &{query selectors 1 map[]}
2020/03/18 22:32:16 Segment &{comparison 1 map[]}
2020/03/18 22:32:16 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:16 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:16 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:16 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:16 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:16 Segment &{$or 1 map[]}
2020/03/18 22:32:16 Segment &{$or 1 map[]}
2020/03/18 22:32:16 Segment &{$and 1 map[]}
2020/03/18 22:32:16 Segment &{$and 1 map[]}
2020/03/18 22:32:16 Segment &{$not 1 map[]}
2020/03/18 22:32:16 Segment &{$not 1 map[]}
2020/03/18 22:32:16 Segment &{$nor 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{element 1 map[]}
2020/03/18 22:32:16 Segment &{$nor 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{element 1 map[]}
2020/03/18 22:32:16 Segment &{$exists: 1 map[]}
2020/03/18 22:32:16 Segment &{$exists: 1 map[]}
2020/03/18 22:32:16 Segment &{$type: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{evaluation 1 map[]}
2020/03/18 22:32:16 Segment &{$type: 1 map[]}
2020/03/18 22:32:16 Segment &{

 1 map[]}
2020/03/18 22:32:16 Segment &{evaluation 1 map[]}
2020/03/18 22:32:16 Segment &{$mod: 1 map[]}
2020/03/18 22:32:16 Segment &{$mod: 1 map[]}
2020/03/18 22:32:16 Segment &{$regex: 1 map[]}
2020/03/18 22:32:16 Segment &{$regex: 1 map[]}
2020/03/18 22:32:16 Segment &{$text: 1 map[]}
2020/03/18 22:32:16 Segment &{$text: 1 map[]}
2020/03/18 22:32:16 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:16 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:16 Segment &{find 3 map[]}
2020/03/18 22:32:16 Segment &{sort 3 map[]}
2020/03/18 22:32:16 Segment &{meta 1 map[]}
2020/03/18 22:32:16 Segment &{Explain a query 1 map[]}
2020/03/18 22:32:16 Segment &{Show all indexes 1 map[]}
2020/03/18 22:32:16 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:32:16 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:32:16 Segment &{aggregation 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:32:16 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:32:16 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:32:16 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:32:16 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:16 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:16 Segment &{get some basic information 1 map[]}
2020/03/18 22:32:16 Segment &{tools to say hi 1 map[]}
2020/03/18 22:32:16 Segment &{db.version() 1 map[]}
2020/03/18 22:32:16 Segment &{db.version() 1 map[]}
2020/03/18 22:32:16 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:16 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:16 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:16 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:16 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:16 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:16 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:16 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:16 Segment &{showing 1 map[]}
2020/03/18 22:32:16 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:16 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:16 Segment &{show collections 1 map[]}
2020/03/18 22:32:16 Segment &{show collections 1 map[]}
2020/03/18 22:32:16 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:16 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:16 Segment &{more detail 1 map[]}
2020/03/18 22:32:16 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:32:16 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:32:16 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:32:16 Segment &{Set log level: 1 map[]}
2020/03/18 22:32:16 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:32:16 Segment &{mtools 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:32:16 Segment &{On gitHub -  1 map[]}
2020/03/18 22:32:16 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:32:16 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:32:16 Segment &{mongostat 1 map[]}
2020/03/18 22:32:16 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:32:16 Segment &{flaky networks 1 map[]}
2020/03/18 22:32:16 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:32:16 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:16 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:16 Segment &{primary failover 1 map[]}
2020/03/18 22:32:16 Segment &{primary failover 1 map[]}
2020/03/18 22:32:16 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:16 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:16 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:16 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:16 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:32:16 Segment &{transactions 1 map[]}
2020/03/18 22:32:16 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:32:16 Segment &{drivers 1 map[]}
2020/03/18 22:32:16 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:32:16 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:32:16 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:32:16 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:32:16 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:32:16 Segment &{retry stategies 1 map[]}
2020/03/18 22:32:16 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:16 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:16 Whaaat? br
2020/03/18 22:32:16 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:16 Whaaat? br
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:32:16 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:32:16 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:32:16 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:32:16 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:32:16 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:32:16 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:32:16 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:16 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:16 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:32:16 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:32:16 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:32:16 Segment &{black pipe testing 1 map[]}
2020/03/18 22:32:16 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:32:16 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:32:16 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:32:16 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:32:16 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:32:16 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:32:16 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:32:16 Segment &{hadoop 1 map[]}
2020/03/18 22:32:16 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:16 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:16 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:16 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:16 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:16 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:16 Segment &{great references 1 map[]}
2020/03/18 22:32:16 Segment &{great references 1 map[]}
2020/03/18 22:32:16 Segment &{requisites 1 map[]}
2020/03/18 22:32:16 Segment &{low latency 1 map[]}
2020/03/18 22:32:16 Segment &{low latency 1 map[]}
2020/03/18 22:32:16 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:16 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:16 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:16 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:16 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:16 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:16 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:32:16 Segment &{4. spark 1 map[]}
2020/03/18 22:32:16 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:32:16 Segment &{
on maven 1 map[]}
2020/03/18 22:32:16 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:32:16 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:32:16 Segment &{connecting to spark 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:32:16 Segment &{Mozart 1 map[]}
2020/03/18 22:32:16 Segment &{Urls: 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:32:16 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{development 1 map[]}
2020/03/18 22:32:16 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:32:16 Segment &{and do this: 1 map[]}
2020/03/18 22:32:16 Segment &{page configs 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:32:16 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:16 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:32:16 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{ngrok 1 map[]}
2020/03/18 22:32:16 Segment &{install 1 map[]}
2020/03/18 22:32:16 Segment &{run 1 map[]}
2020/03/18 22:32:16 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:32:16 Segment &{page configs 1 map[]}
2020/03/18 22:32:16 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:32:16 Segment &{mtools 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:16 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:16 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:32:16 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:32:16 Segment &{mtools 5 map[]}
2020/03/18 22:32:16 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:32:16 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:32:16 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:32:16 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:32:16 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:32:16 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:32:16 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:32:16 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:32:16 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:32:16 Segment &{  1 map[]}
2020/03/18 22:32:16 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:32:16 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:32:16 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:32:16 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:32:16 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:32:16 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:32:16 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:32:16 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:32:16 Segment &{Recent Changes 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:32:16 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:32:16 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:32:16 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:32:16 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:32:16 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:32:16 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:32:16 Segment &{ for instructions. 1 map[]}
2020/03/18 22:32:16 Segment &{Disclaimer 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:32:16 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:32:16 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:32:16 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:32:16 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:32:16 Segment &{ section here on github. 1 map[]}
2020/03/18 22:32:16 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:32:16 Segment &{mustache 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:32:16 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{conditionals: 5 map[]}
2020/03/18 22:32:16 Segment &{iterations: 5 map[]}
2020/03/18 22:32:16 Segment &{partials: 5 map[]}
2020/03/18 22:32:16 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:32:16 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:32:16 Segment &{Node 1 map[]}
2020/03/18 22:32:16 Segment &{nvm 1 map[]}
2020/03/18 22:32:16 Segment &{Node version manager 1 map[]}
2020/03/18 22:32:16 Segment &{versions 1 map[]}
2020/03/18 22:32:16 Segment &{found in 1 map[]}
2020/03/18 22:32:16 Segment &{alias 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:32:16 Segment &{package managers 1 map[]}
2020/03/18 22:32:16 Segment &{npm 1 map[]}
2020/03/18 22:32:16 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:32:16 Segment &{proxy settings 1 map[]}
2020/03/18 22:32:16 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:32:16 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:32:16 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{apm 1 map[]}
2020/03/18 22:32:16 Segment &{Atom package manager 1 map[]}
2020/03/18 22:32:16 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:32:16 Segment &{php 1 map[]}
2020/03/18 22:32:16 Segment &{pluralsight 1 map[]}
2020/03/18 22:32:16 Segment &{constants 1 map[]}
2020/03/18 22:32:16 Segment &{define: 1 map[]}
2020/03/18 22:32:16 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:32:16 Segment &{existence check 1 map[]}
2020/03/18 22:32:16 Segment &{constants: 5 map[]}
2020/03/18 22:32:16 Segment &{variables 5 map[]}
2020/03/18 22:32:16 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:32:16 Segment &{functions 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{type check 1 map[]}
2020/03/18 22:32:16 Segment &{function 1 map[]}
2020/03/18 22:32:16 Segment &{variable functions: 1 map[]}
2020/03/18 22:32:16 Segment &{make a variable global 5 map[]}
2020/03/18 22:32:16 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:32:16 Segment &{strings 1 map[]}
2020/03/18 22:32:16 Segment &{functions 1 map[]}
2020/03/18 22:32:16 Segment &{docker 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:32:16 Segment &{as per the  1 map[]}
2020/03/18 22:32:16 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:32:16 Segment &{ explanation.. 1 map[]}
2020/03/18 22:32:16 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:32:16 Segment &{project 9 map[]}
2020/03/18 22:32:16 Segment &{ folder, with a  1 map[]}
2020/03/18 22:32:16 Segment &{src 9 map[]}
2020/03/18 22:32:16 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:32:16 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:32:16 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:32:16 Segment &{site.conf 9 map[]}
2020/03/18 22:32:16 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:32:16 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:32:16 Segment &{Run  1 map[]}
2020/03/18 22:32:16 Segment &{docker-compose up 9 map[]}
2020/03/18 22:32:16 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:32:16 Segment &{NOTE: 5 map[]}
2020/03/18 22:32:16 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:32:16 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:32:16 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:32:16 Segment &{site.conf 1 map[]}
2020/03/18 22:32:16 Segment &{cheatsheet 1 map[]}
2020/03/18 22:32:16 Segment &{strings 5 map[]}
2020/03/18 22:32:16 Segment &{date 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{arrays 5 map[]}
2020/03/18 22:32:16 Segment &{numeric example 5 map[]}
2020/03/18 22:32:16 Segment &{functions 5 map[]}
2020/03/18 22:32:16 Segment &{classes 5 map[]}
2020/03/18 22:32:16 Segment &{web 5 map[]}
2020/03/18 22:32:16 Segment &{array 1 map[]}
2020/03/18 22:32:16 Segment &{transform 1 map[]}
2020/03/18 22:32:16 Segment &{map 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{filter 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{reset 1 map[]}
2020/03/18 22:32:16 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:32:16 Segment &{strings 1 map[]}
2020/03/18 22:32:16 Segment &{explode 1 map[]}
2020/03/18 22:32:16 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:32:16 Segment &{example 1 map[]}
2020/03/18 22:32:16 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:32:16 Segment &{postgresql 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:32:16 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:32:16 Segment &{run the daemon: 1 map[]}
2020/03/18 22:32:16 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:32:16 Segment &{cli 1 map[]}
2020/03/18 22:32:16 Segment &{commands: 1 map[]}
2020/03/18 22:32:16 Segment &{snapshots 1 map[]}
2020/03/18 22:32:16 Segment &{take snapshot: 1 map[]}
2020/03/18 22:32:16 Segment &{restore: 1 map[]}
2020/03/18 22:32:16 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:32:16 Segment &{pw log 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:32:16 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:32:16 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:32:16 Segment &{] 1 map[]}
2020/03/18 22:32:16 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:16 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:16 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:16 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:16 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:16 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:16 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:16 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:16 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:16 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:16 Segment &{hints 1 map[]}
2020/03/18 22:32:16 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:16 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:16 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:16 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:16 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:16 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:16 Segment &{reset 1 map[]}
2020/03/18 22:32:16 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:32:16 Segment &{keys 1 map[]}
2020/03/18 22:32:16 Segment &{textual:  1 map[]}
2020/03/18 22:32:16 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:32:16 Segment &{textual:  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:32:16 Segment &{python 1 map[]}
2020/03/18 22:32:16 Segment &{getting it working 1 map[]}
2020/03/18 22:32:16 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:32:16 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:32:16 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:32:16 Segment &{ as follows: 1 map[]}
2020/03/18 22:32:16 Segment &{useful 1 map[]}
2020/03/18 22:32:16 Segment &{get openssl version 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:32:16 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:32:16 Segment &{user name 5 map[]}
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:32:16 Segment &{API Key 5 map[]}
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:32:16 Segment &{docker 1 map[]}
2020/03/18 22:32:16 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:32:16 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:32:16 Segment &{react 1 map[]}
2020/03/18 22:32:16 Segment &{state 1 map[]}
2020/03/18 22:32:16 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:32:16 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:16 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:16 Segment &{refs 1 map[]}
2020/03/18 22:32:16 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:32:16 Segment &{unique key 1 map[]}
2020/03/18 22:32:16 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:32:16 Segment &{key 9 map[]}
2020/03/18 22:32:16 Segment &{ item 1 map[]}
2020/03/18 22:32:16 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:32:16 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:32:16 Segment &{redis 1 map[]}
2020/03/18 22:32:16 Segment &{operations 1 map[]}
2020/03/18 22:32:16 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:32:16 Segment &{redis-cli 9 map[]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 Segment &{keys: 5 map[]}
2020/03/18 22:32:16 Segment &{z-range 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:32:16 Segment &{Regex 1 map[]}
2020/03/18 22:32:16 Segment &{group constructs 1 map[]}
2020/03/18 22:32:16 Segment &{lookahead 1 map[]}
2020/03/18 22:32:16 Segment &{positive lookahead 5 map[]}
2020/03/18 22:32:16 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:16 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:16 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:32:16 Segment &{negative lookahead 5 map[]}
2020/03/18 22:32:16 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:16 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:16 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:32:16 Segment &{lookbehind 1 map[]}
2020/03/18 22:32:16 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:32:16 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:16 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:16 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:32:16 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:32:16 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:16 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:16 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:32:16 Segment &{capturing 1 map[]}
2020/03/18 22:32:16 Segment &{non capturing group 5 map[]}
2020/03/18 22:32:16 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:32:16 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:32:16 Segment &{RPM 1 map[]}
2020/03/18 22:32:16 Segment &{sources 1 map[]}
2020/03/18 22:32:16 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{spec file 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:32:16 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:32:16 Segment &{variables 1 map[]}
2020/03/18 22:32:16 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:32:16 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:16 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{building 1 map[]}
2020/03/18 22:32:16 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:32:16 Segment &{You need to have  1 map[]}
2020/03/18 22:32:16 Segment &{rmpbuild 9 map[]}
2020/03/18 22:32:16 Segment &{ installed, so  1 map[]}
2020/03/18 22:32:16 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{Copy  1 map[]}
2020/03/18 22:32:16 Segment &{SOURCES 9 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{SPECS 9 map[]}
2020/03/18 22:32:16 Segment &{ to  1 map[]}
2020/03/18 22:32:16 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:32:16 Segment &{ and  1 map[]}
2020/03/18 22:32:16 Segment &{.../SPECS 9 map[]}
2020/03/18 22:32:16 Segment &{ respectively. 1 map[]}
2020/03/18 22:32:16 Segment &{list 1 map[]}
2020/03/18 22:32:16 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:32:16 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:16 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:32:16 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:32:16 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:32:16 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:32:16 Segment &{scalegrid 1 map[]}
2020/03/18 22:32:16 Segment &{command line access 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:32:16 Segment &{sed 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:32:16 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:32:16 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:32:16 Segment &{substitute (s) 1 map[]}
2020/03/18 22:32:16 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:32:16 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:32:16 Segment &{Selenium 1 map[]}
2020/03/18 22:32:16 Segment &{Webdrivers 1 map[]}
2020/03/18 22:32:16 Segment &{Capabilities 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:32:16 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:32:16 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:32:16 Segment &{Seyren 1 map[]}
2020/03/18 22:32:16 Segment &{Alerts API 1 map[]}
2020/03/18 22:32:16 Segment &{Get check alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:32:16 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:16 Segment &{Get alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Charts API 1 map[]}
2020/03/18 22:32:16 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Return png image 1 map[]}
2020/03/18 22:32:16 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:16 Segment &{Return png image 1 map[]}
2020/03/18 22:32:16 Segment &{Checks API 1 map[]}
2020/03/18 22:32:16 Segment &{Search checks 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:32:16 Segment &{See  1 map[]}
2020/03/18 22:32:16 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:32:16 Segment &{Create a check 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ POST 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ POST 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:32:16 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:32:16 Segment &{Get a check 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:16 Segment &{Update a check 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:32:16 Segment &{Delete a check 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:16 Segment &{Config API 1 map[]}
2020/03/18 22:32:16 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /config 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /config 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{Metrics API 1 map[]}
2020/03/18 22:32:16 Segment &{Get metric count 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ GET 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:32:16 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:32:16 Segment &{Create a subscription 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ POST 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ POST 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:32:16 Segment &{Update a subscription 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:16 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:16 Segment &{Test a subscription 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:16 Segment &{URL 5 map[]}
2020/03/18 22:32:16 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{Method 5 map[]}
2020/03/18 22:32:16 Segment &{ PUT 1 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Segment &{URL Params 5 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{Query Params 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Body 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{None 1 map[]}
2020/03/18 22:32:16 Segment &{Response 5 map[]}
2020/03/18 22:32:16 Whaaat? strong
2020/03/18 22:32:16 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:32:16 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:16 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:32:16 Segment &{Spring 1 map[]}
2020/03/18 22:32:16 Segment &{Context annotations 1 map[]}
2020/03/18 22:32:16 Segment &{xml 1 map[]}
2020/03/18 22:32:16 Segment &{in  1 map[]}
2020/03/18 22:32:16 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:32:16 Segment &{, add the following: 1 map[]}
2020/03/18 22:32:16 Segment &{Types 1 map[]}
2020/03/18 22:32:16 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:32:16 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:16 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:32:16 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:16 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:32:16 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:16 Segment &{@Autowired 9 map[]}
2020/03/18 22:32:16 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:16 Segment &{Java configuration 1 map[]}
2020/03/18 22:32:16 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:32:16 Segment &{use  1 map[]}
2020/03/18 22:32:16 Segment &{@Configuration 9 map[]}
2020/03/18 22:32:16 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:16 Segment &{use  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:16 Segment &{use  1 map[]}
2020/03/18 22:32:16 Segment &{@Bean 9 map[]}
2020/03/18 22:32:16 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:16 Segment &{use  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:32:16 Segment &{Autowiring 1 map[]}
2020/03/18 22:32:16 Segment &{add  1 map[]}
2020/03/18 22:32:16 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:32:16 Segment &{ annotation to your  1 map[]}
2020/03/18 22:32:16 Segment &{AppConfig 9 map[]}
2020/03/18 22:32:16 Segment &{ class 1 map[]}
2020/03/18 22:32:16 Segment &{Scope 1 map[]}
2020/03/18 22:32:16 Segment &{using scope: 1 map[]}
2020/03/18 22:32:16 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:32:16 Segment &{singleton 1 map[]}
2020/03/18 22:32:16 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:16 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:16 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:32:16 Segment &{prototype 1 map[]}
2020/03/18 22:32:16 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:16 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:16 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:32:16 Segment &{request 1 map[]}
2020/03/18 22:32:16 Segment &{“request” 1 map[]}
2020/03/18 22:32:16 Segment &{“request” 1 map[]}
2020/03/18 22:32:16 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:32:16 Segment &{session 1 map[]}
2020/03/18 22:32:16 Segment &{“session” 1 map[]}
2020/03/18 22:32:16 Segment &{“session” 1 map[]}
2020/03/18 22:32:16 Segment &{Lives per session 1 map[]}
2020/03/18 22:32:16 Segment &{global session 1 map[]}
2020/03/18 22:32:16 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:32:16 Segment &{Properties 1 map[]}
2020/03/18 22:32:16 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:32:16 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:32:16 Segment &{Annotate the value 1 map[]}
2020/03/18 22:32:16 Segment &{in  1 map[]}
2020/03/18 22:32:16 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:32:16 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:32:16 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:32:16 Segment &{UIViewController 1 map[]}
2020/03/18 22:32:16 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:32:16 Segment &{SKScene 1 map[]}
2020/03/18 22:32:16 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:32:16 Segment &{ssh 1 map[]}
2020/03/18 22:32:16 Segment &{ec2 logon 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:32:16 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:32:16 Segment &{setup 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:32:16 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:32:16 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:32:16 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:32:16 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:32:16 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:32:16 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:32:16 Segment &{To logon: 1 map[]}
2020/03/18 22:32:16 Segment &{To end: 1 map[]}
2020/03/18 22:32:16 Segment &{generate 1 map[]}
2020/03/18 22:32:16 Segment &{From the command line: 1 map[]}
2020/03/18 22:32:16 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:32:16 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:32:16 Segment &{view 1 map[]}
2020/03/18 22:32:16 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:32:16 Segment &{scp 1 map[]}
2020/03/18 22:32:16 Segment &{upload: 1 map[]}
2020/03/18 22:32:16 Segment &{download: 1 map[]}
2020/03/18 22:32:16 Segment &{Keys 1 map[]}
2020/03/18 22:32:16 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:32:16 Segment &{id2_rsa 9 map[]}
2020/03/18 22:32:16 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:32:16 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:32:16 Segment &{svn 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:32:16 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:32:16 Segment &{propset 1 map[]}
2020/03/18 22:32:16 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:32:16 Segment &{revert 1 map[]}
2020/03/18 22:32:16 Segment &{delete 1 map[]}
2020/03/18 22:32:16 Segment &{mkdir 1 map[]}
2020/03/18 22:32:16 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:32:16 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:32:16 Segment &{systemd 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:32:16 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{journalctl 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:32:16 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:32:16 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:32:16 Segment &{tar 1 map[]}
2020/03/18 22:32:16 Segment &{create 1 map[]}
2020/03/18 22:32:16 Segment &{unzip 1 map[]}
2020/03/18 22:32:16 Segment &{list files in tar 1 map[]}
2020/03/18 22:32:16 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:32:16 Segment &{tcp/ip 1 map[]}
2020/03/18 22:32:16 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:32:16 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:32:16 Segment &{Protocols 1 map[]}
2020/03/18 22:32:16 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{protocol stack 5 map[]}
2020/03/18 22:32:16 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{gateway 5 map[]}
2020/03/18 22:32:16 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:32:16 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:32:16 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:32:16 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:32:16 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:32:16 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:32:16 Segment &{Architecture 1 map[]}
2020/03/18 22:32:16 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:32:16 Segment &{DARPA 3 map[]}
2020/03/18 22:32:16 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:32:16 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:32:16 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{DARPA Model 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:32:16 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{one to one 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{one to one 1 map[]}
2020/03/18 22:32:16 Segment &{one to one 1 map[]}
2020/03/18 22:32:16 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:16 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:16 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:16 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:16 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{connectionless 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{connectionless 1 map[]}
2020/03/18 22:32:16 Segment &{connectionless 1 map[]}
2020/03/18 22:32:16 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:16 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:16 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{addressing 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{routing 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{addressing 1 map[]}
2020/03/18 22:32:16 Segment &{addressing 1 map[]}
2020/03/18 22:32:16 Segment &{routing 1 map[]}
2020/03/18 22:32:16 Segment &{routing 1 map[]}
2020/03/18 22:32:16 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:16 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:16 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:16 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:16 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:16 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:16 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:16 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:16 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:16 Segment &{Three way handshake 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:32:16 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:16 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:16 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:16 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:16 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:16 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:16 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:16 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:16 Segment &{IP Addresses 1 map[]}
2020/03/18 22:32:16 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:32:16 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:32:16 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:32:16 Segment &{The  1 map[]}
2020/03/18 22:32:16 Segment &{subnet mask 5 map[]}
2020/03/18 22:32:16 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:32:16 Segment &{255 9 map[]}
2020/03/18 22:32:16 Segment &{ and ending in  1 map[]}
2020/03/18 22:32:16 Segment &{0 9 map[]}
2020/03/18 22:32:16 Segment &{.  1 map[]}
2020/03/18 22:32:16 Segment &{255 9 map[]}
2020/03/18 22:32:16 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:32:16 Segment &{0 9 map[]}
2020/03/18 22:32:16 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. 1 map[]}
2020/03/18 22:32:16 Segment &{IP address = 1 map[]}
2020/03/18 22:32:16 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:16 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:32:16 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:32:16 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:32:16 Segment &{192.168.10 9 map[]}
2020/03/18 22:32:16 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:32:16 Segment &{1 9 map[]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 Segment &{to see ip info 1 map[]}
2020/03/18 22:32:16 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:32:16 Segment &{it sends an  1 map[]}
2020/03/18 22:32:16 Segment &{echo request 3 map[]}
2020/03/18 22:32:16 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:32:16 Segment &{man ping 9 map[]}
2020/03/18 22:32:16 Segment &{) 1 map[]}
2020/03/18 22:32:16 Segment &{Rules 1 map[]}
2020/03/18 22:32:16 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:32:16 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:32:16 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:32:16 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:32:16 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:32:16 Segment &{Classes 1 map[]}
2020/03/18 22:32:16 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:32:16 Whaaat? table
2020/03/18 22:32:16 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:32:16 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:32:16 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:32:16 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:32:16 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:16 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:16 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:16 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:16 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:16 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:16 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:16 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:16 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:32:16 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:32:16 Segment &{ (NAT). 1 map[]}
2020/03/18 22:32:16 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:32:16 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:32:16 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:32:16 Segment &{Internetworking 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{router 5 map[]}
2020/03/18 22:32:16 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:32:16 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:32:16 Segment &{router 5 map[]}
2020/03/18 22:32:16 Segment &{. This is  1 map[]}
2020/03/18 22:32:16 Segment &{internetworking 5 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{A  1 map[]}
2020/03/18 22:32:16 Segment &{default gateway 5 map[]}
2020/03/18 22:32:16 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:32:16 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:32:16 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:32:16 Segment &{Subnetting 5 map[]}
2020/03/18 22:32:16 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:32:16 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:32:16 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:32:16 Segment &{Solution is to use  1 map[]}
2020/03/18 22:32:16 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:32:16 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:32:16 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:32:16 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:32:16 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:32:16 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:32:16 Segment &{subnets 5 map[]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 Segment &{e.g.  1 map[]}
2020/03/18 22:32:16 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:32:16 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:32:16 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:32:16 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:32:16 Segment &{CIDR notation 5 map[]}
2020/03/18 22:32:16 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:32:16 Segment &{e.g.  1 map[]}
2020/03/18 22:32:16 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:16 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:32:16 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:32:16 Segment &{ can be better read as  1 map[]}
2020/03/18 22:32:16 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:32:16 Segment &{. The segment after the  1 map[]}
2020/03/18 22:32:16 Segment &{/ 9 map[]}
2020/03/18 22:32:16 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:32:16 Segment &{IPv6 1 map[]}
2020/03/18 22:32:16 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:32:16 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:32:16 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:32:16 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:32:16 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:32:16 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:16 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:32:16 Segment &{0 9 map[]}
2020/03/18 22:32:16 Segment &{s block with double  1 map[]}
2020/03/18 22:32:16 Segment &{:: 9 map[]}
2020/03/18 22:32:16 Segment &{, ie:  1 map[]}
2020/03/18 22:32:16 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:16 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:32:16 Segment &{todo 1 map[]}
2020/03/18 22:32:16 Segment &{lookup 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:32:16 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:16 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:32:16 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:16 Whaaat? a
2020/03/18 22:32:16 Segment &{projects 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:16 Segment &{logic 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:16 Segment &{note-worthy 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:16 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:16 Whaaat? br
2020/03/18 22:32:16 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:16 Segment &{:help | :h 9 map[]}
2020/03/18 22:32:16 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:16 Segment &{headers as tags 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:16 Segment &{bugs 1 map[]}
2020/03/18 22:32:16 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:16 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:16 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:16 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:16 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:16 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:16 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:16 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:16 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:16 Segment &{markdown [md] 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:16 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:16 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:16 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:16 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:16 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:16 Segment &{bugs 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:16 Segment &{cppbt 1 map[]}
2020/03/18 22:32:16 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:16 Segment &{
 1 map[]}
2020/03/18 22:32:16 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:16 Segment &{subnets 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:16 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:16 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:32:16 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:16 Segment &{ssl 1 map[]}
2020/03/18 22:32:16 Whaaat? ol
2020/03/18 22:32:16 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:32:16 Segment &{realpath 1 map[]}
2020/03/18 22:32:16 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:32:16 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:32:16 Segment &{Vagrant 1 map[]}
2020/03/18 22:32:16 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:32:16 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:32:16 Segment &{Installation 1 map[]}
2020/03/18 22:32:16 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:32:16 Segment &{Usage 1 map[]}
2020/03/18 22:32:16 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:32:16 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:32:16 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:32:16 Segment &{That’s it! 1 map[]}
2020/03/18 22:32:16 Segment &{Examples 1 map[]}
2020/03/18 22:32:16 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:32:16 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:32:16 Segment &{Vagrant version 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:32:16 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:32:16 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:32:16 Segment &{. 1 map[]}
2020/03/18 22:32:16 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:32:16 Segment &{vim 1 map[]}
2020/03/18 22:32:16 Segment &{commands 1 map[]}
2020/03/18 22:32:16 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:32:16 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:32:16 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:32:16 Segment &{In command mode: 1 map[]}
2020/03/18 22:32:16 Segment &{Saving 5 map[]}
2020/03/18 22:32:16 Segment &{:
+  1 map[]}
2020/03/18 22:32:16 Segment &{:wq 9 map[]}
2020/03/18 22:32:16 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:32:16 Segment &{:q! 9 map[]}
2020/03/18 22:32:16 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:32:16 Segment &{Editing 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{x 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete 1 map[]}
2020/03/18 22:32:16 Segment &{x 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete 1 map[]}
2020/03/18 22:32:16 Segment &{u 9 map[]}
2020/03/18 22:32:16 Segment &{ - undo 1 map[]}
2020/03/18 22:32:16 Segment &{u 9 map[]}
2020/03/18 22:32:16 Segment &{ - undo 1 map[]}
2020/03/18 22:32:16 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:16 Segment &{ - redo 1 map[]}
2020/03/18 22:32:16 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:16 Segment &{ - redo 1 map[]}
2020/03/18 22:32:16 Segment &{dw 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:16 Segment &{dw 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:16 Segment &{2w 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:16 Segment &{2w 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:16 Segment &{3e 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:16 Segment &{3e 9 map[]}
2020/03/18 22:32:16 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:16 Segment &{0 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:16 Segment &{0 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:16 Segment &{$ 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:16 Segment &{$ 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:16 Segment &{e 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:16 Segment &{e 9 map[]}
2020/03/18 22:32:16 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:16 Segment &{d2w 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:16 Segment &{d2w 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:16 Segment &{dd 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:16 Segment &{dd 9 map[]}
2020/03/18 22:32:16 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:16 Segment &{yy 9 map[]}
2020/03/18 22:32:16 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:16 Segment &{yy 9 map[]}
2020/03/18 22:32:16 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:16 Segment &{p 9 map[]}
2020/03/18 22:32:16 Segment &{ - paste 1 map[]}
2020/03/18 22:32:16 Segment &{p 9 map[]}
2020/03/18 22:32:16 Segment &{ - paste 1 map[]}
2020/03/18 22:32:16 Segment &{Modes 5 map[]}
2020/03/18 22:32:16 Segment &{: 1 map[]}
2020/03/18 22:32:16 Segment &{i 9 map[]}
2020/03/18 22:32:16 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:16 Segment &{a 9 map[]}
2020/03/18 22:32:16 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:16 Segment &{A 9 map[]}
2020/03/18 22:32:16 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:16 Segment &{a 9 map[]}
2020/03/18 22:32:16 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:16 Segment &{O 9 map[]}
2020/03/18 22:32:16 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:16 Segment &{o 9 map[]}
2020/03/18 22:32:16 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:16 Segment &{V 9 map[]}
2020/03/18 22:32:16 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:16 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:32:16 Segment &{yum 1 map[]}
2020/03/18 22:32:16 Segment &{search 1 map[]}
2020/03/18 22:32:16 Segment &{list 1 map[]}
2020/03/18 22:32:16 Segment &{repositories 1 map[]}
2020/03/18 22:32:16 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:32:16 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:32:16 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:32:16 Segment &{packages 1 map[]}
2020/03/18 22:32:16 Segment &{g++ 9 map[]}
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{rpmbuild 9 map[]}
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:16 Segment &{:  1 map[]}
2020/03/18 22:32:16 Whaaat? code
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:32:24 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:32:24 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:32:24 Whaaat? hr
2020/03/18 22:32:24 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:32:24 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:24 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:32:24 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:32:24 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:32:24 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:32:24 Whaaat? hr
2020/03/18 22:32:24 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:32:24 Segment &{h2 Heading 1 map[]}
2020/03/18 22:32:24 Segment &{h3 Heading 1 map[]}
2020/03/18 22:32:24 Segment &{h4 Heading 1 map[]}
2020/03/18 22:32:24 Segment &{h5 Heading 1 map[]}
2020/03/18 22:32:24 Segment &{h6 Heading 1 map[]}
2020/03/18 22:32:24 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:32:24 Whaaat? hr
2020/03/18 22:32:24 Whaaat? hr
2020/03/18 22:32:24 Whaaat? hr
2020/03/18 22:32:24 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:32:24 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:32:24 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:32:24 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:32:24 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:32:24 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:32:24 Segment &{Emphasis 1 map[]}
2020/03/18 22:32:24 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:24 Segment &{This is bold text 5 map[]}
2020/03/18 22:32:24 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:24 Segment &{This is italic text 3 map[]}
2020/03/18 22:32:24 Segment &{Strikethrough 1 map[]}
2020/03/18 22:32:24 Segment &{Blockquotes 1 map[]}
2020/03/18 22:32:24 Segment &{Lists 1 map[]}
2020/03/18 22:32:24 Segment &{Unordered 1 map[]}
2020/03/18 22:32:24 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:24 Segment &{+ 9 map[]}
2020/03/18 22:32:24 Segment &{,  1 map[]}
2020/03/18 22:32:24 Segment &{- 9 map[]}
2020/03/18 22:32:24 Segment &{, or  1 map[]}
2020/03/18 22:32:24 Segment &{* 9 map[]}
2020/03/18 22:32:24 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{,  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{, or  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:32:24 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:24 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:32:24 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:24 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:32:24 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:24 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:32:24 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:24 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:32:24 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:24 Segment &{Very easy! 1 map[]}
2020/03/18 22:32:24 Segment &{Ordered 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Code 1 map[]}
2020/03/18 22:32:24 Segment &{Inline  1 map[]}
2020/03/18 22:32:24 Segment &{code 9 map[]}
2020/03/18 22:32:24 Segment &{Indented code 1 map[]}
2020/03/18 22:32:24 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:32:24 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:32:24 Segment &{Tables 1 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Links 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:32:24 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:32:24 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:32:24 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:32:24 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:32:24 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:32:24 Segment &{Images 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:32:24 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:32:24 Segment &{Plugins 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:32:24 Segment &{The killer feature of  1 map[]}
2020/03/18 22:32:24 Segment &{markdown-it 9 map[]}
2020/03/18 22:32:24 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:32:24 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:32:24 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:32:24 Segment &{see  1 map[]}
2020/03/18 22:32:24 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:32:24 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:32:24 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:32:24 Segment &{ /  1 map[]}
2020/03/18 22:32:24 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:32:24 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:24 Segment &{19^th^ 1 map[]}
2020/03/18 22:32:24 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:24 Segment &{H~2~O 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:32:24 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:32:24 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:32:24 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:32:24 Segment &{==Marked text== 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:32:24 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:32:24 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:32:24 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:32:24 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:32:24 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:32:24 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:32:24 Segment &{can have markup 5 map[]}
2020/03/18 22:32:24 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:32:24 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:32:24 Whaaat? dl
2020/03/18 22:32:24 Segment &{Compact style: 3 map[]}
2020/03/18 22:32:24 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:32:24 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:32:24 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:32:24 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:32:24 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:32:24 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:32:24 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:32:24 Segment &{::: warning
 1 map[]}
2020/03/18 22:32:24 Segment &{here be dragons 3 map[]}
2020/03/18 22:32:24 Segment &{
::: 1 map[]}
2020/03/18 22:32:24 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:32:24 Segment &{test 1 map[]}
2020/03/18 22:32:24 Segment &{hello there. this is  1 map[]}
2020/03/18 22:32:24 Segment &{formatted with  3 map[]}
2020/03/18 22:32:24 Segment &{bold 7 map[]}
2020/03/18 22:32:24 Segment &{ and 3 map[]}
2020/03/18 22:32:24 Segment &{ with some  1 map[]}
2020/03/18 22:32:24 Segment &{bold text 5 map[]}
2020/03/18 22:32:24 Segment &{ and some  1 map[]}
2020/03/18 22:32:24 Segment &{inline code 9 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:32:24 Segment &{As a special treat,  1 map[]}
2020/03/18 22:32:24 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:32:24 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:32:24 Segment &{foofoo 1 map[]}
2020/03/18 22:32:24 Segment &{Heading 3 1 map[]}
2020/03/18 22:32:24 Segment &{heading 3 content 1 map[]}
2020/03/18 22:32:24 Segment &{Heading 4 1 map[]}
2020/03/18 22:32:24 Segment &{heading 4 content 1 map[]}
2020/03/18 22:32:24 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:32:24 Segment &{Heading 5 1 map[]}
2020/03/18 22:32:24 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:32:24 Segment &{one 1 map[]}
2020/03/18 22:32:24 Segment &{one 1 map[]}
2020/03/18 22:32:24 Segment &{two 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{with some code
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:24 Segment &{inline code 9 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{inner list biatch 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{number 2 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{two 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:32:24 Segment &{inline code 9 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{three 1 map[]}
2020/03/18 22:32:24 Segment &{three 1 map[]}
2020/03/18 22:32:24 Segment &{Heading 6 1 map[]}
2020/03/18 22:32:24 Segment &{heading 6 content 1 map[]}
2020/03/18 22:32:24 Segment &{####### H7? 1 map[]}
2020/03/18 22:32:24 Segment &{no such thing 1 map[]}
2020/03/18 22:32:24 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:32:24 Segment &{DUMP 1 map[]}
2020/03/18 22:32:24 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:32:24 Segment &{netstat 1 map[]}
2020/03/18 22:32:24 Segment &{(or  1 map[]}
2020/03/18 22:32:24 Segment &{ss 9 map[]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:32:24 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:32:24 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:32:24 Segment &{libexec 1 map[]}
2020/03/18 22:32:24 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:32:24 Segment &{ack 1 map[]}
2020/03/18 22:32:24 Segment &{speedtest 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:32:24 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:32:24 Segment &{rsync 1 map[]}
2020/03/18 22:32:24 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:32:24 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:32:24 Segment &{kubernetes 1 map[]}
2020/03/18 22:32:24 Segment &{hls 1 map[]}
2020/03/18 22:32:24 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:32:24 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:32:24 Segment &{akka 1 map[]}
2020/03/18 22:32:24 Segment &{overview 1 map[]}
2020/03/18 22:32:24 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:32:24 Segment &{domain approach: 5 map[]}
2020/03/18 22:32:24 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:32:24 Segment &{worker systems: 5 map[]}
2020/03/18 22:32:24 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:32:24 Segment &{messaging styles: 5 map[]}
2020/03/18 22:32:24 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:32:24 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:32:24 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:32:24 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:32:24 Segment &{creating actors 1 map[]}
2020/03/18 22:32:24 Segment &{messages 1 map[]}
2020/03/18 22:32:24 Segment &{actors 1 map[]}
2020/03/18 22:32:24 Segment &{actor system 1 map[]}
2020/03/18 22:32:24 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:32:24 Segment &{ActorRef 9 map[]}
2020/03/18 22:32:24 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:32:24 Segment &{Remember to use  1 map[]}
2020/03/18 22:32:24 Segment &{self 9 map[]}
2020/03/18 22:32:24 Segment &{ rather than  1 map[]}
2020/03/18 22:32:24 Segment &{this 9 map[]}
2020/03/18 22:32:24 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:32:24 Segment &{self 9 map[]}
2020/03/18 22:32:24 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:32:24 Segment &{this 9 map[]}
2020/03/18 22:32:24 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:32:24 Segment &{actor system 1 map[]}
2020/03/18 22:32:24 Segment &{actorOf 9 map[]}
2020/03/18 22:32:24 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:32:24 Segment &{message 1 map[]}
2020/03/18 22:32:24 Segment &{error handling 1 map[]}
2020/03/18 22:32:24 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:32:24 Segment &{supervisor 5 map[]}
2020/03/18 22:32:24 Segment &{ of the child 1 map[]}
2020/03/18 22:32:24 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:32:24 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:32:24 Segment &{strategies 5 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{supervision 1 map[]}
2020/03/18 22:32:24 Segment &{strategies 1 map[]}
2020/03/18 22:32:24 Segment &{actor paths 1 map[]}
2020/03/18 22:32:24 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:32:24 Segment &{monitoring 1 map[]}
2020/03/18 22:32:24 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:32:24 Segment &{lifecycle 1 map[]}
2020/03/18 22:32:24 Segment &{dispatching 1 map[]}
2020/03/18 22:32:24 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:24 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:24 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:24 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:24 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:32:24 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:32:24 Segment &{scheduling 1 map[]}
2020/03/18 22:32:24 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:32:24 Segment &{dead letter 1 map[]}
2020/03/18 22:32:24 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:32:24 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:32:24 Segment &{routing 1 map[]}
2020/03/18 22:32:24 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:32:24 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:32:24 Segment &{akka.routing 9 map[]}
2020/03/18 22:32:24 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:32:24 Segment &{example 1 map[]}
2020/03/18 22:32:24 Segment &{strategies 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{creating routers 1 map[]}
2020/03/18 22:32:24 Segment &{akka streams 1 map[]}
2020/03/18 22:32:24 Segment &{split and aggregate 1 map[]}
2020/03/18 22:32:24 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:32:24 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:32:24 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:32:24 Segment &{links [links] 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:32:24 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:32:24 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:32:24 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:32:24 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:24 Segment &{
   1 map[]}
2020/03/18 22:32:24 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{
   1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:32:24 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:32:24 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:24 Segment &{
   1 map[]}
2020/03/18 22:32:24 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{
   1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:32:24 Segment &{apache 1 map[]}
2020/03/18 22:32:24 Segment &{local server 1 map[]}
2020/03/18 22:32:24 Segment &{apache config 5 map[]}
2020/03/18 22:32:24 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:32:24 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:32:24 Segment &{config changes 1 map[]}
2020/03/18 22:32:24 Segment &{in  1 map[]}
2020/03/18 22:32:24 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:32:24 Segment &{: uncommented 1 map[]}
2020/03/18 22:32:24 Segment &{In  1 map[]}
2020/03/18 22:32:24 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:32:24 Segment &{, uncommented: 1 map[]}
2020/03/18 22:32:24 Segment &{commands 1 map[]}
2020/03/18 22:32:24 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:32:24 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:32:24 Segment &{usage 1 map[]}
2020/03/18 22:32:24 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:32:24 Segment &{AWS CLI 1 map[]}
2020/03/18 22:32:24 Segment &{Install 1 map[]}
2020/03/18 22:32:24 Segment &{Configure 1 map[]}
2020/03/18 22:32:24 Segment &{Profiles 1 map[]}
2020/03/18 22:32:24 Segment &{To use a Profile  1 map[]}
2020/03/18 22:32:24 Segment &{--profile <name> 9 map[]}
2020/03/18 22:32:24 Segment &{ in the command 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:32:24 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:32:24 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:32:24 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:32:24 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:32:24 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:32:24 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:32:24 Segment &{labs:  1 map[]}
2020/03/18 22:32:24 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:32:24 Segment &{labs:  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{Acronyms 1 map[]}
2020/03/18 22:32:24 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:24 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:24 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:24 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:24 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:24 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:24 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:24 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:24 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:24 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:24 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:24 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:24 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:24 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:24 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:24 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:24 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:24 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:24 Segment &{Protocols 1 map[]}
2020/03/18 22:32:24 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:24 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:24 Segment &{Services 1 map[]}
2020/03/18 22:32:24 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:32:24 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:32:24 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:32:24 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:32:24 Segment &{CloudTrail 1 map[]}
2020/03/18 22:32:24 Segment &{reveals account activity 1 map[]}
2020/03/18 22:32:24 Segment &{AWS Config 1 map[]}
2020/03/18 22:32:24 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:32:24 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:32:24 Segment &{Private Link 1 map[]}
2020/03/18 22:32:24 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:32:24 Segment &{AWS Shield 1 map[]}
2020/03/18 22:32:24 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:32:24 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:32:24 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:32:24 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:32:24 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:32:24 Segment &{Module 0 1 map[]}
2020/03/18 22:32:24 Segment &{Best Practicies 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:32:24 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:24 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:24 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:24 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:24 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:24 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:24 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:24 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:24 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:24 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:24 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:32:24 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:32:24 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:32:24 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:32:24 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:32:24 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:32:24 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:32:24 Segment &{no integration 1 map[]}
2020/03/18 22:32:24 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:32:24 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:32:24 Segment &{centralised control 1 map[]}
2020/03/18 22:32:24 Segment &{centralised control 1 map[]}
2020/03/18 22:32:24 Segment &{single bill 1 map[]}
2020/03/18 22:32:24 Segment &{single bill 1 map[]}
2020/03/18 22:32:24 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:24 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:24 Segment &{complex admin 1 map[]}
2020/03/18 22:32:24 Segment &{complex admin 1 map[]}
2020/03/18 22:32:24 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:32:24 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:32:24 Segment &{security 1 map[]}
2020/03/18 22:32:24 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:32:24 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:32:24 Segment &{ can be made. 1 map[]}
2020/03/18 22:32:24 Segment &{Policy based management 1 map[]}
2020/03/18 22:32:24 Segment &{Service control policy 5 map[]}
2020/03/18 22:32:24 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:32:24 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:32:24 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:32:24 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:32:24 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:32:24 Segment &{Resource groups 1 map[]}
2020/03/18 22:32:24 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:32:24 Segment &{Module 2 1 map[]}
2020/03/18 22:32:24 Segment &{VPC Peering 1 map[]}
2020/03/18 22:32:24 Segment &{EC2 1 map[]}
2020/03/18 22:32:24 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:32:24 Segment &{Create an  1 map[]}
2020/03/18 22:32:24 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:32:24 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:32:24 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:32:24 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:32:24 Segment &{VPN Connections 1 map[]}
2020/03/18 22:32:24 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:32:24 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:32:24 Segment &{BGP 1 map[]}
2020/03/18 22:32:24 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:32:24 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:32:24 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:32:24 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:32:24 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:32:24 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:32:24 Segment &{Scaling 1 map[]}
2020/03/18 22:32:24 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:32:24 Segment &{Lookup 1 map[]}
2020/03/18 22:32:24 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:24 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:24 Segment &{Base64 1 map[]}
2020/03/18 22:32:24 Segment &{to binary 1 map[]}
2020/03/18 22:32:24 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:32:24 Segment &{bash 1 map[]}
2020/03/18 22:32:24 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:32:24 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{networksetup 1 map[]}
2020/03/18 22:32:24 Segment &{configuring network settings 1 map[]}
2020/03/18 22:32:24 Segment &{logging 1 map[]}
2020/03/18 22:32:24 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:24 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:24 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:24 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:24 Segment &{shebang 1 map[]}
2020/03/18 22:32:24 Segment &{variable 1 map[]}
2020/03/18 22:32:24 Segment &{special variables 5 map[]}
2020/03/18 22:32:24 Segment &{chmod 1 map[]}
2020/03/18 22:32:24 Segment &{numerical 5 map[]}
2020/03/18 22:32:24 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:32:24 Segment &{homebrew 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:32:24 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{list packages: 1 map[]}
2020/03/18 22:32:24 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:32:24 Segment &{Browserstack 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:32:24 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:24 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:32:24 Segment &{This requires you have the  1 map[]}
2020/03/18 22:32:24 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:32:24 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:32:24 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:32:24 Segment &{c 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:32:24 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:32:24 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:32:24 Segment &{; 1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{; 1 map[]}
2020/03/18 22:32:24 Segment &{basics 1 map[]}
2020/03/18 22:32:24 Segment &{native methods 1 map[]}
2020/03/18 22:32:24 Segment &{stdio 1 map[]}
2020/03/18 22:32:24 Segment &{import 5 map[]}
2020/03/18 22:32:24 Segment &{printf 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{scanf 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{fgets 5 map[]}
2020/03/18 22:32:24 Segment &{fputs 5 map[]}
2020/03/18 22:32:24 Segment &{puts 5 map[]}
2020/03/18 22:32:24 Segment &{dynamic memory 1 map[]}
2020/03/18 22:32:24 Segment &{malloc 5 map[]}
2020/03/18 22:32:24 Segment &{memcpy 5 map[]}
2020/03/18 22:32:24 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:32:24 Segment &{building 1 map[]}
2020/03/18 22:32:24 Segment &{compile and link 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{compile 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{linking 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:32:24 Segment &{libraries 1 map[]}
2020/03/18 22:32:24 Segment &{static 5 map[]}
2020/03/18 22:32:24 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:32:24 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:32:24 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:32:24 Segment &{gives you the file  1 map[]}
2020/03/18 22:32:24 Segment &{libname.a 9 map[]}
2020/03/18 22:32:24 Segment &{list files in lib 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:32:24 Segment &{camel 1 map[]}
2020/03/18 22:32:24 Segment &{testing 1 map[]}
2020/03/18 22:32:24 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:32:24 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:32:24 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:32:24 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:32:24 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:32:24 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:32:24 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:32:24 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:32:24 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:32:24 Segment &{systemctl 9 map[]}
2020/03/18 22:32:24 Segment &{ rather than  1 map[]}
2020/03/18 22:32:24 Segment &{service 9 map[]}
2020/03/18 22:32:24 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:32:24 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:32:24 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:32:24 Segment &{): 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:32:24 Segment &{More info here:  1 map[]}
2020/03/18 22:32:24 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:32:24 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:32:24 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:32:24 Segment &{certs 1 map[]}
2020/03/18 22:32:24 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:24 Segment &{cert.p12 5 map[]}
2020/03/18 22:32:24 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:24 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:24 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:24 Segment &{certificate.pem 5 map[]}
2020/03/18 22:32:24 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:24 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:32:24 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:24 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:32:24 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{create PEM 1 map[]}
2020/03/18 22:32:24 Segment &{Or with no target password 1 map[]}
2020/03/18 22:32:24 Segment &{Chrome issue 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{svn issue 1 map[]}
2020/03/18 22:32:24 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:32:24 Segment &{Hi all, 1 map[]}
2020/03/18 22:32:24 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:32:24 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:32:24 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:32:24 Segment &{google structured data 1 map[]}
2020/03/18 22:32:24 Segment &{claim review 1 map[]}
2020/03/18 22:32:24 Segment &{required fields 5 map[]}
2020/03/18 22:32:24 Segment &{reviewRating 1 map[]}
2020/03/18 22:32:24 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:32:24 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:32:24 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:32:24 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:32:24 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:32:24 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:32:24 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:32:24 Segment &{what we’re missing 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:24 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:24 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:24 Segment &{[x] url 1 map[]}
2020/03/18 22:32:24 Segment &{[x] url 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:24 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] type 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] name 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:24 Segment &{[x] type 1 map[]}
2020/03/18 22:32:24 Segment &{[x] type 1 map[]}
2020/03/18 22:32:24 Segment &{[x] name 1 map[]}
2020/03/18 22:32:24 Segment &{[x] name 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:24 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:24 Segment &{case examples 1 map[]}
2020/03/18 22:32:24 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:32:24 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:32:24 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:32:24 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:32:24 Segment &{coffee script 1 map[]}
2020/03/18 22:32:24 Segment &{functions 1 map[]}
2020/03/18 22:32:24 Segment &{With default values: 1 map[]}
2020/03/18 22:32:24 Segment &{objects 1 map[]}
2020/03/18 22:32:24 Segment &{classes 1 map[]}
2020/03/18 22:32:24 Segment &{splats 1 map[]}
2020/03/18 22:32:24 Segment &{comprehensions 1 map[]}
2020/03/18 22:32:24 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:32:24 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:32:24 Segment &{create stack 1 map[]}
2020/03/18 22:32:24 Segment &{deploy 1 map[]}
2020/03/18 22:32:24 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:32:24 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:32:24 Segment &{curl 1 map[]}
2020/03/18 22:32:24 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:32:24 Segment &{cert 1 map[]}
2020/03/18 22:32:24 Segment &{curl with cert 1 map[]}
2020/03/18 22:32:24 Segment &{with response headers: 1 map[]}
2020/03/18 22:32:24 Segment &{output 1 map[]}
2020/03/18 22:32:24 Segment &{Write output to file 1 map[]}
2020/03/18 22:32:24 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:32:24 Segment &{curses 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:32:24 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:32:24 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{compile 5 map[]}
2020/03/18 22:32:24 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:32:24 Segment &{setup 1 map[]}
2020/03/18 22:32:24 Segment &{screen 1 map[]}
2020/03/18 22:32:24 Segment &{screen dump 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{printing 1 map[]}
2020/03/18 22:32:24 Segment &{output 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{attributes 1 map[]}
2020/03/18 22:32:24 Segment &{attribute options 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{colours 1 map[]}
2020/03/18 22:32:24 Segment &{colours 5 map[]}
2020/03/18 22:32:24 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:32:24 Segment &{reading 1 map[]}
2020/03/18 22:32:24 Segment &{keys constants 5 map[]}
2020/03/18 22:32:24 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:32:24 Segment &{mouse 1 map[]}
2020/03/18 22:32:24 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:32:24 Segment &{MEVENT 5 map[]}
2020/03/18 22:32:24 Segment &{ looks like this: 1 map[]}
2020/03/18 22:32:24 Segment &{key masks 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:32:24 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:32:24 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:32:24 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:32:24 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:24 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:32:24 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:32:24 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:24 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:32:24 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:24 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:32:24 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:24 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:32:24 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:24 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:32:24 Segment &{D 1 map[]}
2020/03/18 22:32:24 Segment &{## dmd 1 map[]}
2020/03/18 22:32:24 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:32:24 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:32:24 Segment &{Paradigms 1 map[]}
2020/03/18 22:32:24 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:24 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:24 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:24 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:24 Segment &{concurrency 1 map[]}
2020/03/18 22:32:24 Segment &{concurrency 1 map[]}
2020/03/18 22:32:24 Segment &{meta programming 1 map[]}
2020/03/18 22:32:24 Segment &{meta programming 1 map[]}
2020/03/18 22:32:24 Segment &{Tools 1 map[]}
2020/03/18 22:32:24 Segment &{dmd 1 map[]}
2020/03/18 22:32:24 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:32:24 Segment &{Libraries 1 map[]}
2020/03/18 22:32:24 Segment &{Phobos 1 map[]}
2020/03/18 22:32:24 Segment &{Offical D library 1 map[]}
2020/03/18 22:32:24 Segment &{stl 1 map[]}
2020/03/18 22:32:24 Segment &{Resources 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:32:24 Segment &{conf:  1 map[]}
2020/03/18 22:32:24 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:32:24 Segment &{conf:  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:32:24 Segment &{lang:  1 map[]}
2020/03/18 22:32:24 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:32:24 Segment &{lang:  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:24 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:24 Segment &{Types and Operators 1 map[]}
2020/03/18 22:32:24 Segment &{Integral Types 1 map[]}
2020/03/18 22:32:24 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{16 bit 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{8 bit types 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{conversions 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{non decimal 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{floating points 1 map[]}
2020/03/18 22:32:24 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:32:24 Segment &{dagger 1 map[]}
2020/03/18 22:32:24 Segment &{annotations 1 map[]}
2020/03/18 22:32:24 Segment &{provider annotation 1 map[]}
2020/03/18 22:32:24 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:32:24 Segment &{docker 1 map[]}
2020/03/18 22:32:24 Segment &{introduction 1 map[]}
2020/03/18 22:32:24 Segment &{5 core products: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{supporting products: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{hypervisors 1 map[]}
2020/03/18 22:32:24 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{namespaces 5 map[]}
2020/03/18 22:32:24 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:32:24 Segment &{installation 1 map[]}
2020/03/18 22:32:24 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:32:24 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:32:24 Segment &{setup 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:32:24 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:32:24 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:32:24 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{$ docker version 1 map[]}
2020/03/18 22:32:24 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:32:24 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:32:24 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:32:24 Segment &{// this is the vm 1 map[]}
2020/03/18 22:32:24 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:32:24 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine start  1 map[]}
2020/03/18 22:32:24 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:32:24 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:32:24 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:32:24 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:32:24 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:32:24 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:32:24 Segment &{tagging 1 map[]}
2020/03/18 22:32:24 Segment &{images 5 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{containers 5 map[]}
2020/03/18 22:32:24 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:24 Segment &{building 1 map[]}
2020/03/18 22:32:24 Segment &{Each  1 map[]}
2020/03/18 22:32:24 Segment &{layer 5 map[]}
2020/03/18 22:32:24 Segment &{ in an image is  1 map[]}
2020/03/18 22:32:24 Segment &{read only 5 map[]}
2020/03/18 22:32:24 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:32:24 Segment &{writeable layer 5 map[]}
2020/03/18 22:32:24 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:32:24 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:32:24 Segment &{build a new image from a  1 map[]}
2020/03/18 22:32:24 Segment &{build context 5 map[]}
2020/03/18 22:32:24 Segment &{running [run] 1 map[]}
2020/03/18 22:32:24 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:32:24 Segment &{default command 5 map[]}
2020/03/18 22:32:24 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:32:24 Segment &{stop a container 1 map[]}
2020/03/18 22:32:24 Segment &{tagging 1 map[]}
2020/03/18 22:32:24 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:32:24 Segment &{containers 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{container 5 map[]}
2020/03/18 22:32:24 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:32:24 Segment &{view containers 1 map[]}
2020/03/18 22:32:24 Segment &{run a container 1 map[]}
2020/03/18 22:32:24 Segment &{save a change: 1 map[]}
2020/03/18 22:32:24 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:32:24 Segment &{inspect 1 map[]}
2020/03/18 22:32:24 Segment &{management 1 map[]}
2020/03/18 22:32:24 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:32:24 Segment &{docker create 5 map[]}
2020/03/18 22:32:24 Segment &{ command 1 map[]}
2020/03/18 22:32:24 Segment &{To stop a container 1 map[]}
2020/03/18 22:32:24 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:32:24 Segment &{terminal access 1 map[]}
2020/03/18 22:32:24 Segment &{Use  1 map[]}
2020/03/18 22:32:24 Segment &{docker exec 5 map[]}
2020/03/18 22:32:24 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:32:24 Segment &{remove 1 map[]}
2020/03/18 22:32:24 Segment &{images 5 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{containers 5 map[]}
2020/03/18 22:32:24 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:24 Segment &{remove containers 1 map[]}
2020/03/18 22:32:24 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:32:24 Segment &{port mapping 1 map[]}
2020/03/18 22:32:24 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:32:24 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:32:24 Segment &{use  1 map[]}
2020/03/18 22:32:24 Segment &{EXPOSE 5 map[]}
2020/03/18 22:32:24 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:32:24 Segment &{hub 1 map[]}
2020/03/18 22:32:24 Segment &{login 1 map[]}
2020/03/18 22:32:24 Segment &{PUSH 5 map[]}
2020/03/18 22:32:24 Segment &{
push the new version 1 map[]}
2020/03/18 22:32:24 Segment &{PULL 5 map[]}
2020/03/18 22:32:24 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:32:24 Segment &{configuration 1 map[]}
2020/03/18 22:32:24 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:32:24 Segment &{to set this up: 1 map[]}
2020/03/18 22:32:24 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:32:24 Segment &{remote daemon 1 map[]}
2020/03/18 22:32:24 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:32:24 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:32:24 Segment &{-H 9 map[]}
2020/03/18 22:32:24 Segment &{ flag 1 map[]}
2020/03/18 22:32:24 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:32:24 Segment &{logging 1 map[]}
2020/03/18 22:32:24 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:32:24 Segment &{print all log for a container 1 map[]}
2020/03/18 22:32:24 Segment &{dockerfile 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{docker file 5 map[]}
2020/03/18 22:32:24 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:32:24 Segment &{Save it as  1 map[]}
2020/03/18 22:32:24 Segment &{Dockerfile 9 map[]}
2020/03/18 22:32:24 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:32:24 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:32:24 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:32:24 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:32:24 Segment &{instructions 1 map[]}
2020/03/18 22:32:24 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:32:24 Segment &{FROM 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:32:24 Segment &{RUN 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:32:24 Segment &{ADD 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:32:24 Segment &{CMD 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{override the default command 1 map[]}
2020/03/18 22:32:24 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:32:24 Segment &{running this: 1 map[]}
2020/03/18 22:32:24 Segment &{ENV 5 map[]}
2020/03/18 22:32:24 Segment &{set environment variables 1 map[]}
2020/03/18 22:32:24 Segment &{VOLUME 5 map[]}
2020/03/18 22:32:24 Segment &{specific a volume 1 map[]}
2020/03/18 22:32:24 Segment &{build context 1 map[]}
2020/03/18 22:32:24 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:32:24 Segment &{volumes 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{volume 5 map[]}
2020/03/18 22:32:24 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{simple volume 5 map[]}
2020/03/18 22:32:24 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:32:24 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:32:24 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:32:24 Segment &{host volumes 5 map[]}
2020/03/18 22:32:24 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:32:24 Segment &{overwritten 3 map[]}
2020/03/18 22:32:24 Segment &{named volumes 5 map[]}
2020/03/18 22:32:24 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:32:24 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:32:24 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:32:24 Segment &{dangling volumes 1 map[]}
2020/03/18 22:32:24 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:32:24 Segment &{networking 1 map[]}
2020/03/18 22:32:24 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:32:24 Segment &{list networks: 1 map[]}
2020/03/18 22:32:24 Segment &{create a network 1 map[]}
2020/03/18 22:32:24 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:32:24 Segment &{use a network: 1 map[]}
2020/03/18 22:32:24 Segment &{inspect network: 1 map[]}
2020/03/18 22:32:24 Segment &{remove a network 1 map[]}
2020/03/18 22:32:24 Segment &{network types 1 map[]}
2020/03/18 22:32:24 Segment &{NONE 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{no network 1 map[]}
2020/03/18 22:32:24 Segment &{HOST 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{shares the host network 1 map[]}
2020/03/18 22:32:24 Segment &{BRIDGE 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:32:24 Segment &{requires  linking: 1 map[]}
2020/03/18 22:32:24 Segment &{a  1 map[]}
2020/03/18 22:32:24 Segment &{container link 5 map[]}
2020/03/18 22:32:24 Segment &{continuous integration 1 map[]}
2020/03/18 22:32:24 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:32:24 Segment &{dockerhub 5 map[]}
2020/03/18 22:32:24 Segment &{ has an  1 map[]}
2020/03/18 22:32:24 Segment &{autobuild 5 map[]}
2020/03/18 22:32:24 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:32:24 Segment &{docker compose 1 map[]}
2020/03/18 22:32:24 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:32:24 Segment &{yaml 5 map[]}
2020/03/18 22:32:24 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:32:24 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:32:24 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:32:24 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:32:24 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:32:24 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:32:24 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:32:24 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:32:24 Segment &{eslint 1 map[]}
2020/03/18 22:32:24 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:32:24 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:32:24 Segment &{configuring 1 map[]}
2020/03/18 22:32:24 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:32:24 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:32:24 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:32:24 Segment &{config file 1 map[]}
2020/03/18 22:32:24 Segment &{.eslintrc 9 map[]}
2020/03/18 22:32:24 Segment &{rules 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:32:24 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:32:24 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:32:24 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:32:24 Segment &{gcc 1 map[]}
2020/03/18 22:32:24 Segment &{show include paths: 1 map[]}
2020/03/18 22:32:24 Segment &{show linker paths: 1 map[]}
2020/03/18 22:32:24 Segment &{options 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:32:24 Segment &{see  1 map[]}
2020/03/18 22:32:24 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:32:24 Segment &{compile 1 map[]}
2020/03/18 22:32:24 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:32:24 Segment &{-I 9 map[]}
2020/03/18 22:32:24 Segment &{ option. 1 map[]}
2020/03/18 22:32:24 Segment &{link 1 map[]}
2020/03/18 22:32:24 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:32:24 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:32:24 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:32:24 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:32:24 Segment &{-L 9 map[]}
2020/03/18 22:32:24 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:32:24 Segment &{-l 9 map[]}
2020/03/18 22:32:24 Segment &{ options 1 map[]}
2020/03/18 22:32:24 Segment &{e.g 1 map[]}
2020/03/18 22:32:24 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:32:24 Segment &{lib 9 map[]}
2020/03/18 22:32:24 Segment &{ prefix 1 map[]}
2020/03/18 22:32:24 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:32:24 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:32:24 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:32:24 Segment &{Security 1 map[]}
2020/03/18 22:32:24 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:32:24 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:32:24 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:32:24 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:32:24 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:32:24 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:32:24 Segment &{Handling personal data 1 map[]}
2020/03/18 22:32:24 Segment &{4 principles: 1 map[]}
2020/03/18 22:32:24 Segment &{1 Accountability 1 map[]}
2020/03/18 22:32:24 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:32:24 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:32:24 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:24 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:24 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:24 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:24 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:32:24 Segment &{2 Transparency 1 map[]}
2020/03/18 22:32:24 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:32:24 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:32:24 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:32:24 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:32:24 Segment &{4 Data portability 1 map[]}
2020/03/18 22:32:24 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:32:24 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:32:24 Segment &{Breach 1 map[]}
2020/03/18 22:32:24 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:32:24 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:32:24 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:32:24 Segment &{Summary 1 map[]}
2020/03/18 22:32:24 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:32:24 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:32:24 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:32:24 Segment &{Scams 1 map[]}
2020/03/18 22:32:24 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:32:24 Segment &{Phishing 1 map[]}
2020/03/18 22:32:24 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:32:24 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:32:24 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:24 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:24 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:24 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:24 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:24 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:24 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:24 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:24 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:24 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:24 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:24 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:24 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:32:24 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:32:24 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:32:24 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:32:24 Segment &{Passwords 1 map[]}
2020/03/18 22:32:24 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:32:24 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:32:24 Segment &{Do’s 1 map[]}
2020/03/18 22:32:24 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:24 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:24 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:24 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:24 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:24 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:24 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:24 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:24 Segment &{Dont’s 1 map[]}
2020/03/18 22:32:24 Segment &{write them down 1 map[]}
2020/03/18 22:32:24 Segment &{write them down 1 map[]}
2020/03/18 22:32:24 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:24 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:24 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:24 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:24 Segment &{share the network password 1 map[]}
2020/03/18 22:32:24 Segment &{share the network password 1 map[]}
2020/03/18 22:32:24 Segment &{Email 1 map[]}
2020/03/18 22:32:24 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Handling Data 1 map[]}
2020/03/18 22:32:24 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:32:24 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:32:24 Segment &{This is known as  1 map[]}
2020/03/18 22:32:24 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:32:24 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:32:24 Segment &{PUBLIC 5 map[]}
2020/03/18 22:32:24 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:32:24 Segment &{PROTECTED 5 map[]}
2020/03/18 22:32:24 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:32:24 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:32:24 Segment &{Offline Security 1 map[]}
2020/03/18 22:32:24 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:32:24 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:32:24 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:32:24 Segment &{Help 1 map[]}
2020/03/18 22:32:24 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:32:24 Segment &{24 1 map[]}
2020/03/18 22:32:24 Segment &{⁄ 1 map[]}
2020/03/18 22:32:24 Segment &{7 1 map[]}
2020/03/18 22:32:24 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:32:24 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:32:24 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:32:24 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:32:24 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:32:24 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:32:24 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:32:24 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:32:24 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{fixing  1 map[]}
2020/03/18 22:32:24 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:24 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:32:24 Segment &{fixing  1 map[]}
2020/03/18 22:32:24 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:24 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:32:24 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:32:24 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:32:24 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:32:24 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:32:24 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:32:24 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:32:24 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:24 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:24 Segment &{specific folder 5 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:32:24 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:24 Segment &{specific folder 5 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{run:
 1 map[]}
2020/03/18 22:32:24 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:24 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:24 Segment &{run:
 1 map[]}
2020/03/18 22:32:24 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:24 Segment &{run:
 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:32:24 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{referring to: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{last commits  1 map[]}
2020/03/18 22:32:24 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:24 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{referring to: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{last commits  1 map[]}
2020/03/18 22:32:24 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:24 Segment &{last commits  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:24 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:24 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:32:24 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:32:24 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:32:24 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:24 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:24 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:32:24 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:32:24 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:32:24 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{or 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:32:24 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{or 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:24 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:24 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:24 Segment &{
”` 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:24 Segment &{
”` 1 map[]}
2020/03/18 22:32:24 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:24 Whaaat? br
2020/03/18 22:32:24 Segment &{
”` 1 map[]}
2020/03/18 22:32:24 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:32:24 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:32:24 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:32:24 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:32:24 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{delete tag 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:32:24 Segment &{delete tag 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git push --tags
 9 map[]}
2020/03/18 22:32:24 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:32:24 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:32:24 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:32:24 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:32:24 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:24 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list  1 map[]}
2020/03/18 22:32:24 Segment &{actual 5 map[]}
2020/03/18 22:32:24 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:32:24 Segment &{list  1 map[]}
2020/03/18 22:32:24 Segment &{actual 5 map[]}
2020/03/18 22:32:24 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch -r
 9 map[]}
2020/03/18 22:32:24 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch -l
 9 map[]}
2020/03/18 22:32:24 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:32:24 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:32:24 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:32:24 Segment &{git 1 map[]}
2020/03/18 22:32:24 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:32:24 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:32:24 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:32:24 Segment &{diff 1 map[]}
2020/03/18 22:32:24 Segment &{options 1 map[]}
2020/03/18 22:32:24 Segment &{stat (  1 map[]}
2020/03/18 22:32:24 Segment &{--stat 9 map[]}
2020/03/18 22:32:24 Segment &{ ) 1 map[]}
2020/03/18 22:32:24 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:32:24 Segment &{clone 1 map[]}
2020/03/18 22:32:24 Segment &{push 1 map[]}
2020/03/18 22:32:24 Segment &{branch 1 map[]}
2020/03/18 22:32:24 Segment &{list §branches: 1 map[]}
2020/03/18 22:32:24 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:32:24 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:32:24 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:32:24 Segment &{remote 1 map[]}
2020/03/18 22:32:24 Segment &{config 1 map[]}
2020/03/18 22:32:24 Segment &{file located at  1 map[]}
2020/03/18 22:32:24 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{link 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:32:24 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:32:24 Segment &{reith 1 map[]}
2020/03/18 22:32:24 Segment &{setup 1 map[]}
2020/03/18 22:32:24 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:24 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:32:24 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:24 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:32:24 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:24 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:32:24 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{and some more
 1 map[]}
2020/03/18 22:32:24 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:32:24 Segment &{and some more
 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:32:24 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:32:24 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:32:24 Segment &{view it: 1 map[]}
2020/03/18 22:32:24 Segment &{set it: 1 map[]}
2020/03/18 22:32:24 Segment &{unset it: 1 map[]}
2020/03/18 22:32:24 Segment &{add it: 1 map[]}
2020/03/18 22:32:24 Segment &{alias 1 map[]}
2020/03/18 22:32:24 Segment &{make an alias: 1 map[]}
2020/03/18 22:32:24 Segment &{grep 1 map[]}
2020/03/18 22:32:24 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:32:24 Segment &{stash 1 map[]}
2020/03/18 22:32:24 Segment &{add and pop 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{list 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{delete 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{view 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{github 1 map[]}
2020/03/18 22:32:24 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:32:24 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:32:24 Segment &{hungarian notation 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:32:24 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:32:24 Segment &{lint 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:32:24 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:32:24 Segment &{gnuplot 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:32:24 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:32:24 Segment &{## install 1 map[]}
2020/03/18 22:32:24 Segment &{usage 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:32:24 Segment &{grep 1 map[]}
2020/03/18 22:32:24 Segment &{options 1 map[]}
2020/03/18 22:32:24 Segment &{invert match 5 map[]}
2020/03/18 22:32:24 Segment &{context 5 map[]}
2020/03/18 22:32:24 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:32:24 Segment &{Grunt 1 map[]}
2020/03/18 22:32:24 Segment &{Gruntfile 1 map[]}
2020/03/18 22:32:24 Segment &{Template  1 map[]}
2020/03/18 22:32:24 Segment &{Gruntfile 9 map[]}
2020/03/18 22:32:24 Segment &{ with  1 map[]}
2020/03/18 22:32:24 Segment &{eslint 9 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{jasmine 9 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{babel 9 map[]}
2020/03/18 22:32:24 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:32:24 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{or 1 map[]}
2020/03/18 22:32:24 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:32:24 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:32:24 Segment &{install mongo script 1 map[]}
2020/03/18 22:32:24 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:32:24 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:32:24 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:32:24 Segment &{from Anthony: 1 map[]}
2020/03/18 22:32:24 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:32:24 Segment &{Jasmine 1 map[]}
2020/03/18 22:32:24 Segment &{js testing framework 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:32:24 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:32:24 Segment &{expectations 1 map[]}
2020/03/18 22:32:24 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:32:24 Segment &{or chain with a  1 map[]}
2020/03/18 22:32:24 Segment &{.not 9 map[]}
2020/03/18 22:32:24 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:32:24 Segment &{matchers 1 map[]}
2020/03/18 22:32:24 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:32:24 Segment &{libexec 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:32:24 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:32:24 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:32:24 Segment &{lsof 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:32:24 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:32:24 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:32:24 Segment &{check ports 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:32:24 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:32:24 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:32:24 Segment &{markdown 1 map[]}
2020/03/18 22:32:24 Segment &{lists 1 map[]}
2020/03/18 22:32:24 Segment &{bulleted 5 map[]}
2020/03/18 22:32:24 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:32:24 Segment &{numbered 5 map[]}
2020/03/18 22:32:24 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:32:24 Segment &{checkbox 5 map[]}
2020/03/18 22:32:24 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:24 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:24 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:24 Segment &{code 1 map[]}
2020/03/18 22:32:24 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:32:24 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:32:24 Segment &{links 1 map[]}
2020/03/18 22:32:24 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:32:24 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:32:24 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:32:24 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:32:24 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:32:24 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:32:24 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:24 Segment &{ or i can say  1 map[]}
2020/03/18 22:32:24 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:24 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:32:24 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:32:24 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:32:24 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:32:24 Segment &{header 3 1 map[]}
2020/03/18 22:32:24 Segment &{blah blah 1 map[]}
2020/03/18 22:32:24 Segment &{header 4 1 map[]}
2020/03/18 22:32:24 Segment &{blah blah 1 map[]}
2020/03/18 22:32:24 Segment &{header 5 1 map[]}
2020/03/18 22:32:24 Segment &{blah blah 1 map[]}
2020/03/18 22:32:24 Segment &{Alternatively: 1 map[]}
2020/03/18 22:32:24 Segment &{blah 1 map[]}
2020/03/18 22:32:24 Segment &{blah blah 1 map[]}
2020/03/18 22:32:24 Segment &{code 1 map[]}
2020/03/18 22:32:24 Segment &{unmarked 1 map[]}
2020/03/18 22:32:24 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:32:24 Segment &{### scala 1 map[]}
2020/03/18 22:32:24 Segment &{### java 1 map[]}
2020/03/18 22:32:24 Segment &{inline formatting 1 map[]}
2020/03/18 22:32:24 Segment &{you can make string  1 map[]}
2020/03/18 22:32:24 Segment &{bold 5 map[]}
2020/03/18 22:32:24 Segment &{ like that or  1 map[]}
2020/03/18 22:32:24 Segment &{like this 5 map[]}
2020/03/18 22:32:24 Segment &{ if you like 1 map[]}
2020/03/18 22:32:24 Segment &{you can also make  1 map[]}
2020/03/18 22:32:24 Segment &{italics 3 map[]}
2020/03/18 22:32:24 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:32:24 Segment &{single underlines 3 map[]}
2020/03/18 22:32:24 Segment &{ if you prefer 1 map[]}
2020/03/18 22:32:24 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:32:24 Segment &{indented literals 1 map[]}
2020/03/18 22:32:24 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:32:24 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:32:24 Segment &{Maven 1 map[]}
2020/03/18 22:32:24 Segment &{command line 1 map[]}
2020/03/18 22:32:24 Segment &{options 1 map[]}
2020/03/18 22:32:24 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:32:24 Segment &{mongo 1 map[]}
2020/03/18 22:32:24 Segment &{To run the server: 1 map[]}
2020/03/18 22:32:24 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:32:24 Segment &{organisation 1 map[]}
2020/03/18 22:32:24 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:24 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:24 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:24 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:24 Segment &{config 1 map[]}
2020/03/18 22:32:24 Segment &{default config 3 map[]}
2020/03/18 22:32:24 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:32:24 Segment &{scale-grid 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:32:24 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:32:24 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:32:24 Segment &{crendentials 1 map[]}
2020/03/18 22:32:24 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:24 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:24 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:24 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:24 Segment &{ssh access 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:24 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:32:24 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{command line 1 map[]}
2020/03/18 22:32:24 Segment &{querying 1 map[]}
2020/03/18 22:32:24 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:32:24 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:32:24 Segment &{query selectors 1 map[]}
2020/03/18 22:32:24 Segment &{comparison 1 map[]}
2020/03/18 22:32:24 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:24 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:24 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:24 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:24 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:24 Segment &{$or 1 map[]}
2020/03/18 22:32:24 Segment &{$or 1 map[]}
2020/03/18 22:32:24 Segment &{$and 1 map[]}
2020/03/18 22:32:24 Segment &{$and 1 map[]}
2020/03/18 22:32:24 Segment &{$not 1 map[]}
2020/03/18 22:32:24 Segment &{$not 1 map[]}
2020/03/18 22:32:24 Segment &{$nor 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{element 1 map[]}
2020/03/18 22:32:24 Segment &{$nor 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{element 1 map[]}
2020/03/18 22:32:24 Segment &{$exists: 1 map[]}
2020/03/18 22:32:24 Segment &{$exists: 1 map[]}
2020/03/18 22:32:24 Segment &{$type: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{evaluation 1 map[]}
2020/03/18 22:32:24 Segment &{$type: 1 map[]}
2020/03/18 22:32:24 Segment &{

 1 map[]}
2020/03/18 22:32:24 Segment &{evaluation 1 map[]}
2020/03/18 22:32:24 Segment &{$mod: 1 map[]}
2020/03/18 22:32:24 Segment &{$mod: 1 map[]}
2020/03/18 22:32:24 Segment &{$regex: 1 map[]}
2020/03/18 22:32:24 Segment &{$regex: 1 map[]}
2020/03/18 22:32:24 Segment &{$text: 1 map[]}
2020/03/18 22:32:24 Segment &{$text: 1 map[]}
2020/03/18 22:32:24 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:24 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:24 Segment &{find 3 map[]}
2020/03/18 22:32:24 Segment &{sort 3 map[]}
2020/03/18 22:32:24 Segment &{meta 1 map[]}
2020/03/18 22:32:24 Segment &{Explain a query 1 map[]}
2020/03/18 22:32:24 Segment &{Show all indexes 1 map[]}
2020/03/18 22:32:24 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:32:24 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:32:24 Segment &{aggregation 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:32:24 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:32:24 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:32:24 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:32:24 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:24 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:24 Segment &{get some basic information 1 map[]}
2020/03/18 22:32:24 Segment &{tools to say hi 1 map[]}
2020/03/18 22:32:24 Segment &{db.version() 1 map[]}
2020/03/18 22:32:24 Segment &{db.version() 1 map[]}
2020/03/18 22:32:24 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:24 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:24 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:24 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:24 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:24 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:24 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:24 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:24 Segment &{showing 1 map[]}
2020/03/18 22:32:24 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:24 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:24 Segment &{show collections 1 map[]}
2020/03/18 22:32:24 Segment &{show collections 1 map[]}
2020/03/18 22:32:24 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:24 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:24 Segment &{more detail 1 map[]}
2020/03/18 22:32:24 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:32:24 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:32:24 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:32:24 Segment &{Set log level: 1 map[]}
2020/03/18 22:32:24 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:32:24 Segment &{mtools 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:32:24 Segment &{On gitHub -  1 map[]}
2020/03/18 22:32:24 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:32:24 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:32:24 Segment &{mongostat 1 map[]}
2020/03/18 22:32:24 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:32:24 Segment &{flaky networks 1 map[]}
2020/03/18 22:32:24 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:32:24 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:24 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:24 Segment &{primary failover 1 map[]}
2020/03/18 22:32:24 Segment &{primary failover 1 map[]}
2020/03/18 22:32:24 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:24 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:24 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:24 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:24 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:32:24 Segment &{transactions 1 map[]}
2020/03/18 22:32:24 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:32:24 Segment &{drivers 1 map[]}
2020/03/18 22:32:24 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:32:24 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:32:24 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:32:24 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:32:24 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:32:24 Segment &{retry stategies 1 map[]}
2020/03/18 22:32:24 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:24 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:24 Whaaat? br
2020/03/18 22:32:24 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:24 Whaaat? br
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:32:24 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:32:24 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:32:24 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:32:24 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:32:24 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:32:24 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:32:24 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:24 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:24 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:32:24 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:32:24 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:32:24 Segment &{black pipe testing 1 map[]}
2020/03/18 22:32:24 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:32:24 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:32:24 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:32:24 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:32:24 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:32:24 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:32:24 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:32:24 Segment &{hadoop 1 map[]}
2020/03/18 22:32:24 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:24 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:24 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:24 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:24 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:24 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:24 Segment &{great references 1 map[]}
2020/03/18 22:32:24 Segment &{great references 1 map[]}
2020/03/18 22:32:24 Segment &{requisites 1 map[]}
2020/03/18 22:32:24 Segment &{low latency 1 map[]}
2020/03/18 22:32:24 Segment &{low latency 1 map[]}
2020/03/18 22:32:24 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:24 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:24 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:24 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:24 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:24 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:24 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:32:24 Segment &{4. spark 1 map[]}
2020/03/18 22:32:24 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:32:24 Segment &{
on maven 1 map[]}
2020/03/18 22:32:24 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:32:24 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:32:24 Segment &{connecting to spark 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:32:24 Segment &{Mozart 1 map[]}
2020/03/18 22:32:24 Segment &{Urls: 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:32:24 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{development 1 map[]}
2020/03/18 22:32:24 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:32:24 Segment &{and do this: 1 map[]}
2020/03/18 22:32:24 Segment &{page configs 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:32:24 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:24 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:32:24 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{ngrok 1 map[]}
2020/03/18 22:32:24 Segment &{install 1 map[]}
2020/03/18 22:32:24 Segment &{run 1 map[]}
2020/03/18 22:32:24 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:32:24 Segment &{page configs 1 map[]}
2020/03/18 22:32:24 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:32:24 Segment &{mtools 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:24 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:24 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:32:24 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:32:24 Segment &{mtools 5 map[]}
2020/03/18 22:32:24 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:32:24 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:32:24 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:32:24 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:32:24 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:32:24 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:32:24 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:32:24 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:32:24 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:32:24 Segment &{  1 map[]}
2020/03/18 22:32:24 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:32:24 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:32:24 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:32:24 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:32:24 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:32:24 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:32:24 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:32:24 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:32:24 Segment &{Recent Changes 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:32:24 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:32:24 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:32:24 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:32:24 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:32:24 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:32:24 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:32:24 Segment &{ for instructions. 1 map[]}
2020/03/18 22:32:24 Segment &{Disclaimer 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:32:24 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:32:24 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:32:24 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:32:24 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:32:24 Segment &{ section here on github. 1 map[]}
2020/03/18 22:32:24 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:32:24 Segment &{mustache 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:32:24 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{conditionals: 5 map[]}
2020/03/18 22:32:24 Segment &{iterations: 5 map[]}
2020/03/18 22:32:24 Segment &{partials: 5 map[]}
2020/03/18 22:32:24 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:32:24 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:32:24 Segment &{Node 1 map[]}
2020/03/18 22:32:24 Segment &{nvm 1 map[]}
2020/03/18 22:32:24 Segment &{Node version manager 1 map[]}
2020/03/18 22:32:24 Segment &{versions 1 map[]}
2020/03/18 22:32:24 Segment &{found in 1 map[]}
2020/03/18 22:32:24 Segment &{alias 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:32:24 Segment &{package managers 1 map[]}
2020/03/18 22:32:24 Segment &{npm 1 map[]}
2020/03/18 22:32:24 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:32:24 Segment &{proxy settings 1 map[]}
2020/03/18 22:32:24 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:32:24 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:32:24 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{apm 1 map[]}
2020/03/18 22:32:24 Segment &{Atom package manager 1 map[]}
2020/03/18 22:32:24 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:32:24 Segment &{php 1 map[]}
2020/03/18 22:32:24 Segment &{pluralsight 1 map[]}
2020/03/18 22:32:24 Segment &{constants 1 map[]}
2020/03/18 22:32:24 Segment &{define: 1 map[]}
2020/03/18 22:32:24 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:32:24 Segment &{existence check 1 map[]}
2020/03/18 22:32:24 Segment &{constants: 5 map[]}
2020/03/18 22:32:24 Segment &{variables 5 map[]}
2020/03/18 22:32:24 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:32:24 Segment &{functions 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{type check 1 map[]}
2020/03/18 22:32:24 Segment &{function 1 map[]}
2020/03/18 22:32:24 Segment &{variable functions: 1 map[]}
2020/03/18 22:32:24 Segment &{make a variable global 5 map[]}
2020/03/18 22:32:24 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:32:24 Segment &{strings 1 map[]}
2020/03/18 22:32:24 Segment &{functions 1 map[]}
2020/03/18 22:32:24 Segment &{docker 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:32:24 Segment &{as per the  1 map[]}
2020/03/18 22:32:24 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:32:24 Segment &{ explanation.. 1 map[]}
2020/03/18 22:32:24 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:32:24 Segment &{project 9 map[]}
2020/03/18 22:32:24 Segment &{ folder, with a  1 map[]}
2020/03/18 22:32:24 Segment &{src 9 map[]}
2020/03/18 22:32:24 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:32:24 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:32:24 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:32:24 Segment &{site.conf 9 map[]}
2020/03/18 22:32:24 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:32:24 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:32:24 Segment &{Run  1 map[]}
2020/03/18 22:32:24 Segment &{docker-compose up 9 map[]}
2020/03/18 22:32:24 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:32:24 Segment &{NOTE: 5 map[]}
2020/03/18 22:32:24 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:32:24 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:32:24 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:32:24 Segment &{site.conf 1 map[]}
2020/03/18 22:32:24 Segment &{cheatsheet 1 map[]}
2020/03/18 22:32:24 Segment &{strings 5 map[]}
2020/03/18 22:32:24 Segment &{date 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{arrays 5 map[]}
2020/03/18 22:32:24 Segment &{numeric example 5 map[]}
2020/03/18 22:32:24 Segment &{functions 5 map[]}
2020/03/18 22:32:24 Segment &{classes 5 map[]}
2020/03/18 22:32:24 Segment &{web 5 map[]}
2020/03/18 22:32:24 Segment &{array 1 map[]}
2020/03/18 22:32:24 Segment &{transform 1 map[]}
2020/03/18 22:32:24 Segment &{map 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{filter 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{reset 1 map[]}
2020/03/18 22:32:24 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:32:24 Segment &{strings 1 map[]}
2020/03/18 22:32:24 Segment &{explode 1 map[]}
2020/03/18 22:32:24 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:32:24 Segment &{example 1 map[]}
2020/03/18 22:32:24 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:32:24 Segment &{postgresql 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:32:24 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:32:24 Segment &{run the daemon: 1 map[]}
2020/03/18 22:32:24 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:32:24 Segment &{cli 1 map[]}
2020/03/18 22:32:24 Segment &{commands: 1 map[]}
2020/03/18 22:32:24 Segment &{snapshots 1 map[]}
2020/03/18 22:32:24 Segment &{take snapshot: 1 map[]}
2020/03/18 22:32:24 Segment &{restore: 1 map[]}
2020/03/18 22:32:24 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:32:24 Segment &{pw log 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:32:24 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:32:24 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:32:24 Segment &{] 1 map[]}
2020/03/18 22:32:24 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:24 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:24 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:24 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:24 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:24 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:24 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:24 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:24 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:24 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:24 Segment &{hints 1 map[]}
2020/03/18 22:32:24 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:24 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:24 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:24 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:24 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:24 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:24 Segment &{reset 1 map[]}
2020/03/18 22:32:24 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:32:24 Segment &{keys 1 map[]}
2020/03/18 22:32:24 Segment &{textual:  1 map[]}
2020/03/18 22:32:24 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:32:24 Segment &{textual:  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:32:24 Segment &{python 1 map[]}
2020/03/18 22:32:24 Segment &{getting it working 1 map[]}
2020/03/18 22:32:24 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:32:24 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:32:24 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:32:24 Segment &{ as follows: 1 map[]}
2020/03/18 22:32:24 Segment &{useful 1 map[]}
2020/03/18 22:32:24 Segment &{get openssl version 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:32:24 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:32:24 Segment &{user name 5 map[]}
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:32:24 Segment &{API Key 5 map[]}
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:32:24 Segment &{docker 1 map[]}
2020/03/18 22:32:24 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:32:24 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:32:24 Segment &{react 1 map[]}
2020/03/18 22:32:24 Segment &{state 1 map[]}
2020/03/18 22:32:24 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:32:24 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:24 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:24 Segment &{refs 1 map[]}
2020/03/18 22:32:24 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:32:24 Segment &{unique key 1 map[]}
2020/03/18 22:32:24 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:32:24 Segment &{key 9 map[]}
2020/03/18 22:32:24 Segment &{ item 1 map[]}
2020/03/18 22:32:24 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:32:24 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:32:24 Segment &{redis 1 map[]}
2020/03/18 22:32:24 Segment &{operations 1 map[]}
2020/03/18 22:32:24 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:32:24 Segment &{redis-cli 9 map[]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 Segment &{keys: 5 map[]}
2020/03/18 22:32:24 Segment &{z-range 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:32:24 Segment &{Regex 1 map[]}
2020/03/18 22:32:24 Segment &{group constructs 1 map[]}
2020/03/18 22:32:24 Segment &{lookahead 1 map[]}
2020/03/18 22:32:24 Segment &{positive lookahead 5 map[]}
2020/03/18 22:32:24 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:24 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:24 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:32:24 Segment &{negative lookahead 5 map[]}
2020/03/18 22:32:24 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:24 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:24 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:32:24 Segment &{lookbehind 1 map[]}
2020/03/18 22:32:24 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:32:24 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:24 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:24 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:32:24 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:32:24 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:24 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:24 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:32:24 Segment &{capturing 1 map[]}
2020/03/18 22:32:24 Segment &{non capturing group 5 map[]}
2020/03/18 22:32:24 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:32:24 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:32:24 Segment &{RPM 1 map[]}
2020/03/18 22:32:24 Segment &{sources 1 map[]}
2020/03/18 22:32:24 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{spec file 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:32:24 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:32:24 Segment &{variables 1 map[]}
2020/03/18 22:32:24 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:32:24 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:24 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{building 1 map[]}
2020/03/18 22:32:24 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:32:24 Segment &{You need to have  1 map[]}
2020/03/18 22:32:24 Segment &{rmpbuild 9 map[]}
2020/03/18 22:32:24 Segment &{ installed, so  1 map[]}
2020/03/18 22:32:24 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{Copy  1 map[]}
2020/03/18 22:32:24 Segment &{SOURCES 9 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{SPECS 9 map[]}
2020/03/18 22:32:24 Segment &{ to  1 map[]}
2020/03/18 22:32:24 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:32:24 Segment &{ and  1 map[]}
2020/03/18 22:32:24 Segment &{.../SPECS 9 map[]}
2020/03/18 22:32:24 Segment &{ respectively. 1 map[]}
2020/03/18 22:32:24 Segment &{list 1 map[]}
2020/03/18 22:32:24 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:32:24 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:24 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:32:24 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:32:24 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:32:24 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:32:24 Segment &{scalegrid 1 map[]}
2020/03/18 22:32:24 Segment &{command line access 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:32:24 Segment &{sed 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:32:24 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:32:24 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:32:24 Segment &{substitute (s) 1 map[]}
2020/03/18 22:32:24 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:32:24 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:32:24 Segment &{Selenium 1 map[]}
2020/03/18 22:32:24 Segment &{Webdrivers 1 map[]}
2020/03/18 22:32:24 Segment &{Capabilities 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:32:24 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:32:24 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:32:24 Segment &{Seyren 1 map[]}
2020/03/18 22:32:24 Segment &{Alerts API 1 map[]}
2020/03/18 22:32:24 Segment &{Get check alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:32:24 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:24 Segment &{Get alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Charts API 1 map[]}
2020/03/18 22:32:24 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Return png image 1 map[]}
2020/03/18 22:32:24 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:24 Segment &{Return png image 1 map[]}
2020/03/18 22:32:24 Segment &{Checks API 1 map[]}
2020/03/18 22:32:24 Segment &{Search checks 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:32:24 Segment &{See  1 map[]}
2020/03/18 22:32:24 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:32:24 Segment &{Create a check 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ POST 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ POST 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:32:24 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:32:24 Segment &{Get a check 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:24 Segment &{Update a check 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:32:24 Segment &{Delete a check 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:24 Segment &{Config API 1 map[]}
2020/03/18 22:32:24 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /config 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /config 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{Metrics API 1 map[]}
2020/03/18 22:32:24 Segment &{Get metric count 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ GET 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:32:24 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:32:24 Segment &{Create a subscription 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ POST 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ POST 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:32:24 Segment &{Update a subscription 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:24 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:24 Segment &{Test a subscription 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:24 Segment &{URL 5 map[]}
2020/03/18 22:32:24 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{Method 5 map[]}
2020/03/18 22:32:24 Segment &{ PUT 1 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Segment &{URL Params 5 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{Query Params 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Body 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{None 1 map[]}
2020/03/18 22:32:24 Segment &{Response 5 map[]}
2020/03/18 22:32:24 Whaaat? strong
2020/03/18 22:32:24 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:32:24 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:24 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:32:24 Segment &{Spring 1 map[]}
2020/03/18 22:32:24 Segment &{Context annotations 1 map[]}
2020/03/18 22:32:24 Segment &{xml 1 map[]}
2020/03/18 22:32:24 Segment &{in  1 map[]}
2020/03/18 22:32:24 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:32:24 Segment &{, add the following: 1 map[]}
2020/03/18 22:32:24 Segment &{Types 1 map[]}
2020/03/18 22:32:24 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:32:24 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:24 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:32:24 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:24 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:32:24 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:24 Segment &{@Autowired 9 map[]}
2020/03/18 22:32:24 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:24 Segment &{Java configuration 1 map[]}
2020/03/18 22:32:24 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:32:24 Segment &{use  1 map[]}
2020/03/18 22:32:24 Segment &{@Configuration 9 map[]}
2020/03/18 22:32:24 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:24 Segment &{use  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:24 Segment &{use  1 map[]}
2020/03/18 22:32:24 Segment &{@Bean 9 map[]}
2020/03/18 22:32:24 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:24 Segment &{use  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:32:24 Segment &{Autowiring 1 map[]}
2020/03/18 22:32:24 Segment &{add  1 map[]}
2020/03/18 22:32:24 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:32:24 Segment &{ annotation to your  1 map[]}
2020/03/18 22:32:24 Segment &{AppConfig 9 map[]}
2020/03/18 22:32:24 Segment &{ class 1 map[]}
2020/03/18 22:32:24 Segment &{Scope 1 map[]}
2020/03/18 22:32:24 Segment &{using scope: 1 map[]}
2020/03/18 22:32:24 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:32:24 Segment &{singleton 1 map[]}
2020/03/18 22:32:24 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:24 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:24 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:32:24 Segment &{prototype 1 map[]}
2020/03/18 22:32:24 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:24 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:24 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:32:24 Segment &{request 1 map[]}
2020/03/18 22:32:24 Segment &{“request” 1 map[]}
2020/03/18 22:32:24 Segment &{“request” 1 map[]}
2020/03/18 22:32:24 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:32:24 Segment &{session 1 map[]}
2020/03/18 22:32:24 Segment &{“session” 1 map[]}
2020/03/18 22:32:24 Segment &{“session” 1 map[]}
2020/03/18 22:32:24 Segment &{Lives per session 1 map[]}
2020/03/18 22:32:24 Segment &{global session 1 map[]}
2020/03/18 22:32:24 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:32:24 Segment &{Properties 1 map[]}
2020/03/18 22:32:24 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:32:24 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:32:24 Segment &{Annotate the value 1 map[]}
2020/03/18 22:32:24 Segment &{in  1 map[]}
2020/03/18 22:32:24 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:32:24 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:32:24 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:32:24 Segment &{UIViewController 1 map[]}
2020/03/18 22:32:24 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:32:24 Segment &{SKScene 1 map[]}
2020/03/18 22:32:24 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:32:24 Segment &{ssh 1 map[]}
2020/03/18 22:32:24 Segment &{ec2 logon 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:32:24 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:32:24 Segment &{setup 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:32:24 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:32:24 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:32:24 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:32:24 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:32:24 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:32:24 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:32:24 Segment &{To logon: 1 map[]}
2020/03/18 22:32:24 Segment &{To end: 1 map[]}
2020/03/18 22:32:24 Segment &{generate 1 map[]}
2020/03/18 22:32:24 Segment &{From the command line: 1 map[]}
2020/03/18 22:32:24 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:32:24 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:32:24 Segment &{view 1 map[]}
2020/03/18 22:32:24 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:32:24 Segment &{scp 1 map[]}
2020/03/18 22:32:24 Segment &{upload: 1 map[]}
2020/03/18 22:32:24 Segment &{download: 1 map[]}
2020/03/18 22:32:24 Segment &{Keys 1 map[]}
2020/03/18 22:32:24 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:32:24 Segment &{id2_rsa 9 map[]}
2020/03/18 22:32:24 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:32:24 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:32:24 Segment &{svn 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:32:24 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:32:24 Segment &{propset 1 map[]}
2020/03/18 22:32:24 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:32:24 Segment &{revert 1 map[]}
2020/03/18 22:32:24 Segment &{delete 1 map[]}
2020/03/18 22:32:24 Segment &{mkdir 1 map[]}
2020/03/18 22:32:24 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:32:24 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:32:24 Segment &{systemd 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:32:24 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{journalctl 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:32:24 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:32:24 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:32:24 Segment &{tar 1 map[]}
2020/03/18 22:32:24 Segment &{create 1 map[]}
2020/03/18 22:32:24 Segment &{unzip 1 map[]}
2020/03/18 22:32:24 Segment &{list files in tar 1 map[]}
2020/03/18 22:32:24 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:32:24 Segment &{tcp/ip 1 map[]}
2020/03/18 22:32:24 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:32:24 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:32:24 Segment &{Protocols 1 map[]}
2020/03/18 22:32:24 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{protocol stack 5 map[]}
2020/03/18 22:32:24 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{gateway 5 map[]}
2020/03/18 22:32:24 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:32:24 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:32:24 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:32:24 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:32:24 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:32:24 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:32:24 Segment &{Architecture 1 map[]}
2020/03/18 22:32:24 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:32:24 Segment &{DARPA 3 map[]}
2020/03/18 22:32:24 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:32:24 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:32:24 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{DARPA Model 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:32:24 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{one to one 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{one to one 1 map[]}
2020/03/18 22:32:24 Segment &{one to one 1 map[]}
2020/03/18 22:32:24 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:24 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:24 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:24 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:24 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{connectionless 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{connectionless 1 map[]}
2020/03/18 22:32:24 Segment &{connectionless 1 map[]}
2020/03/18 22:32:24 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:24 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:24 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{addressing 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{routing 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{addressing 1 map[]}
2020/03/18 22:32:24 Segment &{addressing 1 map[]}
2020/03/18 22:32:24 Segment &{routing 1 map[]}
2020/03/18 22:32:24 Segment &{routing 1 map[]}
2020/03/18 22:32:24 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:24 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:24 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:24 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:24 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:24 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:24 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:24 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:24 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:24 Segment &{Three way handshake 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:32:24 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:24 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:24 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:24 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:24 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:24 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:24 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:24 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:24 Segment &{IP Addresses 1 map[]}
2020/03/18 22:32:24 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:32:24 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:32:24 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:32:24 Segment &{The  1 map[]}
2020/03/18 22:32:24 Segment &{subnet mask 5 map[]}
2020/03/18 22:32:24 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:32:24 Segment &{255 9 map[]}
2020/03/18 22:32:24 Segment &{ and ending in  1 map[]}
2020/03/18 22:32:24 Segment &{0 9 map[]}
2020/03/18 22:32:24 Segment &{.  1 map[]}
2020/03/18 22:32:24 Segment &{255 9 map[]}
2020/03/18 22:32:24 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:32:24 Segment &{0 9 map[]}
2020/03/18 22:32:24 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. 1 map[]}
2020/03/18 22:32:24 Segment &{IP address = 1 map[]}
2020/03/18 22:32:24 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:24 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:32:24 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:32:24 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:32:24 Segment &{192.168.10 9 map[]}
2020/03/18 22:32:24 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:32:24 Segment &{1 9 map[]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 Segment &{to see ip info 1 map[]}
2020/03/18 22:32:24 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:32:24 Segment &{it sends an  1 map[]}
2020/03/18 22:32:24 Segment &{echo request 3 map[]}
2020/03/18 22:32:24 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:32:24 Segment &{man ping 9 map[]}
2020/03/18 22:32:24 Segment &{) 1 map[]}
2020/03/18 22:32:24 Segment &{Rules 1 map[]}
2020/03/18 22:32:24 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:32:24 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:32:24 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:32:24 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:32:24 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:32:24 Segment &{Classes 1 map[]}
2020/03/18 22:32:24 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:32:24 Whaaat? table
2020/03/18 22:32:24 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:32:24 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:32:24 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:32:24 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:32:24 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:24 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:24 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:24 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:24 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:24 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:24 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:24 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:24 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:32:24 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:32:24 Segment &{ (NAT). 1 map[]}
2020/03/18 22:32:24 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:32:24 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:32:24 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:32:24 Segment &{Internetworking 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{router 5 map[]}
2020/03/18 22:32:24 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:32:24 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:32:24 Segment &{router 5 map[]}
2020/03/18 22:32:24 Segment &{. This is  1 map[]}
2020/03/18 22:32:24 Segment &{internetworking 5 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{A  1 map[]}
2020/03/18 22:32:24 Segment &{default gateway 5 map[]}
2020/03/18 22:32:24 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:32:24 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:32:24 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:32:24 Segment &{Subnetting 5 map[]}
2020/03/18 22:32:24 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:32:24 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:32:24 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:32:24 Segment &{Solution is to use  1 map[]}
2020/03/18 22:32:24 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:32:24 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:32:24 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:32:24 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:32:24 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:32:24 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:32:24 Segment &{subnets 5 map[]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 Segment &{e.g.  1 map[]}
2020/03/18 22:32:24 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:32:24 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:32:24 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:32:24 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:32:24 Segment &{CIDR notation 5 map[]}
2020/03/18 22:32:24 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:32:24 Segment &{e.g.  1 map[]}
2020/03/18 22:32:24 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:24 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:32:24 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:32:24 Segment &{ can be better read as  1 map[]}
2020/03/18 22:32:24 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:32:24 Segment &{. The segment after the  1 map[]}
2020/03/18 22:32:24 Segment &{/ 9 map[]}
2020/03/18 22:32:24 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:32:24 Segment &{IPv6 1 map[]}
2020/03/18 22:32:24 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:32:24 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:32:24 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:32:24 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:32:24 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:32:24 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:24 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:32:24 Segment &{0 9 map[]}
2020/03/18 22:32:24 Segment &{s block with double  1 map[]}
2020/03/18 22:32:24 Segment &{:: 9 map[]}
2020/03/18 22:32:24 Segment &{, ie:  1 map[]}
2020/03/18 22:32:24 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:24 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:32:24 Segment &{todo 1 map[]}
2020/03/18 22:32:24 Segment &{lookup 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:32:24 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:24 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:32:24 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:24 Whaaat? a
2020/03/18 22:32:24 Segment &{projects 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:24 Segment &{logic 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:24 Segment &{note-worthy 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:24 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:24 Whaaat? br
2020/03/18 22:32:24 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:24 Segment &{:help | :h 9 map[]}
2020/03/18 22:32:24 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:24 Segment &{headers as tags 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:24 Segment &{bugs 1 map[]}
2020/03/18 22:32:24 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:24 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:24 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:24 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:24 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:24 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:24 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:24 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:24 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:24 Segment &{markdown [md] 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:24 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:24 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:24 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:24 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:24 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:24 Segment &{bugs 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:24 Segment &{cppbt 1 map[]}
2020/03/18 22:32:24 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:24 Segment &{
 1 map[]}
2020/03/18 22:32:24 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:24 Segment &{subnets 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:24 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:24 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:32:24 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:24 Segment &{ssl 1 map[]}
2020/03/18 22:32:24 Whaaat? ol
2020/03/18 22:32:24 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:32:24 Segment &{realpath 1 map[]}
2020/03/18 22:32:24 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:32:24 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:32:24 Segment &{Vagrant 1 map[]}
2020/03/18 22:32:24 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:32:24 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:32:24 Segment &{Installation 1 map[]}
2020/03/18 22:32:24 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:32:24 Segment &{Usage 1 map[]}
2020/03/18 22:32:24 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:32:24 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:32:24 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:32:24 Segment &{That’s it! 1 map[]}
2020/03/18 22:32:24 Segment &{Examples 1 map[]}
2020/03/18 22:32:24 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:32:24 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:32:24 Segment &{Vagrant version 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:32:24 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:32:24 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:32:24 Segment &{. 1 map[]}
2020/03/18 22:32:24 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:32:24 Segment &{vim 1 map[]}
2020/03/18 22:32:24 Segment &{commands 1 map[]}
2020/03/18 22:32:24 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:32:24 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:32:24 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:32:24 Segment &{In command mode: 1 map[]}
2020/03/18 22:32:24 Segment &{Saving 5 map[]}
2020/03/18 22:32:24 Segment &{:
+  1 map[]}
2020/03/18 22:32:24 Segment &{:wq 9 map[]}
2020/03/18 22:32:24 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:32:24 Segment &{:q! 9 map[]}
2020/03/18 22:32:24 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:32:24 Segment &{Editing 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{x 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete 1 map[]}
2020/03/18 22:32:24 Segment &{x 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete 1 map[]}
2020/03/18 22:32:24 Segment &{u 9 map[]}
2020/03/18 22:32:24 Segment &{ - undo 1 map[]}
2020/03/18 22:32:24 Segment &{u 9 map[]}
2020/03/18 22:32:24 Segment &{ - undo 1 map[]}
2020/03/18 22:32:24 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:24 Segment &{ - redo 1 map[]}
2020/03/18 22:32:24 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:24 Segment &{ - redo 1 map[]}
2020/03/18 22:32:24 Segment &{dw 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:24 Segment &{dw 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:24 Segment &{2w 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:24 Segment &{2w 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:24 Segment &{3e 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:24 Segment &{3e 9 map[]}
2020/03/18 22:32:24 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:24 Segment &{0 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:24 Segment &{0 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:24 Segment &{$ 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:24 Segment &{$ 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:24 Segment &{e 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:24 Segment &{e 9 map[]}
2020/03/18 22:32:24 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:24 Segment &{d2w 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:24 Segment &{d2w 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:24 Segment &{dd 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:24 Segment &{dd 9 map[]}
2020/03/18 22:32:24 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:24 Segment &{yy 9 map[]}
2020/03/18 22:32:24 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:24 Segment &{yy 9 map[]}
2020/03/18 22:32:24 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:24 Segment &{p 9 map[]}
2020/03/18 22:32:24 Segment &{ - paste 1 map[]}
2020/03/18 22:32:24 Segment &{p 9 map[]}
2020/03/18 22:32:24 Segment &{ - paste 1 map[]}
2020/03/18 22:32:24 Segment &{Modes 5 map[]}
2020/03/18 22:32:24 Segment &{: 1 map[]}
2020/03/18 22:32:24 Segment &{i 9 map[]}
2020/03/18 22:32:24 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:24 Segment &{a 9 map[]}
2020/03/18 22:32:24 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:24 Segment &{A 9 map[]}
2020/03/18 22:32:24 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:24 Segment &{a 9 map[]}
2020/03/18 22:32:24 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:24 Segment &{O 9 map[]}
2020/03/18 22:32:24 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:24 Segment &{o 9 map[]}
2020/03/18 22:32:24 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:24 Segment &{V 9 map[]}
2020/03/18 22:32:24 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:24 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:32:24 Segment &{yum 1 map[]}
2020/03/18 22:32:24 Segment &{search 1 map[]}
2020/03/18 22:32:24 Segment &{list 1 map[]}
2020/03/18 22:32:24 Segment &{repositories 1 map[]}
2020/03/18 22:32:24 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:32:24 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:32:24 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:32:24 Segment &{packages 1 map[]}
2020/03/18 22:32:24 Segment &{g++ 9 map[]}
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{rpmbuild 9 map[]}
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:24 Segment &{:  1 map[]}
2020/03/18 22:32:24 Whaaat? code
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:32:52 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:32:52 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:32:52 Segment &{DUMP 1 map[]}
2020/03/18 22:32:52 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:32:52 Segment &{netstat 1 map[]}
2020/03/18 22:32:52 Segment &{(or  1 map[]}
2020/03/18 22:32:52 Segment &{ss 9 map[]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:32:52 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:32:52 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:32:52 Segment &{libexec 1 map[]}
2020/03/18 22:32:52 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:32:52 Segment &{ack 1 map[]}
2020/03/18 22:32:52 Segment &{speedtest 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:32:52 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:32:52 Segment &{rsync 1 map[]}
2020/03/18 22:32:52 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:32:52 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:32:52 Segment &{kubernetes 1 map[]}
2020/03/18 22:32:52 Segment &{hls 1 map[]}
2020/03/18 22:32:52 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:32:52 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:32:52 Segment &{akka 1 map[]}
2020/03/18 22:32:52 Segment &{overview 1 map[]}
2020/03/18 22:32:52 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:32:52 Segment &{domain approach: 5 map[]}
2020/03/18 22:32:52 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:32:52 Segment &{worker systems: 5 map[]}
2020/03/18 22:32:52 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:32:52 Segment &{messaging styles: 5 map[]}
2020/03/18 22:32:52 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:32:52 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:32:52 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:32:52 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:32:52 Segment &{creating actors 1 map[]}
2020/03/18 22:32:52 Segment &{messages 1 map[]}
2020/03/18 22:32:52 Segment &{actors 1 map[]}
2020/03/18 22:32:52 Segment &{actor system 1 map[]}
2020/03/18 22:32:52 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:32:52 Segment &{ActorRef 9 map[]}
2020/03/18 22:32:52 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:32:52 Segment &{Remember to use  1 map[]}
2020/03/18 22:32:52 Segment &{self 9 map[]}
2020/03/18 22:32:52 Segment &{ rather than  1 map[]}
2020/03/18 22:32:52 Segment &{this 9 map[]}
2020/03/18 22:32:52 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:32:52 Segment &{self 9 map[]}
2020/03/18 22:32:52 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:32:52 Segment &{this 9 map[]}
2020/03/18 22:32:52 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:32:52 Segment &{actor system 1 map[]}
2020/03/18 22:32:52 Segment &{actorOf 9 map[]}
2020/03/18 22:32:52 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:32:52 Segment &{message 1 map[]}
2020/03/18 22:32:52 Segment &{error handling 1 map[]}
2020/03/18 22:32:52 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:32:52 Segment &{supervisor 5 map[]}
2020/03/18 22:32:52 Segment &{ of the child 1 map[]}
2020/03/18 22:32:52 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:32:52 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:32:52 Segment &{strategies 5 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{supervision 1 map[]}
2020/03/18 22:32:52 Segment &{strategies 1 map[]}
2020/03/18 22:32:52 Segment &{actor paths 1 map[]}
2020/03/18 22:32:52 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:32:52 Segment &{monitoring 1 map[]}
2020/03/18 22:32:52 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:32:52 Segment &{lifecycle 1 map[]}
2020/03/18 22:32:52 Segment &{dispatching 1 map[]}
2020/03/18 22:32:52 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:52 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:32:52 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:52 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:32:52 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:32:52 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:32:52 Segment &{scheduling 1 map[]}
2020/03/18 22:32:52 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:32:52 Segment &{dead letter 1 map[]}
2020/03/18 22:32:52 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:32:52 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:32:52 Segment &{routing 1 map[]}
2020/03/18 22:32:52 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:32:52 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:32:52 Segment &{akka.routing 9 map[]}
2020/03/18 22:32:52 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:32:52 Segment &{example 1 map[]}
2020/03/18 22:32:52 Segment &{strategies 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{creating routers 1 map[]}
2020/03/18 22:32:52 Segment &{akka streams 1 map[]}
2020/03/18 22:32:52 Segment &{split and aggregate 1 map[]}
2020/03/18 22:32:52 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:32:52 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:32:52 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:32:52 Segment &{links [links] 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:32:52 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:32:52 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:32:52 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:32:52 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:52 Segment &{
   1 map[]}
2020/03/18 22:32:52 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{
   1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:32:52 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:32:52 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:52 Segment &{
   1 map[]}
2020/03/18 22:32:52 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{
   1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:32:52 Segment &{apache 1 map[]}
2020/03/18 22:32:52 Segment &{local server 1 map[]}
2020/03/18 22:32:52 Segment &{apache config 5 map[]}
2020/03/18 22:32:52 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:32:52 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:32:52 Segment &{config changes 1 map[]}
2020/03/18 22:32:52 Segment &{in  1 map[]}
2020/03/18 22:32:52 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:32:52 Segment &{: uncommented 1 map[]}
2020/03/18 22:32:52 Segment &{In  1 map[]}
2020/03/18 22:32:52 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:32:52 Segment &{, uncommented: 1 map[]}
2020/03/18 22:32:52 Segment &{commands 1 map[]}
2020/03/18 22:32:52 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:32:52 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:32:52 Segment &{usage 1 map[]}
2020/03/18 22:32:52 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:32:52 Segment &{AWS CLI 1 map[]}
2020/03/18 22:32:52 Segment &{Install 1 map[]}
2020/03/18 22:32:52 Segment &{Configure 1 map[]}
2020/03/18 22:32:52 Segment &{Profiles 1 map[]}
2020/03/18 22:32:52 Segment &{To use a Profile  1 map[]}
2020/03/18 22:32:52 Segment &{--profile <name> 9 map[]}
2020/03/18 22:32:52 Segment &{ in the command 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:32:52 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:32:52 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:32:52 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:32:52 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:32:52 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:32:52 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:32:52 Segment &{labs:  1 map[]}
2020/03/18 22:32:52 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:32:52 Segment &{labs:  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{Acronyms 1 map[]}
2020/03/18 22:32:52 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:52 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:32:52 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:52 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:32:52 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:52 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:32:52 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:52 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:32:52 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:52 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:32:52 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:52 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:32:52 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:52 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:32:52 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:52 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:32:52 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:52 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:32:52 Segment &{Protocols 1 map[]}
2020/03/18 22:32:52 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:52 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:32:52 Segment &{Services 1 map[]}
2020/03/18 22:32:52 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:32:52 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:32:52 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:32:52 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:32:52 Segment &{CloudTrail 1 map[]}
2020/03/18 22:32:52 Segment &{reveals account activity 1 map[]}
2020/03/18 22:32:52 Segment &{AWS Config 1 map[]}
2020/03/18 22:32:52 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:32:52 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:32:52 Segment &{Private Link 1 map[]}
2020/03/18 22:32:52 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:32:52 Segment &{AWS Shield 1 map[]}
2020/03/18 22:32:52 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:32:52 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:32:52 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:32:52 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:32:52 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:32:52 Segment &{Module 0 1 map[]}
2020/03/18 22:32:52 Segment &{Best Practicies 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:32:52 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:52 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:32:52 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:52 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:32:52 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:52 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:32:52 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:52 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:32:52 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:52 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:32:52 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:32:52 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:32:52 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:32:52 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:32:52 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:32:52 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:32:52 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:32:52 Segment &{no integration 1 map[]}
2020/03/18 22:32:52 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:32:52 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:32:52 Segment &{centralised control 1 map[]}
2020/03/18 22:32:52 Segment &{centralised control 1 map[]}
2020/03/18 22:32:52 Segment &{single bill 1 map[]}
2020/03/18 22:32:52 Segment &{single bill 1 map[]}
2020/03/18 22:32:52 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:52 Segment &{single instance pools 1 map[]}
2020/03/18 22:32:52 Segment &{complex admin 1 map[]}
2020/03/18 22:32:52 Segment &{complex admin 1 map[]}
2020/03/18 22:32:52 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:32:52 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:32:52 Segment &{security 1 map[]}
2020/03/18 22:32:52 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:32:52 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:32:52 Segment &{ can be made. 1 map[]}
2020/03/18 22:32:52 Segment &{Policy based management 1 map[]}
2020/03/18 22:32:52 Segment &{Service control policy 5 map[]}
2020/03/18 22:32:52 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:32:52 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:32:52 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:32:52 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:32:52 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:32:52 Segment &{Resource groups 1 map[]}
2020/03/18 22:32:52 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:32:52 Segment &{Module 2 1 map[]}
2020/03/18 22:32:52 Segment &{VPC Peering 1 map[]}
2020/03/18 22:32:52 Segment &{EC2 1 map[]}
2020/03/18 22:32:52 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:32:52 Segment &{Create an  1 map[]}
2020/03/18 22:32:52 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:32:52 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:32:52 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:32:52 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:32:52 Segment &{VPN Connections 1 map[]}
2020/03/18 22:32:52 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:32:52 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:32:52 Segment &{BGP 1 map[]}
2020/03/18 22:32:52 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:32:52 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:32:52 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:32:52 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:32:52 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:32:52 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:32:52 Segment &{Scaling 1 map[]}
2020/03/18 22:32:52 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:32:52 Segment &{Lookup 1 map[]}
2020/03/18 22:32:52 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:52 Segment &{split brain condition 1 map[]}
2020/03/18 22:32:52 Segment &{Base64 1 map[]}
2020/03/18 22:32:52 Segment &{to binary 1 map[]}
2020/03/18 22:32:52 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:32:52 Segment &{bash 1 map[]}
2020/03/18 22:32:52 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:32:52 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{networksetup 1 map[]}
2020/03/18 22:32:52 Segment &{configuring network settings 1 map[]}
2020/03/18 22:32:52 Segment &{logging 1 map[]}
2020/03/18 22:32:52 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:52 Segment &{f = live follow 1 map[]}
2020/03/18 22:32:52 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:52 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:32:52 Segment &{shebang 1 map[]}
2020/03/18 22:32:52 Segment &{variable 1 map[]}
2020/03/18 22:32:52 Segment &{special variables 5 map[]}
2020/03/18 22:32:52 Segment &{chmod 1 map[]}
2020/03/18 22:32:52 Segment &{numerical 5 map[]}
2020/03/18 22:32:52 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:32:52 Segment &{homebrew 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:32:52 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{list packages: 1 map[]}
2020/03/18 22:32:52 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:32:52 Segment &{Browserstack 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:32:52 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:52 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:32:52 Segment &{This requires you have the  1 map[]}
2020/03/18 22:32:52 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:32:52 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:32:52 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:32:52 Segment &{c 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:32:52 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:32:52 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:32:52 Segment &{; 1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{; 1 map[]}
2020/03/18 22:32:52 Segment &{basics 1 map[]}
2020/03/18 22:32:52 Segment &{native methods 1 map[]}
2020/03/18 22:32:52 Segment &{stdio 1 map[]}
2020/03/18 22:32:52 Segment &{import 5 map[]}
2020/03/18 22:32:52 Segment &{printf 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{scanf 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{fgets 5 map[]}
2020/03/18 22:32:52 Segment &{fputs 5 map[]}
2020/03/18 22:32:52 Segment &{puts 5 map[]}
2020/03/18 22:32:52 Segment &{dynamic memory 1 map[]}
2020/03/18 22:32:52 Segment &{malloc 5 map[]}
2020/03/18 22:32:52 Segment &{memcpy 5 map[]}
2020/03/18 22:32:52 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:32:52 Segment &{building 1 map[]}
2020/03/18 22:32:52 Segment &{compile and link 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{compile 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{linking 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:32:52 Segment &{libraries 1 map[]}
2020/03/18 22:32:52 Segment &{static 5 map[]}
2020/03/18 22:32:52 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:32:52 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:32:52 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:32:52 Segment &{gives you the file  1 map[]}
2020/03/18 22:32:52 Segment &{libname.a 9 map[]}
2020/03/18 22:32:52 Segment &{list files in lib 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:32:52 Segment &{camel 1 map[]}
2020/03/18 22:32:52 Segment &{testing 1 map[]}
2020/03/18 22:32:52 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:32:52 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:32:52 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:32:52 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:32:52 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:32:52 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:32:52 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:32:52 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:32:52 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:32:52 Segment &{systemctl 9 map[]}
2020/03/18 22:32:52 Segment &{ rather than  1 map[]}
2020/03/18 22:32:52 Segment &{service 9 map[]}
2020/03/18 22:32:52 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:32:52 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:32:52 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:32:52 Segment &{): 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:32:52 Segment &{More info here:  1 map[]}
2020/03/18 22:32:52 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:32:52 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:32:52 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:32:52 Segment &{certs 1 map[]}
2020/03/18 22:32:52 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:52 Segment &{cert.p12 5 map[]}
2020/03/18 22:32:52 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:52 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:32:52 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:52 Segment &{certificate.pem 5 map[]}
2020/03/18 22:32:52 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:52 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:32:52 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:52 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:32:52 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{create PEM 1 map[]}
2020/03/18 22:32:52 Segment &{Or with no target password 1 map[]}
2020/03/18 22:32:52 Segment &{Chrome issue 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{svn issue 1 map[]}
2020/03/18 22:32:52 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:32:52 Segment &{Hi all, 1 map[]}
2020/03/18 22:32:52 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:32:52 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:32:52 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:32:52 Segment &{google structured data 1 map[]}
2020/03/18 22:32:52 Segment &{claim review 1 map[]}
2020/03/18 22:32:52 Segment &{required fields 5 map[]}
2020/03/18 22:32:52 Segment &{reviewRating 1 map[]}
2020/03/18 22:32:52 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:32:52 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:32:52 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:32:52 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:32:52 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:32:52 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:32:52 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:32:52 Segment &{what we’re missing 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type 1 map[]}
2020/03/18 22:32:52 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:52 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:32:52 Segment &{[x] url 1 map[]}
2020/03/18 22:32:52 Segment &{[x] url 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] author: 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] name 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:32:52 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] type 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] name 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:32:52 Segment &{[x] type 1 map[]}
2020/03/18 22:32:52 Segment &{[x] type 1 map[]}
2020/03/18 22:32:52 Segment &{[x] name 1 map[]}
2020/03/18 22:32:52 Segment &{[x] name 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:52 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:32:52 Segment &{case examples 1 map[]}
2020/03/18 22:32:52 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:32:52 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:32:52 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:32:52 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:32:52 Segment &{coffee script 1 map[]}
2020/03/18 22:32:52 Segment &{functions 1 map[]}
2020/03/18 22:32:52 Segment &{With default values: 1 map[]}
2020/03/18 22:32:52 Segment &{objects 1 map[]}
2020/03/18 22:32:52 Segment &{classes 1 map[]}
2020/03/18 22:32:52 Segment &{splats 1 map[]}
2020/03/18 22:32:52 Segment &{comprehensions 1 map[]}
2020/03/18 22:32:52 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:32:52 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:32:52 Segment &{create stack 1 map[]}
2020/03/18 22:32:52 Segment &{deploy 1 map[]}
2020/03/18 22:32:52 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:32:52 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:32:52 Segment &{curl 1 map[]}
2020/03/18 22:32:52 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:32:52 Segment &{cert 1 map[]}
2020/03/18 22:32:52 Segment &{curl with cert 1 map[]}
2020/03/18 22:32:52 Segment &{with response headers: 1 map[]}
2020/03/18 22:32:52 Segment &{output 1 map[]}
2020/03/18 22:32:52 Segment &{Write output to file 1 map[]}
2020/03/18 22:32:52 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:32:52 Segment &{curses 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:32:52 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:32:52 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{compile 5 map[]}
2020/03/18 22:32:52 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:32:52 Segment &{setup 1 map[]}
2020/03/18 22:32:52 Segment &{screen 1 map[]}
2020/03/18 22:32:52 Segment &{screen dump 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{printing 1 map[]}
2020/03/18 22:32:52 Segment &{output 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{attributes 1 map[]}
2020/03/18 22:32:52 Segment &{attribute options 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{colours 1 map[]}
2020/03/18 22:32:52 Segment &{colours 5 map[]}
2020/03/18 22:32:52 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:32:52 Segment &{reading 1 map[]}
2020/03/18 22:32:52 Segment &{keys constants 5 map[]}
2020/03/18 22:32:52 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:32:52 Segment &{mouse 1 map[]}
2020/03/18 22:32:52 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:32:52 Segment &{MEVENT 5 map[]}
2020/03/18 22:32:52 Segment &{ looks like this: 1 map[]}
2020/03/18 22:32:52 Segment &{key masks 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:32:52 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:32:52 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:32:52 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:32:52 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:32:52 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:32:52 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:32:52 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:32:52 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:32:52 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:32:52 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:32:52 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:32:52 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:32:52 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:32:52 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:32:52 Segment &{D 1 map[]}
2020/03/18 22:32:52 Segment &{## dmd 1 map[]}
2020/03/18 22:32:52 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:32:52 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:32:52 Segment &{Paradigms 1 map[]}
2020/03/18 22:32:52 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:52 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:32:52 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:52 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:32:52 Segment &{concurrency 1 map[]}
2020/03/18 22:32:52 Segment &{concurrency 1 map[]}
2020/03/18 22:32:52 Segment &{meta programming 1 map[]}
2020/03/18 22:32:52 Segment &{meta programming 1 map[]}
2020/03/18 22:32:52 Segment &{Tools 1 map[]}
2020/03/18 22:32:52 Segment &{dmd 1 map[]}
2020/03/18 22:32:52 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:32:52 Segment &{Libraries 1 map[]}
2020/03/18 22:32:52 Segment &{Phobos 1 map[]}
2020/03/18 22:32:52 Segment &{Offical D library 1 map[]}
2020/03/18 22:32:52 Segment &{stl 1 map[]}
2020/03/18 22:32:52 Segment &{Resources 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:32:52 Segment &{conf:  1 map[]}
2020/03/18 22:32:52 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:32:52 Segment &{conf:  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:32:52 Segment &{lang:  1 map[]}
2020/03/18 22:32:52 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:32:52 Segment &{lang:  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:52 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:32:52 Segment &{Types and Operators 1 map[]}
2020/03/18 22:32:52 Segment &{Integral Types 1 map[]}
2020/03/18 22:32:52 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{16 bit 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{8 bit types 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{conversions 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{non decimal 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{floating points 1 map[]}
2020/03/18 22:32:52 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:32:52 Segment &{dagger 1 map[]}
2020/03/18 22:32:52 Segment &{annotations 1 map[]}
2020/03/18 22:32:52 Segment &{provider annotation 1 map[]}
2020/03/18 22:32:52 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:32:52 Segment &{docker 1 map[]}
2020/03/18 22:32:52 Segment &{introduction 1 map[]}
2020/03/18 22:32:52 Segment &{5 core products: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{supporting products: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{hypervisors 1 map[]}
2020/03/18 22:32:52 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{namespaces 5 map[]}
2020/03/18 22:32:52 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:32:52 Segment &{installation 1 map[]}
2020/03/18 22:32:52 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:32:52 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:32:52 Segment &{setup 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:32:52 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:32:52 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:32:52 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{$ docker version 1 map[]}
2020/03/18 22:32:52 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:32:52 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:32:52 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:32:52 Segment &{// this is the vm 1 map[]}
2020/03/18 22:32:52 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:32:52 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine start  1 map[]}
2020/03/18 22:32:52 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:32:52 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:32:52 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:32:52 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:32:52 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:32:52 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:32:52 Segment &{tagging 1 map[]}
2020/03/18 22:32:52 Segment &{images 5 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{containers 5 map[]}
2020/03/18 22:32:52 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:52 Segment &{building 1 map[]}
2020/03/18 22:32:52 Segment &{Each  1 map[]}
2020/03/18 22:32:52 Segment &{layer 5 map[]}
2020/03/18 22:32:52 Segment &{ in an image is  1 map[]}
2020/03/18 22:32:52 Segment &{read only 5 map[]}
2020/03/18 22:32:52 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:32:52 Segment &{writeable layer 5 map[]}
2020/03/18 22:32:52 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:32:52 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:32:52 Segment &{build a new image from a  1 map[]}
2020/03/18 22:32:52 Segment &{build context 5 map[]}
2020/03/18 22:32:52 Segment &{running [run] 1 map[]}
2020/03/18 22:32:52 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:32:52 Segment &{default command 5 map[]}
2020/03/18 22:32:52 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:32:52 Segment &{stop a container 1 map[]}
2020/03/18 22:32:52 Segment &{tagging 1 map[]}
2020/03/18 22:32:52 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:32:52 Segment &{containers 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{container 5 map[]}
2020/03/18 22:32:52 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:32:52 Segment &{view containers 1 map[]}
2020/03/18 22:32:52 Segment &{run a container 1 map[]}
2020/03/18 22:32:52 Segment &{save a change: 1 map[]}
2020/03/18 22:32:52 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:32:52 Segment &{inspect 1 map[]}
2020/03/18 22:32:52 Segment &{management 1 map[]}
2020/03/18 22:32:52 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:32:52 Segment &{docker create 5 map[]}
2020/03/18 22:32:52 Segment &{ command 1 map[]}
2020/03/18 22:32:52 Segment &{To stop a container 1 map[]}
2020/03/18 22:32:52 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:32:52 Segment &{terminal access 1 map[]}
2020/03/18 22:32:52 Segment &{Use  1 map[]}
2020/03/18 22:32:52 Segment &{docker exec 5 map[]}
2020/03/18 22:32:52 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:32:52 Segment &{remove 1 map[]}
2020/03/18 22:32:52 Segment &{images 5 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{containers 5 map[]}
2020/03/18 22:32:52 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:32:52 Segment &{remove containers 1 map[]}
2020/03/18 22:32:52 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:32:52 Segment &{port mapping 1 map[]}
2020/03/18 22:32:52 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:32:52 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:32:52 Segment &{use  1 map[]}
2020/03/18 22:32:52 Segment &{EXPOSE 5 map[]}
2020/03/18 22:32:52 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:32:52 Segment &{hub 1 map[]}
2020/03/18 22:32:52 Segment &{login 1 map[]}
2020/03/18 22:32:52 Segment &{PUSH 5 map[]}
2020/03/18 22:32:52 Segment &{
push the new version 1 map[]}
2020/03/18 22:32:52 Segment &{PULL 5 map[]}
2020/03/18 22:32:52 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:32:52 Segment &{configuration 1 map[]}
2020/03/18 22:32:52 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:32:52 Segment &{to set this up: 1 map[]}
2020/03/18 22:32:52 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:32:52 Segment &{remote daemon 1 map[]}
2020/03/18 22:32:52 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:32:52 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:32:52 Segment &{-H 9 map[]}
2020/03/18 22:32:52 Segment &{ flag 1 map[]}
2020/03/18 22:32:52 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:32:52 Segment &{logging 1 map[]}
2020/03/18 22:32:52 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:32:52 Segment &{print all log for a container 1 map[]}
2020/03/18 22:32:52 Segment &{dockerfile 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{docker file 5 map[]}
2020/03/18 22:32:52 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:32:52 Segment &{Save it as  1 map[]}
2020/03/18 22:32:52 Segment &{Dockerfile 9 map[]}
2020/03/18 22:32:52 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:32:52 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:32:52 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:32:52 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:32:52 Segment &{instructions 1 map[]}
2020/03/18 22:32:52 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:32:52 Segment &{FROM 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:32:52 Segment &{RUN 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:32:52 Segment &{ADD 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:32:52 Segment &{CMD 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{override the default command 1 map[]}
2020/03/18 22:32:52 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:32:52 Segment &{running this: 1 map[]}
2020/03/18 22:32:52 Segment &{ENV 5 map[]}
2020/03/18 22:32:52 Segment &{set environment variables 1 map[]}
2020/03/18 22:32:52 Segment &{VOLUME 5 map[]}
2020/03/18 22:32:52 Segment &{specific a volume 1 map[]}
2020/03/18 22:32:52 Segment &{build context 1 map[]}
2020/03/18 22:32:52 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:32:52 Segment &{volumes 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{volume 5 map[]}
2020/03/18 22:32:52 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{simple volume 5 map[]}
2020/03/18 22:32:52 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:32:52 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:32:52 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:32:52 Segment &{host volumes 5 map[]}
2020/03/18 22:32:52 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:32:52 Segment &{overwritten 3 map[]}
2020/03/18 22:32:52 Segment &{named volumes 5 map[]}
2020/03/18 22:32:52 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:32:52 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:32:52 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:32:52 Segment &{dangling volumes 1 map[]}
2020/03/18 22:32:52 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:32:52 Segment &{networking 1 map[]}
2020/03/18 22:32:52 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:32:52 Segment &{list networks: 1 map[]}
2020/03/18 22:32:52 Segment &{create a network 1 map[]}
2020/03/18 22:32:52 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:32:52 Segment &{use a network: 1 map[]}
2020/03/18 22:32:52 Segment &{inspect network: 1 map[]}
2020/03/18 22:32:52 Segment &{remove a network 1 map[]}
2020/03/18 22:32:52 Segment &{network types 1 map[]}
2020/03/18 22:32:52 Segment &{NONE 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{no network 1 map[]}
2020/03/18 22:32:52 Segment &{HOST 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{shares the host network 1 map[]}
2020/03/18 22:32:52 Segment &{BRIDGE 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:32:52 Segment &{requires  linking: 1 map[]}
2020/03/18 22:32:52 Segment &{a  1 map[]}
2020/03/18 22:32:52 Segment &{container link 5 map[]}
2020/03/18 22:32:52 Segment &{continuous integration 1 map[]}
2020/03/18 22:32:52 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:32:52 Segment &{dockerhub 5 map[]}
2020/03/18 22:32:52 Segment &{ has an  1 map[]}
2020/03/18 22:32:52 Segment &{autobuild 5 map[]}
2020/03/18 22:32:52 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:32:52 Segment &{docker compose 1 map[]}
2020/03/18 22:32:52 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:32:52 Segment &{yaml 5 map[]}
2020/03/18 22:32:52 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:32:52 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:32:52 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:32:52 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:32:52 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:32:52 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:32:52 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:32:52 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:32:52 Segment &{eslint 1 map[]}
2020/03/18 22:32:52 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:32:52 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:32:52 Segment &{configuring 1 map[]}
2020/03/18 22:32:52 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:32:52 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:32:52 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:32:52 Segment &{config file 1 map[]}
2020/03/18 22:32:52 Segment &{.eslintrc 9 map[]}
2020/03/18 22:32:52 Segment &{rules 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:32:52 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:32:52 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:32:52 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:32:52 Segment &{gcc 1 map[]}
2020/03/18 22:32:52 Segment &{show include paths: 1 map[]}
2020/03/18 22:32:52 Segment &{show linker paths: 1 map[]}
2020/03/18 22:32:52 Segment &{options 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:32:52 Segment &{see  1 map[]}
2020/03/18 22:32:52 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:32:52 Segment &{compile 1 map[]}
2020/03/18 22:32:52 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:32:52 Segment &{-I 9 map[]}
2020/03/18 22:32:52 Segment &{ option. 1 map[]}
2020/03/18 22:32:52 Segment &{link 1 map[]}
2020/03/18 22:32:52 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:32:52 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:32:52 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:32:52 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:32:52 Segment &{-L 9 map[]}
2020/03/18 22:32:52 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:32:52 Segment &{-l 9 map[]}
2020/03/18 22:32:52 Segment &{ options 1 map[]}
2020/03/18 22:32:52 Segment &{e.g 1 map[]}
2020/03/18 22:32:52 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:32:52 Segment &{lib 9 map[]}
2020/03/18 22:32:52 Segment &{ prefix 1 map[]}
2020/03/18 22:32:52 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:32:52 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:32:52 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:32:52 Segment &{Security 1 map[]}
2020/03/18 22:32:52 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:32:52 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:32:52 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:32:52 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:32:52 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:32:52 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:32:52 Segment &{Handling personal data 1 map[]}
2020/03/18 22:32:52 Segment &{4 principles: 1 map[]}
2020/03/18 22:32:52 Segment &{1 Accountability 1 map[]}
2020/03/18 22:32:52 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:32:52 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:32:52 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:52 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:32:52 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:52 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:32:52 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:32:52 Segment &{2 Transparency 1 map[]}
2020/03/18 22:32:52 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:32:52 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:32:52 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:32:52 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:32:52 Segment &{4 Data portability 1 map[]}
2020/03/18 22:32:52 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:32:52 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:32:52 Segment &{Breach 1 map[]}
2020/03/18 22:32:52 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:32:52 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:32:52 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:32:52 Segment &{Summary 1 map[]}
2020/03/18 22:32:52 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:32:52 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:32:52 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:32:52 Segment &{Scams 1 map[]}
2020/03/18 22:32:52 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:32:52 Segment &{Phishing 1 map[]}
2020/03/18 22:32:52 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:32:52 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:32:52 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:52 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:32:52 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:52 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:32:52 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:52 Segment &{Misleading sender 1 map[]}
2020/03/18 22:32:52 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:52 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:32:52 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:52 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:32:52 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:52 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:32:52 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:32:52 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:32:52 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:32:52 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:32:52 Segment &{Passwords 1 map[]}
2020/03/18 22:32:52 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:32:52 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:32:52 Segment &{Do’s 1 map[]}
2020/03/18 22:32:52 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:52 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:32:52 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:52 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:32:52 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:52 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:32:52 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:52 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:32:52 Segment &{Dont’s 1 map[]}
2020/03/18 22:32:52 Segment &{write them down 1 map[]}
2020/03/18 22:32:52 Segment &{write them down 1 map[]}
2020/03/18 22:32:52 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:52 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:32:52 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:52 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:32:52 Segment &{share the network password 1 map[]}
2020/03/18 22:32:52 Segment &{share the network password 1 map[]}
2020/03/18 22:32:52 Segment &{Email 1 map[]}
2020/03/18 22:32:52 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Handling Data 1 map[]}
2020/03/18 22:32:52 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:32:52 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:32:52 Segment &{This is known as  1 map[]}
2020/03/18 22:32:52 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:32:52 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:32:52 Segment &{PUBLIC 5 map[]}
2020/03/18 22:32:52 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:32:52 Segment &{PROTECTED 5 map[]}
2020/03/18 22:32:52 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:32:52 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:32:52 Segment &{Offline Security 1 map[]}
2020/03/18 22:32:52 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:32:52 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:32:52 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:32:52 Segment &{Help 1 map[]}
2020/03/18 22:32:52 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:32:52 Segment &{24 1 map[]}
2020/03/18 22:32:52 Segment &{⁄ 1 map[]}
2020/03/18 22:32:52 Segment &{7 1 map[]}
2020/03/18 22:32:52 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:32:52 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:32:52 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:32:52 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:32:52 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:32:52 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:32:52 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:32:52 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:32:52 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{fixing  1 map[]}
2020/03/18 22:32:52 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:52 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:32:52 Segment &{fixing  1 map[]}
2020/03/18 22:32:52 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:32:52 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:32:52 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:32:52 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:32:52 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:32:52 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:32:52 Segment &{list commits between dates 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:32:52 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:32:52 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:32:52 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:52 Segment &{specific folder 5 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:32:52 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:32:52 Segment &{specific folder 5 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{run:
 1 map[]}
2020/03/18 22:32:52 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{applying a diff file 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:52 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:32:52 Segment &{run:
 1 map[]}
2020/03/18 22:32:52 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:32:52 Segment &{run:
 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:32:52 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{referring to: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{last commits  1 map[]}
2020/03/18 22:32:52 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:52 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{referring to: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{last commits  1 map[]}
2020/03/18 22:32:52 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:32:52 Segment &{last commits  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:52 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:32:52 Segment &{last 3 commits  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:32:52 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:32:52 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:32:52 Segment &{list of all tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:52 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:32:52 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:32:52 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:32:52 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:32:52 Segment &{list of all developers 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{or 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:32:52 Segment &{display graph of branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{or 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:52 Segment &{remembering the password 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:32:52 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:52 Segment &{
”` 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{path to the global config 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:52 Segment &{
”` 1 map[]}
2020/03/18 22:32:52 Segment &{example of a global config 1 map[]}
2020/03/18 22:32:52 Whaaat? br
2020/03/18 22:32:52 Segment &{
”` 1 map[]}
2020/03/18 22:32:52 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:32:52 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:32:52 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:32:52 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:32:52 Segment &{view all global settings 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{delete tag 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:32:52 Segment &{delete tag 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git push --tags
 9 map[]}
2020/03/18 22:32:52 Segment &{pushing tags 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:32:52 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:32:52 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:32:52 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:32:52 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:32:52 Segment &{deleting local branch 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list  1 map[]}
2020/03/18 22:32:52 Segment &{actual 5 map[]}
2020/03/18 22:32:52 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:32:52 Segment &{list  1 map[]}
2020/03/18 22:32:52 Segment &{actual 5 map[]}
2020/03/18 22:32:52 Segment &{ remote branchs 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch -r
 9 map[]}
2020/03/18 22:32:52 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch -l
 9 map[]}
2020/03/18 22:32:52 Segment &{list all local branches 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:32:52 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:32:52 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:32:52 Segment &{git 1 map[]}
2020/03/18 22:32:52 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:32:52 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:32:52 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:32:52 Segment &{diff 1 map[]}
2020/03/18 22:32:52 Segment &{options 1 map[]}
2020/03/18 22:32:52 Segment &{stat (  1 map[]}
2020/03/18 22:32:52 Segment &{--stat 9 map[]}
2020/03/18 22:32:52 Segment &{ ) 1 map[]}
2020/03/18 22:32:52 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:32:52 Segment &{clone 1 map[]}
2020/03/18 22:32:52 Segment &{push 1 map[]}
2020/03/18 22:32:52 Segment &{branch 1 map[]}
2020/03/18 22:32:52 Segment &{list §branches: 1 map[]}
2020/03/18 22:32:52 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:32:52 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:32:52 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:32:52 Segment &{remote 1 map[]}
2020/03/18 22:32:52 Segment &{config 1 map[]}
2020/03/18 22:32:52 Segment &{file located at  1 map[]}
2020/03/18 22:32:52 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{link 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:32:52 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:32:52 Segment &{reith 1 map[]}
2020/03/18 22:32:52 Segment &{setup 1 map[]}
2020/03/18 22:32:52 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:52 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:32:52 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:52 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:32:52 Segment &{Add the following in  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:52 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:32:52 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{and some more
 1 map[]}
2020/03/18 22:32:52 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:32:52 Segment &{and some more
 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:32:52 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:32:52 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:32:52 Segment &{view it: 1 map[]}
2020/03/18 22:32:52 Segment &{set it: 1 map[]}
2020/03/18 22:32:52 Segment &{unset it: 1 map[]}
2020/03/18 22:32:52 Segment &{add it: 1 map[]}
2020/03/18 22:32:52 Segment &{alias 1 map[]}
2020/03/18 22:32:52 Segment &{make an alias: 1 map[]}
2020/03/18 22:32:52 Segment &{grep 1 map[]}
2020/03/18 22:32:52 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:32:52 Segment &{stash 1 map[]}
2020/03/18 22:32:52 Segment &{add and pop 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{list 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{delete 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{view 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{github 1 map[]}
2020/03/18 22:32:52 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:32:52 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:32:52 Segment &{hungarian notation 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:32:52 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:32:52 Segment &{lint 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:32:52 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:32:52 Segment &{gnuplot 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:32:52 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:32:52 Segment &{## install 1 map[]}
2020/03/18 22:32:52 Segment &{usage 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:32:52 Segment &{grep 1 map[]}
2020/03/18 22:32:52 Segment &{options 1 map[]}
2020/03/18 22:32:52 Segment &{invert match 5 map[]}
2020/03/18 22:32:52 Segment &{context 5 map[]}
2020/03/18 22:32:52 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:32:52 Segment &{Grunt 1 map[]}
2020/03/18 22:32:52 Segment &{Gruntfile 1 map[]}
2020/03/18 22:32:52 Segment &{Template  1 map[]}
2020/03/18 22:32:52 Segment &{Gruntfile 9 map[]}
2020/03/18 22:32:52 Segment &{ with  1 map[]}
2020/03/18 22:32:52 Segment &{eslint 9 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{jasmine 9 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{babel 9 map[]}
2020/03/18 22:32:52 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:32:52 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{or 1 map[]}
2020/03/18 22:32:52 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:32:52 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:32:52 Segment &{install mongo script 1 map[]}
2020/03/18 22:32:52 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:32:52 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:32:52 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:32:52 Segment &{from Anthony: 1 map[]}
2020/03/18 22:32:52 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:32:52 Segment &{Jasmine 1 map[]}
2020/03/18 22:32:52 Segment &{js testing framework 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:32:52 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:32:52 Segment &{expectations 1 map[]}
2020/03/18 22:32:52 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:32:52 Segment &{or chain with a  1 map[]}
2020/03/18 22:32:52 Segment &{.not 9 map[]}
2020/03/18 22:32:52 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:32:52 Segment &{matchers 1 map[]}
2020/03/18 22:32:52 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:32:52 Segment &{libexec 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:32:52 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:32:52 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:32:52 Segment &{lsof 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:32:52 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:32:52 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:32:52 Segment &{check ports 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:32:52 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:32:52 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:32:52 Segment &{markdown 1 map[]}
2020/03/18 22:32:52 Segment &{lists 1 map[]}
2020/03/18 22:32:52 Segment &{bulleted 5 map[]}
2020/03/18 22:32:52 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:32:52 Segment &{numbered 5 map[]}
2020/03/18 22:32:52 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:32:52 Segment &{checkbox 5 map[]}
2020/03/18 22:32:52 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:32:52 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:52 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:32:52 Segment &{code 1 map[]}
2020/03/18 22:32:52 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:32:52 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:32:52 Segment &{links 1 map[]}
2020/03/18 22:32:52 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:32:52 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:32:52 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:32:52 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:32:52 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:32:52 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:32:52 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:52 Segment &{ or i can say  1 map[]}
2020/03/18 22:32:52 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:32:52 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:32:52 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:32:52 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:32:52 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:32:52 Segment &{header 3 1 map[]}
2020/03/18 22:32:52 Segment &{blah blah 1 map[]}
2020/03/18 22:32:52 Segment &{header 4 1 map[]}
2020/03/18 22:32:52 Segment &{blah blah 1 map[]}
2020/03/18 22:32:52 Segment &{header 5 1 map[]}
2020/03/18 22:32:52 Segment &{blah blah 1 map[]}
2020/03/18 22:32:52 Segment &{Alternatively: 1 map[]}
2020/03/18 22:32:52 Segment &{blah 1 map[]}
2020/03/18 22:32:52 Segment &{blah blah 1 map[]}
2020/03/18 22:32:52 Segment &{code 1 map[]}
2020/03/18 22:32:52 Segment &{unmarked 1 map[]}
2020/03/18 22:32:52 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:32:52 Segment &{### scala 1 map[]}
2020/03/18 22:32:52 Segment &{### java 1 map[]}
2020/03/18 22:32:52 Segment &{inline formatting 1 map[]}
2020/03/18 22:32:52 Segment &{you can make string  1 map[]}
2020/03/18 22:32:52 Segment &{bold 5 map[]}
2020/03/18 22:32:52 Segment &{ like that or  1 map[]}
2020/03/18 22:32:52 Segment &{like this 5 map[]}
2020/03/18 22:32:52 Segment &{ if you like 1 map[]}
2020/03/18 22:32:52 Segment &{you can also make  1 map[]}
2020/03/18 22:32:52 Segment &{italics 3 map[]}
2020/03/18 22:32:52 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:32:52 Segment &{single underlines 3 map[]}
2020/03/18 22:32:52 Segment &{ if you prefer 1 map[]}
2020/03/18 22:32:52 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:32:52 Segment &{indented literals 1 map[]}
2020/03/18 22:32:52 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:32:52 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:32:52 Segment &{Maven 1 map[]}
2020/03/18 22:32:52 Segment &{command line 1 map[]}
2020/03/18 22:32:52 Segment &{options 1 map[]}
2020/03/18 22:32:52 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:32:52 Segment &{mongo 1 map[]}
2020/03/18 22:32:52 Segment &{To run the server: 1 map[]}
2020/03/18 22:32:52 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:32:52 Segment &{organisation 1 map[]}
2020/03/18 22:32:52 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:52 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:32:52 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:52 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:32:52 Segment &{config 1 map[]}
2020/03/18 22:32:52 Segment &{default config 3 map[]}
2020/03/18 22:32:52 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:32:52 Segment &{scale-grid 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:32:52 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:32:52 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:32:52 Segment &{crendentials 1 map[]}
2020/03/18 22:32:52 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:52 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:32:52 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:52 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:32:52 Segment &{ssh access 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:52 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:32:52 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{command line 1 map[]}
2020/03/18 22:32:52 Segment &{querying 1 map[]}
2020/03/18 22:32:52 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:32:52 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:32:52 Segment &{query selectors 1 map[]}
2020/03/18 22:32:52 Segment &{comparison 1 map[]}
2020/03/18 22:32:52 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:32:52 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:52 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:32:52 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:52 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{logical selectors 1 map[]}
2020/03/18 22:32:52 Segment &{$or 1 map[]}
2020/03/18 22:32:52 Segment &{$or 1 map[]}
2020/03/18 22:32:52 Segment &{$and 1 map[]}
2020/03/18 22:32:52 Segment &{$and 1 map[]}
2020/03/18 22:32:52 Segment &{$not 1 map[]}
2020/03/18 22:32:52 Segment &{$not 1 map[]}
2020/03/18 22:32:52 Segment &{$nor 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{element 1 map[]}
2020/03/18 22:32:52 Segment &{$nor 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{element 1 map[]}
2020/03/18 22:32:52 Segment &{$exists: 1 map[]}
2020/03/18 22:32:52 Segment &{$exists: 1 map[]}
2020/03/18 22:32:52 Segment &{$type: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{evaluation 1 map[]}
2020/03/18 22:32:52 Segment &{$type: 1 map[]}
2020/03/18 22:32:52 Segment &{

 1 map[]}
2020/03/18 22:32:52 Segment &{evaluation 1 map[]}
2020/03/18 22:32:52 Segment &{$mod: 1 map[]}
2020/03/18 22:32:52 Segment &{$mod: 1 map[]}
2020/03/18 22:32:52 Segment &{$regex: 1 map[]}
2020/03/18 22:32:52 Segment &{$regex: 1 map[]}
2020/03/18 22:32:52 Segment &{$text: 1 map[]}
2020/03/18 22:32:52 Segment &{$text: 1 map[]}
2020/03/18 22:32:52 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:52 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:32:52 Segment &{find 3 map[]}
2020/03/18 22:32:52 Segment &{sort 3 map[]}
2020/03/18 22:32:52 Segment &{meta 1 map[]}
2020/03/18 22:32:52 Segment &{Explain a query 1 map[]}
2020/03/18 22:32:52 Segment &{Show all indexes 1 map[]}
2020/03/18 22:32:52 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:32:52 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:32:52 Segment &{aggregation 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:32:52 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:32:52 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:32:52 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:32:52 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:52 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:32:52 Segment &{get some basic information 1 map[]}
2020/03/18 22:32:52 Segment &{tools to say hi 1 map[]}
2020/03/18 22:32:52 Segment &{db.version() 1 map[]}
2020/03/18 22:32:52 Segment &{db.version() 1 map[]}
2020/03/18 22:32:52 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:52 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:32:52 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:52 Segment &{db.isMater() 1 map[]}
2020/03/18 22:32:52 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:52 Segment &{rs.conf() 1 map[]}
2020/03/18 22:32:52 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:52 Segment &{rs.status() 1 map[]}
2020/03/18 22:32:52 Segment &{showing 1 map[]}
2020/03/18 22:32:52 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:52 Segment &{shows dbs 1 map[]}
2020/03/18 22:32:52 Segment &{show collections 1 map[]}
2020/03/18 22:32:52 Segment &{show collections 1 map[]}
2020/03/18 22:32:52 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:52 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:32:52 Segment &{more detail 1 map[]}
2020/03/18 22:32:52 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:32:52 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:32:52 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:32:52 Segment &{Set log level: 1 map[]}
2020/03/18 22:32:52 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:32:52 Segment &{mtools 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:32:52 Segment &{On gitHub -  1 map[]}
2020/03/18 22:32:52 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:32:52 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:32:52 Segment &{mongostat 1 map[]}
2020/03/18 22:32:52 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:32:52 Segment &{flaky networks 1 map[]}
2020/03/18 22:32:52 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:32:52 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:52 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:32:52 Segment &{primary failover 1 map[]}
2020/03/18 22:32:52 Segment &{primary failover 1 map[]}
2020/03/18 22:32:52 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:52 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:32:52 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:52 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:32:52 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:32:52 Segment &{transactions 1 map[]}
2020/03/18 22:32:52 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:32:52 Segment &{drivers 1 map[]}
2020/03/18 22:32:52 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:32:52 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:32:52 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:32:52 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:32:52 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:32:52 Segment &{retry stategies 1 map[]}
2020/03/18 22:32:52 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:52 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{don’t retry 1 map[]}
2020/03/18 22:32:52 Whaaat? br
2020/03/18 22:32:52 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:32:52 Whaaat? br
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:32:52 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:32:52 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:32:52 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:32:52 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:32:52 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:32:52 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:32:52 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:52 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:32:52 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:32:52 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:32:52 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:32:52 Segment &{black pipe testing 1 map[]}
2020/03/18 22:32:52 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:32:52 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:32:52 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:32:52 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:32:52 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:32:52 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:32:52 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:32:52 Segment &{hadoop 1 map[]}
2020/03/18 22:32:52 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:52 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:32:52 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:52 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:32:52 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:52 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:32:52 Segment &{great references 1 map[]}
2020/03/18 22:32:52 Segment &{great references 1 map[]}
2020/03/18 22:32:52 Segment &{requisites 1 map[]}
2020/03/18 22:32:52 Segment &{low latency 1 map[]}
2020/03/18 22:32:52 Segment &{low latency 1 map[]}
2020/03/18 22:32:52 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:52 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:32:52 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:52 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:32:52 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:52 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:32:52 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:32:52 Segment &{4. spark 1 map[]}
2020/03/18 22:32:52 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:32:52 Segment &{
on maven 1 map[]}
2020/03/18 22:32:52 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:32:52 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:32:52 Segment &{connecting to spark 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:32:52 Segment &{Mozart 1 map[]}
2020/03/18 22:32:52 Segment &{Urls: 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:32:52 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{development 1 map[]}
2020/03/18 22:32:52 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:32:52 Segment &{and do this: 1 map[]}
2020/03/18 22:32:52 Segment &{page configs 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:32:52 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:52 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:32:52 Segment &{euler-test job:  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{ngrok 1 map[]}
2020/03/18 22:32:52 Segment &{install 1 map[]}
2020/03/18 22:32:52 Segment &{run 1 map[]}
2020/03/18 22:32:52 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:32:52 Segment &{page configs 1 map[]}
2020/03/18 22:32:52 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:32:52 Segment &{mtools 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:52 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:32:52 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:32:52 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:32:52 Segment &{mtools 5 map[]}
2020/03/18 22:32:52 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:32:52 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:32:52 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:32:52 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:32:52 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:32:52 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:32:52 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:32:52 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:32:52 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:32:52 Segment &{  1 map[]}
2020/03/18 22:32:52 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:32:52 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:32:52 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:32:52 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:32:52 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:32:52 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:32:52 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:32:52 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:32:52 Segment &{Recent Changes 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:32:52 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:32:52 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:32:52 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:32:52 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:32:52 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:32:52 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:32:52 Segment &{ for instructions. 1 map[]}
2020/03/18 22:32:52 Segment &{Disclaimer 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:32:52 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:32:52 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:32:52 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:32:52 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:32:52 Segment &{ section here on github. 1 map[]}
2020/03/18 22:32:52 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:32:52 Segment &{mustache 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:32:52 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{conditionals: 5 map[]}
2020/03/18 22:32:52 Segment &{iterations: 5 map[]}
2020/03/18 22:32:52 Segment &{partials: 5 map[]}
2020/03/18 22:32:52 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:32:52 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:32:52 Segment &{Node 1 map[]}
2020/03/18 22:32:52 Segment &{nvm 1 map[]}
2020/03/18 22:32:52 Segment &{Node version manager 1 map[]}
2020/03/18 22:32:52 Segment &{versions 1 map[]}
2020/03/18 22:32:52 Segment &{found in 1 map[]}
2020/03/18 22:32:52 Segment &{alias 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:32:52 Segment &{package managers 1 map[]}
2020/03/18 22:32:52 Segment &{npm 1 map[]}
2020/03/18 22:32:52 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:32:52 Segment &{proxy settings 1 map[]}
2020/03/18 22:32:52 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:32:52 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:32:52 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{apm 1 map[]}
2020/03/18 22:32:52 Segment &{Atom package manager 1 map[]}
2020/03/18 22:32:52 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:32:52 Segment &{php 1 map[]}
2020/03/18 22:32:52 Segment &{pluralsight 1 map[]}
2020/03/18 22:32:52 Segment &{constants 1 map[]}
2020/03/18 22:32:52 Segment &{define: 1 map[]}
2020/03/18 22:32:52 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:32:52 Segment &{existence check 1 map[]}
2020/03/18 22:32:52 Segment &{constants: 5 map[]}
2020/03/18 22:32:52 Segment &{variables 5 map[]}
2020/03/18 22:32:52 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:32:52 Segment &{functions 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{type check 1 map[]}
2020/03/18 22:32:52 Segment &{function 1 map[]}
2020/03/18 22:32:52 Segment &{variable functions: 1 map[]}
2020/03/18 22:32:52 Segment &{make a variable global 5 map[]}
2020/03/18 22:32:52 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:32:52 Segment &{strings 1 map[]}
2020/03/18 22:32:52 Segment &{functions 1 map[]}
2020/03/18 22:32:52 Segment &{docker 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:32:52 Segment &{as per the  1 map[]}
2020/03/18 22:32:52 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:32:52 Segment &{ explanation.. 1 map[]}
2020/03/18 22:32:52 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:32:52 Segment &{project 9 map[]}
2020/03/18 22:32:52 Segment &{ folder, with a  1 map[]}
2020/03/18 22:32:52 Segment &{src 9 map[]}
2020/03/18 22:32:52 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:32:52 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:32:52 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:32:52 Segment &{site.conf 9 map[]}
2020/03/18 22:32:52 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:32:52 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:32:52 Segment &{Run  1 map[]}
2020/03/18 22:32:52 Segment &{docker-compose up 9 map[]}
2020/03/18 22:32:52 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:32:52 Segment &{NOTE: 5 map[]}
2020/03/18 22:32:52 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:32:52 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:32:52 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:32:52 Segment &{site.conf 1 map[]}
2020/03/18 22:32:52 Segment &{cheatsheet 1 map[]}
2020/03/18 22:32:52 Segment &{strings 5 map[]}
2020/03/18 22:32:52 Segment &{date 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{arrays 5 map[]}
2020/03/18 22:32:52 Segment &{numeric example 5 map[]}
2020/03/18 22:32:52 Segment &{functions 5 map[]}
2020/03/18 22:32:52 Segment &{classes 5 map[]}
2020/03/18 22:32:52 Segment &{web 5 map[]}
2020/03/18 22:32:52 Segment &{array 1 map[]}
2020/03/18 22:32:52 Segment &{transform 1 map[]}
2020/03/18 22:32:52 Segment &{map 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{filter 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{reset 1 map[]}
2020/03/18 22:32:52 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:32:52 Segment &{strings 1 map[]}
2020/03/18 22:32:52 Segment &{explode 1 map[]}
2020/03/18 22:32:52 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:32:52 Segment &{example 1 map[]}
2020/03/18 22:32:52 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:32:52 Segment &{postgresql 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:32:52 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:32:52 Segment &{run the daemon: 1 map[]}
2020/03/18 22:32:52 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:32:52 Segment &{cli 1 map[]}
2020/03/18 22:32:52 Segment &{commands: 1 map[]}
2020/03/18 22:32:52 Segment &{snapshots 1 map[]}
2020/03/18 22:32:52 Segment &{take snapshot: 1 map[]}
2020/03/18 22:32:52 Segment &{restore: 1 map[]}
2020/03/18 22:32:52 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:32:52 Segment &{pw log 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:32:52 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:32:52 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:32:52 Segment &{] 1 map[]}
2020/03/18 22:32:52 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:52 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:32:52 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:52 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:32:52 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:52 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:32:52 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:52 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:32:52 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:52 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:32:52 Segment &{hints 1 map[]}
2020/03/18 22:32:52 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:52 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:32:52 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:52 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:32:52 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:52 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:32:52 Segment &{reset 1 map[]}
2020/03/18 22:32:52 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:32:52 Segment &{keys 1 map[]}
2020/03/18 22:32:52 Segment &{textual:  1 map[]}
2020/03/18 22:32:52 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:32:52 Segment &{textual:  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:32:52 Segment &{python 1 map[]}
2020/03/18 22:32:52 Segment &{getting it working 1 map[]}
2020/03/18 22:32:52 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:32:52 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:32:52 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:32:52 Segment &{ as follows: 1 map[]}
2020/03/18 22:32:52 Segment &{useful 1 map[]}
2020/03/18 22:32:52 Segment &{get openssl version 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:32:52 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:32:52 Segment &{user name 5 map[]}
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:32:52 Segment &{API Key 5 map[]}
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:32:52 Segment &{docker 1 map[]}
2020/03/18 22:32:52 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:32:52 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:32:52 Segment &{react 1 map[]}
2020/03/18 22:32:52 Segment &{state 1 map[]}
2020/03/18 22:32:52 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:32:52 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:52 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:32:52 Segment &{refs 1 map[]}
2020/03/18 22:32:52 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:32:52 Segment &{unique key 1 map[]}
2020/03/18 22:32:52 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:32:52 Segment &{key 9 map[]}
2020/03/18 22:32:52 Segment &{ item 1 map[]}
2020/03/18 22:32:52 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:32:52 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:32:52 Segment &{redis 1 map[]}
2020/03/18 22:32:52 Segment &{operations 1 map[]}
2020/03/18 22:32:52 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:32:52 Segment &{redis-cli 9 map[]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 Segment &{keys: 5 map[]}
2020/03/18 22:32:52 Segment &{z-range 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:32:52 Segment &{Regex 1 map[]}
2020/03/18 22:32:52 Segment &{group constructs 1 map[]}
2020/03/18 22:32:52 Segment &{lookahead 1 map[]}
2020/03/18 22:32:52 Segment &{positive lookahead 5 map[]}
2020/03/18 22:32:52 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:52 Segment &{(?=…) 1 map[]}
2020/03/18 22:32:52 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:32:52 Segment &{negative lookahead 5 map[]}
2020/03/18 22:32:52 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:52 Segment &{(?!…) 1 map[]}
2020/03/18 22:32:52 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:32:52 Segment &{lookbehind 1 map[]}
2020/03/18 22:32:52 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:32:52 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:52 Segment &{(?<=…) 1 map[]}
2020/03/18 22:32:52 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:32:52 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:32:52 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:52 Segment &{(?<!…) 1 map[]}
2020/03/18 22:32:52 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:32:52 Segment &{capturing 1 map[]}
2020/03/18 22:32:52 Segment &{non capturing group 5 map[]}
2020/03/18 22:32:52 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:32:52 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:32:52 Segment &{RPM 1 map[]}
2020/03/18 22:32:52 Segment &{sources 1 map[]}
2020/03/18 22:32:52 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{spec file 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:32:52 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:32:52 Segment &{variables 1 map[]}
2020/03/18 22:32:52 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:32:52 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:52 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{building 1 map[]}
2020/03/18 22:32:52 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:32:52 Segment &{You need to have  1 map[]}
2020/03/18 22:32:52 Segment &{rmpbuild 9 map[]}
2020/03/18 22:32:52 Segment &{ installed, so  1 map[]}
2020/03/18 22:32:52 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{Copy  1 map[]}
2020/03/18 22:32:52 Segment &{SOURCES 9 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{SPECS 9 map[]}
2020/03/18 22:32:52 Segment &{ to  1 map[]}
2020/03/18 22:32:52 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:32:52 Segment &{ and  1 map[]}
2020/03/18 22:32:52 Segment &{.../SPECS 9 map[]}
2020/03/18 22:32:52 Segment &{ respectively. 1 map[]}
2020/03/18 22:32:52 Segment &{list 1 map[]}
2020/03/18 22:32:52 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:32:52 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:52 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:32:52 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:32:52 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:32:52 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:32:52 Segment &{scalegrid 1 map[]}
2020/03/18 22:32:52 Segment &{command line access 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:32:52 Segment &{sed 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:32:52 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:32:52 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:32:52 Segment &{substitute (s) 1 map[]}
2020/03/18 22:32:52 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:32:52 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:32:52 Segment &{Selenium 1 map[]}
2020/03/18 22:32:52 Segment &{Webdrivers 1 map[]}
2020/03/18 22:32:52 Segment &{Capabilities 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:32:52 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:32:52 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:32:52 Segment &{Seyren 1 map[]}
2020/03/18 22:32:52 Segment &{Alerts API 1 map[]}
2020/03/18 22:32:52 Segment &{Get check alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:32:52 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:52 Segment &{Get alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Charts API 1 map[]}
2020/03/18 22:32:52 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Return png image 1 map[]}
2020/03/18 22:32:52 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:32:52 Segment &{Return png image 1 map[]}
2020/03/18 22:32:52 Segment &{Checks API 1 map[]}
2020/03/18 22:32:52 Segment &{Search checks 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:32:52 Segment &{See  1 map[]}
2020/03/18 22:32:52 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:32:52 Segment &{Create a check 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ POST 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ POST 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:32:52 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:32:52 Segment &{Get a check 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:52 Segment &{Update a check 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:32:52 Segment &{Delete a check 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:52 Segment &{Config API 1 map[]}
2020/03/18 22:32:52 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /config 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /config 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{Metrics API 1 map[]}
2020/03/18 22:32:52 Segment &{Get metric count 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ GET 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:32:52 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:32:52 Segment &{Create a subscription 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ POST 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ POST 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:32:52 Segment &{Update a subscription 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:52 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ DELETE 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:52 Segment &{Test a subscription 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:52 Segment &{URL 5 map[]}
2020/03/18 22:32:52 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{Method 5 map[]}
2020/03/18 22:32:52 Segment &{ PUT 1 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Segment &{URL Params 5 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{Query Params 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Body 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{None 1 map[]}
2020/03/18 22:32:52 Segment &{Response 5 map[]}
2020/03/18 22:32:52 Whaaat? strong
2020/03/18 22:32:52 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:32:52 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:32:52 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:32:52 Segment &{Spring 1 map[]}
2020/03/18 22:32:52 Segment &{Context annotations 1 map[]}
2020/03/18 22:32:52 Segment &{xml 1 map[]}
2020/03/18 22:32:52 Segment &{in  1 map[]}
2020/03/18 22:32:52 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:32:52 Segment &{, add the following: 1 map[]}
2020/03/18 22:32:52 Segment &{Types 1 map[]}
2020/03/18 22:32:52 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:32:52 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{: any POJO 1 map[]}
2020/03/18 22:32:52 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:32:52 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:32:52 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:32:52 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:32:52 Segment &{@Autowired 9 map[]}
2020/03/18 22:32:52 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:32:52 Segment &{Java configuration 1 map[]}
2020/03/18 22:32:52 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:32:52 Segment &{use  1 map[]}
2020/03/18 22:32:52 Segment &{@Configuration 9 map[]}
2020/03/18 22:32:52 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:52 Segment &{use  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:32:52 Segment &{use  1 map[]}
2020/03/18 22:32:52 Segment &{@Bean 9 map[]}
2020/03/18 22:32:52 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:52 Segment &{use  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:32:52 Segment &{Autowiring 1 map[]}
2020/03/18 22:32:52 Segment &{add  1 map[]}
2020/03/18 22:32:52 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:32:52 Segment &{ annotation to your  1 map[]}
2020/03/18 22:32:52 Segment &{AppConfig 9 map[]}
2020/03/18 22:32:52 Segment &{ class 1 map[]}
2020/03/18 22:32:52 Segment &{Scope 1 map[]}
2020/03/18 22:32:52 Segment &{using scope: 1 map[]}
2020/03/18 22:32:52 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:32:52 Segment &{singleton 1 map[]}
2020/03/18 22:32:52 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:52 Segment &{“singleton” 1 map[]}
2020/03/18 22:32:52 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:32:52 Segment &{prototype 1 map[]}
2020/03/18 22:32:52 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:52 Segment &{“prototype” 1 map[]}
2020/03/18 22:32:52 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:32:52 Segment &{request 1 map[]}
2020/03/18 22:32:52 Segment &{“request” 1 map[]}
2020/03/18 22:32:52 Segment &{“request” 1 map[]}
2020/03/18 22:32:52 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:32:52 Segment &{session 1 map[]}
2020/03/18 22:32:52 Segment &{“session” 1 map[]}
2020/03/18 22:32:52 Segment &{“session” 1 map[]}
2020/03/18 22:32:52 Segment &{Lives per session 1 map[]}
2020/03/18 22:32:52 Segment &{global session 1 map[]}
2020/03/18 22:32:52 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:32:52 Segment &{Properties 1 map[]}
2020/03/18 22:32:52 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:32:52 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:32:52 Segment &{Annotate the value 1 map[]}
2020/03/18 22:32:52 Segment &{in  1 map[]}
2020/03/18 22:32:52 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:32:52 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:32:52 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:32:52 Segment &{UIViewController 1 map[]}
2020/03/18 22:32:52 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:32:52 Segment &{SKScene 1 map[]}
2020/03/18 22:32:52 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:32:52 Segment &{ssh 1 map[]}
2020/03/18 22:32:52 Segment &{ec2 logon 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:32:52 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:32:52 Segment &{setup 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:32:52 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:32:52 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:32:52 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:32:52 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:32:52 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:32:52 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:32:52 Segment &{To logon: 1 map[]}
2020/03/18 22:32:52 Segment &{To end: 1 map[]}
2020/03/18 22:32:52 Segment &{generate 1 map[]}
2020/03/18 22:32:52 Segment &{From the command line: 1 map[]}
2020/03/18 22:32:52 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:32:52 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:32:52 Segment &{view 1 map[]}
2020/03/18 22:32:52 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:32:52 Segment &{scp 1 map[]}
2020/03/18 22:32:52 Segment &{upload: 1 map[]}
2020/03/18 22:32:52 Segment &{download: 1 map[]}
2020/03/18 22:32:52 Segment &{Keys 1 map[]}
2020/03/18 22:32:52 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:32:52 Segment &{id2_rsa 9 map[]}
2020/03/18 22:32:52 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:32:52 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:32:52 Segment &{svn 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:32:52 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:32:52 Segment &{propset 1 map[]}
2020/03/18 22:32:52 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:32:52 Segment &{revert 1 map[]}
2020/03/18 22:32:52 Segment &{delete 1 map[]}
2020/03/18 22:32:52 Segment &{mkdir 1 map[]}
2020/03/18 22:32:52 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:32:52 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:32:52 Segment &{systemd 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:32:52 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{journalctl 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:32:52 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:32:52 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:32:52 Segment &{tar 1 map[]}
2020/03/18 22:32:52 Segment &{create 1 map[]}
2020/03/18 22:32:52 Segment &{unzip 1 map[]}
2020/03/18 22:32:52 Segment &{list files in tar 1 map[]}
2020/03/18 22:32:52 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:32:52 Segment &{tcp/ip 1 map[]}
2020/03/18 22:32:52 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:32:52 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:32:52 Segment &{Protocols 1 map[]}
2020/03/18 22:32:52 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{protocol stack 5 map[]}
2020/03/18 22:32:52 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{gateway 5 map[]}
2020/03/18 22:32:52 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:32:52 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:32:52 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:32:52 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:32:52 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:32:52 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:32:52 Segment &{Architecture 1 map[]}
2020/03/18 22:32:52 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:32:52 Segment &{DARPA 3 map[]}
2020/03/18 22:32:52 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:32:52 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:32:52 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{DARPA Model 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:32:52 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{one to one 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{one to one 1 map[]}
2020/03/18 22:32:52 Segment &{one to one 1 map[]}
2020/03/18 22:32:52 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:52 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:32:52 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:52 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:32:52 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{connectionless 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{connectionless 1 map[]}
2020/03/18 22:32:52 Segment &{connectionless 1 map[]}
2020/03/18 22:32:52 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:52 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:32:52 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{addressing 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{routing 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{addressing 1 map[]}
2020/03/18 22:32:52 Segment &{addressing 1 map[]}
2020/03/18 22:32:52 Segment &{routing 1 map[]}
2020/03/18 22:32:52 Segment &{routing 1 map[]}
2020/03/18 22:32:52 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:52 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:32:52 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:52 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:32:52 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:52 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:32:52 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:32:52 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:52 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:32:52 Segment &{Three way handshake 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:32:52 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:52 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:32:52 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:52 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:32:52 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:52 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:32:52 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:52 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:32:52 Segment &{IP Addresses 1 map[]}
2020/03/18 22:32:52 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:32:52 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:32:52 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:32:52 Segment &{The  1 map[]}
2020/03/18 22:32:52 Segment &{subnet mask 5 map[]}
2020/03/18 22:32:52 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:32:52 Segment &{255 9 map[]}
2020/03/18 22:32:52 Segment &{ and ending in  1 map[]}
2020/03/18 22:32:52 Segment &{0 9 map[]}
2020/03/18 22:32:52 Segment &{.  1 map[]}
2020/03/18 22:32:52 Segment &{255 9 map[]}
2020/03/18 22:32:52 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:32:52 Segment &{0 9 map[]}
2020/03/18 22:32:52 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. 1 map[]}
2020/03/18 22:32:52 Segment &{IP address = 1 map[]}
2020/03/18 22:32:52 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:52 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:32:52 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:32:52 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:32:52 Segment &{192.168.10 9 map[]}
2020/03/18 22:32:52 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:32:52 Segment &{1 9 map[]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 Segment &{to see ip info 1 map[]}
2020/03/18 22:32:52 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:32:52 Segment &{it sends an  1 map[]}
2020/03/18 22:32:52 Segment &{echo request 3 map[]}
2020/03/18 22:32:52 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:32:52 Segment &{man ping 9 map[]}
2020/03/18 22:32:52 Segment &{) 1 map[]}
2020/03/18 22:32:52 Segment &{Rules 1 map[]}
2020/03/18 22:32:52 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:32:52 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:32:52 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:32:52 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:32:52 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:32:52 Segment &{Classes 1 map[]}
2020/03/18 22:32:52 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:32:52 Whaaat? table
2020/03/18 22:32:52 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:32:52 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:32:52 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:32:52 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:32:52 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:52 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:32:52 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:52 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:32:52 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:52 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:32:52 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:52 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:32:52 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:32:52 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:32:52 Segment &{ (NAT). 1 map[]}
2020/03/18 22:32:52 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:32:52 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:32:52 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:32:52 Segment &{Internetworking 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{router 5 map[]}
2020/03/18 22:32:52 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:32:52 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:32:52 Segment &{router 5 map[]}
2020/03/18 22:32:52 Segment &{. This is  1 map[]}
2020/03/18 22:32:52 Segment &{internetworking 5 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{A  1 map[]}
2020/03/18 22:32:52 Segment &{default gateway 5 map[]}
2020/03/18 22:32:52 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:32:52 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:32:52 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:32:52 Segment &{Subnetting 5 map[]}
2020/03/18 22:32:52 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:32:52 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:32:52 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:32:52 Segment &{Solution is to use  1 map[]}
2020/03/18 22:32:52 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:32:52 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:32:52 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:32:52 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:32:52 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:32:52 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:32:52 Segment &{subnets 5 map[]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 Segment &{e.g.  1 map[]}
2020/03/18 22:32:52 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:32:52 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:32:52 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:32:52 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:32:52 Segment &{CIDR notation 5 map[]}
2020/03/18 22:32:52 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:32:52 Segment &{e.g.  1 map[]}
2020/03/18 22:32:52 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:32:52 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:32:52 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:32:52 Segment &{ can be better read as  1 map[]}
2020/03/18 22:32:52 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:32:52 Segment &{. The segment after the  1 map[]}
2020/03/18 22:32:52 Segment &{/ 9 map[]}
2020/03/18 22:32:52 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:32:52 Segment &{IPv6 1 map[]}
2020/03/18 22:32:52 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:32:52 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:32:52 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:32:52 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:32:52 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:32:52 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:52 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:32:52 Segment &{0 9 map[]}
2020/03/18 22:32:52 Segment &{s block with double  1 map[]}
2020/03/18 22:32:52 Segment &{:: 9 map[]}
2020/03/18 22:32:52 Segment &{, ie:  1 map[]}
2020/03/18 22:32:52 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:32:52 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:32:52 Segment &{todo 1 map[]}
2020/03/18 22:32:52 Segment &{lookup 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:32:52 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:52 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:32:52 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:32:52 Whaaat? a
2020/03/18 22:32:52 Segment &{projects 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:32:52 Segment &{logic 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:32:52 Segment &{note-worthy 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:52 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:32:52 Whaaat? br
2020/03/18 22:32:52 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:52 Segment &{:help | :h 9 map[]}
2020/03/18 22:32:52 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:32:52 Segment &{headers as tags 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:32:52 Segment &{bugs 1 map[]}
2020/03/18 22:32:52 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:32:52 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:52 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:32:52 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:52 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:32:52 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:52 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:32:52 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:52 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:32:52 Segment &{markdown [md] 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] sh 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] json 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] scala 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] php 1 map[]}
2020/03/18 22:32:52 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:52 Segment &{global should be protected 1 map[]}
2020/03/18 22:32:52 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:52 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:32:52 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] tables 1 map[]}
2020/03/18 22:32:52 Segment &{bugs 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:32:52 Segment &{cppbt 1 map[]}
2020/03/18 22:32:52 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:52 Segment &{
 1 map[]}
2020/03/18 22:32:52 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:32:52 Segment &{subnets 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:52 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:32:52 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:32:52 Segment &{troubleshoot 1 map[]}
2020/03/18 22:32:52 Segment &{ssl 1 map[]}
2020/03/18 22:32:52 Whaaat? ol
2020/03/18 22:32:52 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:32:52 Segment &{realpath 1 map[]}
2020/03/18 22:32:52 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:32:52 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:32:52 Segment &{Vagrant 1 map[]}
2020/03/18 22:32:52 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:32:52 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:32:52 Segment &{Installation 1 map[]}
2020/03/18 22:32:52 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:32:52 Segment &{Usage 1 map[]}
2020/03/18 22:32:52 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:32:52 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:32:52 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:32:52 Segment &{That’s it! 1 map[]}
2020/03/18 22:32:52 Segment &{Examples 1 map[]}
2020/03/18 22:32:52 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:32:52 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:32:52 Segment &{Vagrant version 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:32:52 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:32:52 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:32:52 Segment &{. 1 map[]}
2020/03/18 22:32:52 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:32:52 Segment &{vim 1 map[]}
2020/03/18 22:32:52 Segment &{commands 1 map[]}
2020/03/18 22:32:52 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:32:52 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:32:52 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:32:52 Segment &{In command mode: 1 map[]}
2020/03/18 22:32:52 Segment &{Saving 5 map[]}
2020/03/18 22:32:52 Segment &{:
+  1 map[]}
2020/03/18 22:32:52 Segment &{:wq 9 map[]}
2020/03/18 22:32:52 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:32:52 Segment &{:q! 9 map[]}
2020/03/18 22:32:52 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:32:52 Segment &{Editing 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{x 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete 1 map[]}
2020/03/18 22:32:52 Segment &{x 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete 1 map[]}
2020/03/18 22:32:52 Segment &{u 9 map[]}
2020/03/18 22:32:52 Segment &{ - undo 1 map[]}
2020/03/18 22:32:52 Segment &{u 9 map[]}
2020/03/18 22:32:52 Segment &{ - undo 1 map[]}
2020/03/18 22:32:52 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:52 Segment &{ - redo 1 map[]}
2020/03/18 22:32:52 Segment &{ctrl-r 9 map[]}
2020/03/18 22:32:52 Segment &{ - redo 1 map[]}
2020/03/18 22:32:52 Segment &{dw 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:52 Segment &{dw 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:32:52 Segment &{2w 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:52 Segment &{2w 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:32:52 Segment &{3e 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:52 Segment &{3e 9 map[]}
2020/03/18 22:32:52 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:32:52 Segment &{0 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:52 Segment &{0 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:32:52 Segment &{$ 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:52 Segment &{$ 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:32:52 Segment &{e 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:52 Segment &{e 9 map[]}
2020/03/18 22:32:52 Segment &{ - move to next word 1 map[]}
2020/03/18 22:32:52 Segment &{d2w 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:52 Segment &{d2w 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete two words 1 map[]}
2020/03/18 22:32:52 Segment &{dd 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:52 Segment &{dd 9 map[]}
2020/03/18 22:32:52 Segment &{ - delete the line 1 map[]}
2020/03/18 22:32:52 Segment &{yy 9 map[]}
2020/03/18 22:32:52 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:52 Segment &{yy 9 map[]}
2020/03/18 22:32:52 Segment &{ - copy line 1 map[]}
2020/03/18 22:32:52 Segment &{p 9 map[]}
2020/03/18 22:32:52 Segment &{ - paste 1 map[]}
2020/03/18 22:32:52 Segment &{p 9 map[]}
2020/03/18 22:32:52 Segment &{ - paste 1 map[]}
2020/03/18 22:32:52 Segment &{Modes 5 map[]}
2020/03/18 22:32:52 Segment &{: 1 map[]}
2020/03/18 22:32:52 Segment &{i 9 map[]}
2020/03/18 22:32:52 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:32:52 Segment &{a 9 map[]}
2020/03/18 22:32:52 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:32:52 Segment &{A 9 map[]}
2020/03/18 22:32:52 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - append text at end 1 map[]}
2020/03/18 22:32:52 Segment &{a 9 map[]}
2020/03/18 22:32:52 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - append text at 1 map[]}
2020/03/18 22:32:52 Segment &{O 9 map[]}
2020/03/18 22:32:52 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:32:52 Segment &{o 9 map[]}
2020/03/18 22:32:52 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:32:52 Segment &{V 9 map[]}
2020/03/18 22:32:52 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{ - visual mode 1 map[]}
2020/03/18 22:32:52 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:32:52 Segment &{yum 1 map[]}
2020/03/18 22:32:52 Segment &{search 1 map[]}
2020/03/18 22:32:52 Segment &{list 1 map[]}
2020/03/18 22:32:52 Segment &{repositories 1 map[]}
2020/03/18 22:32:52 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:32:52 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:32:52 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:32:52 Segment &{packages 1 map[]}
2020/03/18 22:32:52 Segment &{g++ 9 map[]}
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{rpmbuild 9 map[]}
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:32:52 Segment &{:  1 map[]}
2020/03/18 22:32:52 Whaaat? code
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/_DUMP.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/_img
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/akka.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/amazon_web_services.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/apache.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/aws-cli.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/aws.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/bash.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/brew.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/browserstack.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/c.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/camel.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/capybara.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/centos.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/certs.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/claim-review.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/coffeescript.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/components.aux
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/cosmos-cli.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/cps-vivo
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/curl.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/curses.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/d.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/dagger.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/docker.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/dot.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/enterprise-engineering.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/eslint.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/gcc.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/gdpr.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/git-cheat-sheet.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/git.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/glossary.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/gnuplot.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/grep.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/grunt.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/install-mongo-script.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/iplayer-regression.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/jasmine.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/libexec.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/lsof.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/markdown.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/maven.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/media-services
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/mongo.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/mongo_conference_2016.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/mozart.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/mtools_readme.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/mustache.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/node.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/npm.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/php.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/postgres.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/pwlog.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/python.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/r-and-d-artifactory.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/react.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/redis.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/regex.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/rms
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/rpm.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/ruby
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/scala-java
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/scalegrid.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/sed.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/selenium.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/seyren.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/spring.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/sprite-kit.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/ssh.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/svn.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/systemd.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/tar.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/tcp-ip.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/todo.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/training
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/troubleshoot.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/utils.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/vagrant.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/vim.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/weather
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/world-service
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy/yum.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:33:02 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:33:02 <h1>DUMP</h1>

<p>Put random notes here and I will sort them later</p>

<h2>netstat</h2>

<p>(or <code>ss</code>)</p>

<p><a href="http://www.noah.org/wiki/Port_to_PID">http://www.noah.org/wiki/Port_to_PID</a></p>

<p>find the port for a given process or pid</p>

<h2>libexec</h2>

<p>already made the file, just need to add content as I don&rsquo;t know what it is?</p>

<h2>ack</h2>

<h2>speedtest</h2>

<p><a href="http://www.speedtest.net/run">http://www.speedtest.net/run</a></p>

<h2>rsync</h2>

<p>rsync &ndash; a fast, versatile, remote (and local) file-copying tool</p>

<p><a href="https://linux.die.net/man/1/rsync">https://linux.die.net/man/1/rsync</a></p>

<h2>kubernetes</h2>

<h2>hls</h2>

<p>HTTP Live Streaming</p>
2020/03/18 22:33:02 Segment &{DUMP 1 map[]}
2020/03/18 22:33:02 Segment &{Put random notes here and I will sort them later 1 map[]}
2020/03/18 22:33:02 Segment &{netstat 1 map[]}
2020/03/18 22:33:02 Segment &{(or  1 map[]}
2020/03/18 22:33:02 Segment &{ss 9 map[]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://www.noah.org/wiki/Port_to_PID}]. raw = 'http://www.noah.org/wiki/Port_to_PID'
2020/03/18 22:33:02 Segment &{http://www.noah.org/wiki/Port_to_PID 17 map[href:http://www.noah.org/wiki/Port_to_PID]}
2020/03/18 22:33:02 Segment &{find the port for a given process or pid 1 map[]}
2020/03/18 22:33:02 Segment &{libexec 1 map[]}
2020/03/18 22:33:02 Segment &{already made the file, just need to add content as I don’t know what it is? 1 map[]}
2020/03/18 22:33:02 Segment &{ack 1 map[]}
2020/03/18 22:33:02 Segment &{speedtest 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://www.speedtest.net/run}]. raw = 'http://www.speedtest.net/run'
2020/03/18 22:33:02 Segment &{http://www.speedtest.net/run 17 map[href:http://www.speedtest.net/run]}
2020/03/18 22:33:02 Segment &{rsync 1 map[]}
2020/03/18 22:33:02 Segment &{rsync – a fast, versatile, remote (and local) file-copying tool 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://linux.die.net/man/1/rsync}]. raw = 'https://linux.die.net/man/1/rsync'
2020/03/18 22:33:02 Segment &{https://linux.die.net/man/1/rsync 17 map[href:https://linux.die.net/man/1/rsync]}
2020/03/18 22:33:02 Segment &{kubernetes 1 map[]}
2020/03/18 22:33:02 Segment &{hls 1 map[]}
2020/03/18 22:33:02 Segment &{HTTP Live Streaming 1 map[]}
2020/03/18 22:33:02 <h1>akka</h1>

<h2>overview</h2>

<p>Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor</p>

<p><strong>domain approach:</strong>
- system models a domain, with entities in your system, like &lsquo;customers&rsquo;
- actors may have a state</p>

<p><strong>worker systems:</strong>
- each actor performs specific tasks
- actors don&rsquo;t have a state</p>

<p><strong>messaging styles:</strong>
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast</p>

<p>Generally you don&rsquo;t wait for a reply</p>

<p>the Actor trait implements a single function:</p>

<pre><code class="language-scala">def receive(message: Message) // the only method to implement
</code></pre>

<p>So it&rsquo;s very trivial to set up an akka system.</p>

<h2>creating actors</h2>

<h3>messages</h3>

<pre><code class="language-scala">import akka.actor.ActorRef

package object akka {
 sealed abstract class Message

 case class PlaceOrder(qty: Int, om: ActorRef) extends Message
 case class NewOrder(qty: Int) extends Message
 case class SendAck(qty: Int) extends Message

}
</code></pre>

<h3>actors</h3>

<pre><code class="language-scala">package akka

import akka.actor._

class OrderManager extends Actor {
  println(&quot;Creating OM&quot;)

  override def receive() = {
    case NewOrder(qty) =&gt;
      println(&quot;OM: Ordering &quot; + qty)
      sender ! SendAck(qty)
  }
}
</code></pre>

<pre><code class="language-scala">package akka

import akka.actor._

class Broker extends Actor {
  override def receive() = { // pattern match on the message
    case PlaceOrder(qty, om) =&gt;
      println(s&quot;Received order $qty&quot;)
      om ! NewOrder(qty)
  }
}
</code></pre>

<h3>actor system</h3>

<pre><code class="language-scala">package akka

import akka.actor._

object MyApp extends App {

  val orderSystem = ActorSystem(&quot;OrderSystem&quot;)
  val broker = orderSystem.actorOf(Props.create(classOf[Broker]),name=&quot;broker&quot;)
  val om1 = orderSystem.actorOf(Props.create(classOf[OrderManager]), name=&quot;om1&quot;)

  broker ! PlaceOrder(100, om1)
  Thread.sleep(5000)
}
</code></pre>

<p>Actors are never revealed (i.e. passed around), you use <code>ActorRef</code> instead (like a pointer to an actor)</p>

<p>Remember to use <code>self</code> rather than <code>this</code> when refering to &lsquo;self&rsquo;, as <code>self</code> gives the actor ref, <code>this</code> gives us the Actor</p>

<h2>actor system</h2>

<p><code>actorOf</code> returns an ActorRef, rather than an actor:</p>

<pre><code class="language-scala">val actor = actorSystem.actorOf(Props.create(classOf[Actor], constructorParam1, constructorParam2), name = &quot;actor&quot;)
</code></pre>

<h2>message</h2>

<pre><code class="language-scala">actorRef.tell(message)
actorRef ! message
: no response

actorRef.ask(message)
actorRef ? message
: expect a response
</code></pre>

<h2>error handling</h2>

<p>When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a <strong>supervisor</strong> of the child</p>

<p>The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name &amp; id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself)</p>

<p>restarting and stopping will affect descendants of the actor</p>

<p><strong>strategies</strong></p>

<ol>
<li><code>OneForOne</code></li>
<li><code>AllForOne</code></li>
</ol>

<h2>supervision</h2>

<h3>strategies</h3>

<pre><code class="language-scala">import scala.concurrent.duration._

class MySupervisor extends Actor {
  override val supervisorStrategy = OneForOneStrategy(5, 1 minute) {
    //  ...
  }
  // create child actors here
}
</code></pre>

<h3>actor paths</h3>

<p>We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child</p>

<pre><code class="language-scala">context.actorSelection(&quot;/user/actor1&quot;) ! msg
context.actorSelection(&quot;../actor1&quot;) ! msg

//using wildcards:

context.actorSelection(&quot;../actor*&quot;) ! msg
</code></pre>

<h3>monitoring</h3>

<p>Usually called &ldquo;death watch&rdquo;. This is when an actor can receive a message of the death of an actor it&rsquo;s interested in the state of the actor. This means the &lsquo;watcher&rsquo; will receive a terminated message if it dies.</p>

<pre><code class="language-scala">val myActor = context.actorOf(&quot;foo&quot;)
context watch myActor

def receive() {
  case Terminated(a) =&gt; println(&quot;He's dead Jim!&quot;)
}
</code></pre>

<h3>lifecycle</h3>

<pre><code class="language-scala">class myActor extends Actor {
  override def preStart {
    // on initialize
  }

  override def postStop {
    // executes when the actor stops
  }
}

// also a preRestart and others apparently
</code></pre>

<h2>dispatching</h2>

<ul>
<li>Dispatcher is the threading models</li>
<li>Mailbox is the queueing model</li>
</ul>

<p>The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who&rsquo;s available. This needs a custom dispatcher</p>

<p>Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn&rsquo;t create new threads
    - only used for testing</p>

<h3>scheduling</h3>

<p>You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well</p>

<pre><code class="language-scala">import context.dispatcher
import scala.concurrent.duration._

// within the body of an actor

val p = context.system.scheduler.schedule(
  0 milliseconds,      // delay before first
  500 milliseconds,    // delay between firing
  self,                // actor to send to
  msg                  // what to send
)
// when you no longer want it
p.cancel

//or from the actor system:

val p = scheduler.schedule ( /*...*/ )
</code></pre>

<h3>dead letter</h3>

<p>This is a queue of messages that cannot be delivered</p>

<p>Actors can subscribe to this queue</p>

<h2>routing</h2>

<p>You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs</p>

<p>Routers implement one of two strategies:</p>

<ol>
<li>Pool: is in charge of creating its own routees, and can manage the lifecycle of the routees</li>
<li>Group: is given a list of routees and has no say over the list</li>
</ol>

<p>There are pre-defined routers found in <code>akka.routing</code>, and you can write your own</p>

<h3>example</h3>

<pre><code class="language-scala">import akka.routing._

class Master extends Actor {

 var router = {
   val routees = Vector.fill(5) {
     val r = context.actorOf(Props[Worker])
     context watch r
     ActorRefRoutee(r)
   }
   Router(RoundRobinRoutingLogic(), routees)
 }

 def receive = { ... }

}

//===========================================================

import akka.routing._

class Master extends Actor {

 var router = { ... }

 def receive = {
   case w: Work =&gt;
     router.route(w, sender())
   case Terminated(a) =&gt;
     router = router.removeRoutee(a)
     val r = context.actorOf(Props[Worker])
     context watch r
     router = router.addRoutee(r)
 }

}
</code></pre>

<h3>strategies</h3>

<ol>
<li>RoundRobinRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>RandomRoutingLogic</li>
<li>BroadcastRoutingLogic</li>
<li>ScatterGatherFirstCompletedRoutingLogic</li>
<li>ConsistentHashingRoutingLogic</li>
</ol>

<h3>creating routers</h3>

<pre><code class="language-scala">val router2: ActorRef =
 context.actorOf(RoundRobinPool(5).props(Props[Worker]), &quot;router2&quot;)
</code></pre>

<h2>akka streams</h2>

<h3>split and aggregate</h3>

<p>Tricky to do, but can be achieved like so:</p>

<pre><code class="language-scala">package bbc.rms.littlemix

import akka.NotUsed
import akka.actor.ActorSystem
import akka.stream._
import akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition, Source}

import scala.concurrent.ExecutionContextExecutor
import scala.concurrent.duration._

case class Thing(id: Int)
case class Thong(id: Int)

object StreamsMain extends App {

  implicit val system: ActorSystem = ActorSystem(&quot;test&quot;)
  implicit def executor: ExecutionContextExecutor = system.dispatcher
  val settings: ActorMaterializerSettings = ActorMaterializerSettings(system)
  implicit val materializer: ActorMaterializer = ActorMaterializer(settings)

  val source = Source.repeat(1)

  val getMany: Flow[Any, Seq[Thing], NotUsed] = Flow[Any].map(_ =&gt; (0 to 100).map(Thing.apply))

  val split: Flow[Seq[Thing], Thing, NotUsed] = Flow[Seq[Thing]].mapConcat(_.toList)

  def printStream[T] = Flow[T].map { f =&gt;
    println(f)
    f
  }

  val toThong = Flow[Thing].map(t =&gt; Thong(t.id))

  def aggregate[T](seq: Seq[T], t: T) = seq :+ t

  def throttle[T] = Flow[T].throttle(1, 1000.milliseconds, 1, ThrottleMode.shaping)

  source
    .via(throttle)
    .via(getMany)
    .splitWhen(_ =&gt; true)
    .via(split)
    .via(toThong)
    .fold(Seq.empty[Thong])(aggregate)
    .mergeSubstreams
    .runForeach(println)
}
</code></pre>
2020/03/18 22:33:02 Segment &{akka 1 map[]}
2020/03/18 22:33:02 Segment &{overview 1 map[]}
2020/03/18 22:33:02 Segment &{Akka is an actor based system, a system that manages concurrency by acting on messages. The depracated scala.Actor was deprecated in favour of the akka.Actor 1 map[]}
2020/03/18 22:33:02 Segment &{domain approach: 5 map[]}
2020/03/18 22:33:02 Segment &{
- system models a domain, with entities in your system, like ‘customers’
- actors may have a state 1 map[]}
2020/03/18 22:33:02 Segment &{worker systems: 5 map[]}
2020/03/18 22:33:02 Segment &{
- each actor performs specific tasks
- actors don’t have a state 1 map[]}
2020/03/18 22:33:02 Segment &{messaging styles: 5 map[]}
2020/03/18 22:33:02 Segment &{
- one-way
- request response: expects a future of a response
- asynchronous response: get a separate message from the actor
- broadcast 1 map[]}
2020/03/18 22:33:02 Segment &{Generally you don’t wait for a reply 1 map[]}
2020/03/18 22:33:02 Segment &{the Actor trait implements a single function: 1 map[]}
2020/03/18 22:33:02 Segment &{So it’s very trivial to set up an akka system. 1 map[]}
2020/03/18 22:33:02 Segment &{creating actors 1 map[]}
2020/03/18 22:33:02 Segment &{messages 1 map[]}
2020/03/18 22:33:02 Segment &{actors 1 map[]}
2020/03/18 22:33:02 Segment &{actor system 1 map[]}
2020/03/18 22:33:02 Segment &{Actors are never revealed (i.e. passed around), you use  1 map[]}
2020/03/18 22:33:02 Segment &{ActorRef 9 map[]}
2020/03/18 22:33:02 Segment &{ instead (like a pointer to an actor) 1 map[]}
2020/03/18 22:33:02 Segment &{Remember to use  1 map[]}
2020/03/18 22:33:02 Segment &{self 9 map[]}
2020/03/18 22:33:02 Segment &{ rather than  1 map[]}
2020/03/18 22:33:02 Segment &{this 9 map[]}
2020/03/18 22:33:02 Segment &{ when refering to ‘self’, as  1 map[]}
2020/03/18 22:33:02 Segment &{self 9 map[]}
2020/03/18 22:33:02 Segment &{ gives the actor ref,  1 map[]}
2020/03/18 22:33:02 Segment &{this 9 map[]}
2020/03/18 22:33:02 Segment &{ gives us the Actor 1 map[]}
2020/03/18 22:33:02 Segment &{actor system 1 map[]}
2020/03/18 22:33:02 Segment &{actorOf 9 map[]}
2020/03/18 22:33:02 Segment &{ returns an ActorRef, rather than an actor: 1 map[]}
2020/03/18 22:33:02 Segment &{message 1 map[]}
2020/03/18 22:33:02 Segment &{error handling 1 map[]}
2020/03/18 22:33:02 Segment &{When creating an actor from the ActorSystem, the actor is at the top level context. Creating an actor from witin an actor context, that actor is a child of the parent actor and the parent is a  1 map[]}
2020/03/18 22:33:02 Segment &{supervisor 5 map[]}
2020/03/18 22:33:02 Segment &{ of the child 1 map[]}
2020/03/18 22:33:02 Segment &{The supervisor is responsible for deciding what happens if an actor fails with an exception. The most common response is that the policy is applied to the failed child
1. resume: reset the state of the child
2. restart: destroy and recreate the instance - same name & id (mailbox survives)
3. stop: kills the actor completely, as well as inherited children
4. escalate: escalate the failure (failing itself) 1 map[]}
2020/03/18 22:33:02 Segment &{restarting and stopping will affect descendants of the actor 1 map[]}
2020/03/18 22:33:02 Segment &{strategies 5 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{supervision 1 map[]}
2020/03/18 22:33:02 Segment &{strategies 1 map[]}
2020/03/18 22:33:02 Segment &{actor paths 1 map[]}
2020/03/18 22:33:02 Segment &{We can find actors with their actor paths:
- akka.tcp://sys@host:2552/user/parent/child 1 map[]}
2020/03/18 22:33:02 Segment &{monitoring 1 map[]}
2020/03/18 22:33:02 Segment &{Usually called “death watch”. This is when an actor can receive a message of the death of an actor it’s interested in the state of the actor. This means the ‘watcher’ will receive a terminated message if it dies. 1 map[]}
2020/03/18 22:33:02 Segment &{lifecycle 1 map[]}
2020/03/18 22:33:02 Segment &{dispatching 1 map[]}
2020/03/18 22:33:02 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:33:02 Segment &{Dispatcher is the threading models 1 map[]}
2020/03/18 22:33:02 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:33:02 Segment &{Mailbox is the queueing model 1 map[]}
2020/03/18 22:33:02 Segment &{The shared mailbox is different, allowing you to create a sort of load balancer, sending messages to actors based on who’s available. This needs a custom dispatcher 1 map[]}
2020/03/18 22:33:02 Segment &{Dispatchers are execution contexts. several option:
1. Dispatcher
    - default
    - one mb per actor
    - works with any kind of actor
2. PinnedDispatcher
    - each actor gets its own thread
    - works with any kind of actor
    - uses a thread pool executor
3. BalancingDispatcher
    - tries to balance between actors
    - has one mailbox
    - can only work with actors of the same type
4. CallingThreadDispatcher:
    - diapatches on calling thread
    - doesn’t create new threads
    - only used for testing 1 map[]}
2020/03/18 22:33:02 Segment &{scheduling 1 map[]}
2020/03/18 22:33:02 Segment &{You can schedule the execution of messages into actors. We can schedule based on context and an actor. We can cancel as well 1 map[]}
2020/03/18 22:33:02 Segment &{dead letter 1 map[]}
2020/03/18 22:33:02 Segment &{This is a queue of messages that cannot be delivered 1 map[]}
2020/03/18 22:33:02 Segment &{Actors can subscribe to this queue 1 map[]}
2020/03/18 22:33:02 Segment &{routing 1 map[]}
2020/03/18 22:33:02 Segment &{You can create a perfectly scalable system by setting up routers for each of your actor classes, and you can spin up as many actors for each of those routers as your application needs 1 map[]}
2020/03/18 22:33:02 Segment &{Routers implement one of two strategies: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{There are pre-defined routers found in  1 map[]}
2020/03/18 22:33:02 Segment &{akka.routing 9 map[]}
2020/03/18 22:33:02 Segment &{, and you can write your own 1 map[]}
2020/03/18 22:33:02 Segment &{example 1 map[]}
2020/03/18 22:33:02 Segment &{strategies 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{creating routers 1 map[]}
2020/03/18 22:33:02 Segment &{akka streams 1 map[]}
2020/03/18 22:33:02 Segment &{split and aggregate 1 map[]}
2020/03/18 22:33:02 Segment &{Tricky to do, but can be achieved like so: 1 map[]}
2020/03/18 22:33:02 <h1>amazon web services [amazon cloud;aws]</h1>

<h2>links [links]</h2>

<ul>
<li><a href="https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/">prezi aws regions</a></li>
<li><a href="http://training.conygre.com/aws/">conygre training</a></li>
</ul>

<h2>console [&ldquo;console login&rdquo;]</h2>

<ul>
<li><a href="https://platform-cps-dev.signin.aws.amazon.com/console">dev</a>
  <a href="https://platform-cps-dev.signin.aws.amazon.com/console">https://platform-cps-dev.signin.aws.amazon.com/console</a></li>
<li><a href="https://platform-cps-prod.signin.aws.amazon.com/console">prod</a>
  <a href="https://platform-cps-prod.signin.aws.amazon.com/console">https://platform-cps-prod.signin.aws.amazon.com/console</a></li>
</ul>
2020/03/18 22:33:02 Segment &{amazon web services [amazon cloud;aws] 1 map[]}
2020/03/18 22:33:02 Segment &{links [links] 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/}]. raw = 'prezi aws regions'
2020/03/18 22:33:02 Segment &{prezi aws regions 17 map[href:https://prezi.com/cxpwi_og7lht/aws-regions-and-availability-zones/]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 >>>>> atts = [{ href http://training.conygre.com/aws/}]. raw = 'conygre training'
2020/03/18 22:33:02 Segment &{conygre training 17 map[href:http://training.conygre.com/aws/]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{console [“console login”] 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'dev'
2020/03/18 22:33:02 >>>>> atts = [{ href https://platform-cps-dev.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-dev.signin.aws.amazon.com/console'
2020/03/18 22:33:02 Segment &{dev 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:33:02 Segment &{
   1 map[]}
2020/03/18 22:33:02 Segment &{https://platform-cps-dev.signin.aws.amazon.com/console 17 map[href:https://platform-cps-dev.signin.aws.amazon.com/console]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{
   1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'prod'
2020/03/18 22:33:02 >>>>> atts = [{ href https://platform-cps-prod.signin.aws.amazon.com/console}]. raw = 'https://platform-cps-prod.signin.aws.amazon.com/console'
2020/03/18 22:33:02 Segment &{prod 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:33:02 Segment &{
   1 map[]}
2020/03/18 22:33:02 Segment &{https://platform-cps-prod.signin.aws.amazon.com/console 17 map[href:https://platform-cps-prod.signin.aws.amazon.com/console]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{
   1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 <h1>apache</h1>

<h2>local server</h2>

<p><strong>apache config</strong>:
&gt; /etc/apache2/httpd.conf<br />
&gt; /etc/apache2/users</p>

<h2>config changes</h2>

<p>in <code>/etc/apache2/httpd.conf</code>: uncommented</p>

<pre><code>LoadModule php5_module libexec/apache2/libphp5.so
LoadModule userdir_module libexec/apache2/mod_userdir.so
LoadModule alias_module libexec/apache2/mod_alias.so
LoadModule rewrite_module libexec/apache2/mod_rewrite.so
LoadModule

# Virtual hosts
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p>In <code>/etc/apache2/extra/httpd-userdir.conf</code>, uncommented:</p>

<pre><code>Include /private/etc/apache2/users/*.conf
</code></pre>

<h2>commands</h2>

<pre><code class="language-sh"># restart the apache server? Not sure it that's the correct jargon
sudo apachectl restart
</code></pre>

<h1>ab (Apache Benchmark)</h1>

<p>Apache Benchmark</p>

<h2>usage</h2>

<pre><code class="language-sh">ab [options] [http[s]://]hostname[:port]/path
</code></pre>
2020/03/18 22:33:02 Segment &{apache 1 map[]}
2020/03/18 22:33:02 Segment &{local server 1 map[]}
2020/03/18 22:33:02 Segment &{apache config 5 map[]}
2020/03/18 22:33:02 Segment &{:
> /etc/apache2/httpd.conf 1 map[]}
2020/03/18 22:33:02 Segment &{
> /etc/apache2/users 1 map[]}
2020/03/18 22:33:02 Segment &{config changes 1 map[]}
2020/03/18 22:33:02 Segment &{in  1 map[]}
2020/03/18 22:33:02 Segment &{/etc/apache2/httpd.conf 9 map[]}
2020/03/18 22:33:02 Segment &{: uncommented 1 map[]}
2020/03/18 22:33:02 Segment &{In  1 map[]}
2020/03/18 22:33:02 Segment &{/etc/apache2/extra/httpd-userdir.conf 9 map[]}
2020/03/18 22:33:02 Segment &{, uncommented: 1 map[]}
2020/03/18 22:33:02 Segment &{commands 1 map[]}
2020/03/18 22:33:02 Segment &{ab (Apache Benchmark) 1 map[]}
2020/03/18 22:33:02 Segment &{Apache Benchmark 1 map[]}
2020/03/18 22:33:02 Segment &{usage 1 map[]}
2020/03/18 22:33:02 <h1>AWS CLI</h1>

<h2>Install</h2>

<h2>Configure</h2>

<h3>Profiles</h3>

<p>To use a Profile <code>--profile &lt;name&gt;</code> in the command</p>

<h2><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs">SQS</a></h2>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html">Receive</a></h3>

<pre><code class="language-sh">aws sqs receive-messages \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;message-body&gt; \

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html">Send</a></h3>

<pre><code class="language-sh">aws sqs send-message \
    --queue-url &lt;queue-url&gt; \
    --message-body &lt;body&gt; \
    --delay-seconds 10 \
    --message-attributes file://send-message.json

</code></pre>

<h3><a href="http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html">Purge</a></h3>
2020/03/18 22:33:02 Segment &{AWS CLI 1 map[]}
2020/03/18 22:33:02 Segment &{Install 1 map[]}
2020/03/18 22:33:02 Segment &{Configure 1 map[]}
2020/03/18 22:33:02 Segment &{Profiles 1 map[]}
2020/03/18 22:33:02 Segment &{To use a Profile  1 map[]}
2020/03/18 22:33:02 Segment &{--profile <name> 9 map[]}
2020/03/18 22:33:02 Segment &{ in the command 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs}]. raw = 'SQS'
2020/03/18 22:33:02 Segment &{SQS 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html#cli-aws-sqs]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html}]. raw = 'Receive'
2020/03/18 22:33:02 Segment &{Receive 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/receive-message.html]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html}]. raw = 'Send'
2020/03/18 22:33:02 Segment &{Send 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/send-message.html]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html}]. raw = 'Purge'
2020/03/18 22:33:02 Segment &{Purge 17 map[href:http://docs.aws.amazon.com/cli/latest/reference/sqs/purge-queue.html]}
2020/03/18 22:33:02 <h1>AWS Architecting</h1>

<ul>
<li>labs: <a href="https://qa.qwiklabs.com/">https://qa.qwiklabs.com/</a></li>
</ul>

<h2>Acronyms</h2>

<ul>
<li>WAF: Web Application Firewall</li>
<li>AMI: Amazon Machine Image</li>
<li>ECR: ? Docker images</li>
<li>OU: Organisational Unit</li>
<li>HPC: High Performance Computing</li>
<li>VPC: Virtual Private &hellip;.</li>
<li>BGP: Border Gateway Protocol</li>
<li>VGW: Virtual GateWay</li>
<li>HSM: Hardware Security Module</li>
</ul>

<h2>Protocols</h2>

<ul>
<li>RDP: Remote Desktop Protocol</li>
</ul>

<h2>Services</h2>

<h3>Well Architected Tool</h3>

<p>Goes through a checklist of architecture decisions to ensure you&rsquo;re built the thing well</p>

<h3>AWS Licence Manager</h3>

<p>manage software licences across one or more accounts</p>

<h3>CloudTrail</h3>

<p>reveals account activity</p>

<h3>AWS Config</h3>

<p>Snapshots config of AWS account</p>

<h3>Active Directory Service</h3>

<h3>Private Link</h3>

<p>VPS network endpoints</p>

<h3>AWS Shield</h3>

<p>Protects from DDoS attacks</p>

<h3>AWS Guard duty</h3>

<p>analyses flow logs to detect abnormal behaviour and sends notifications.</p>

<h3>Certificate Manager</h3>

<p>request public trusted certificates</p>

<h2>Module 0</h2>

<h3>Best Practicies</h3>

<ol>
<li>Scalabilty
Use ASGs</li>
<li>Automation
Automate provision/termination/config of services</li>
<li>Use disposable resources
Shouldn&rsquo;t run when not needed</li>
<li>Loosely couple components
Put load balancers in from of things</li>
<li>Design services not servers
Use things like lambdas, topics, queues</li>
<li>Choose the right DB
SQL, NOSQL, Graph, Cache. Thinking about
read/writes, storage requirements, querying, nature of objects etc</li>
<li>Avoid single point of failure
ASG&rsquo;s, Database replicas, etc</li>
<li>Optimise for cost
Make sure services are configured for needs</li>
<li>Use Caching
Minimises latency. E.g. Cloudfront.
Also saves costs</li>
<li>Secure your infrastructure
Security in every layer. Use security groups. Use MFA</li>
</ol>

<h3>Well Architected Framework</h3>

<ul>
<li>stop guessing capacity needs</li>
<li>test systems at production scale</li>
<li>lower the risk of architecture changes</li>
<li>automate to make experimentation easier</li>
<li>allow for evolutionary architecture</li>
</ul>

<h2>Module 1: Account Management</h2>

<p>Larger companies with several departments/environments - make use of multiple accounts.</p>

<p>Service limits apply per account.</p>

<p>IAM Organisations - specify service limits for accounts in an organisation.</p>

<p>AWS Support is also per account.</p>

<h3>Multi Account Patterns</h3>

<h3>Independent accounts - no integration</h3>

<p>no integration</p>

<h4>Centrally controlled multi-accounts</h4>

<p>Best use case for separate environments.</p>

<ul>
<li>centralised control</li>
<li>single bill</li>
<li>single instance pools</li>
<li>complex admin</li>
</ul>

<h4>Multi Payer, multi-accounts</h4>

<p>like above, but costs are per account</p>

<h3>security</h3>

<p>Can configure permissions by team.</p>

<p><strong>Cross Account Roles</strong> can be made.</p>

<h3>Policy based management</h3>

<p><strong>Service control policy</strong> is not an IAM policy.</p>

<p>Lets you blacklist/whitelist services.</p>

<p>If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions!</p>

<p>Create an organisation.</p>

<h3>Consolidated billing</h3>

<h3>Resource groups</h3>

<p>can define groups based on tags.</p>

<h2>Module 2</h2>

<h3>VPC Peering</h3>

<h3>EC2</h3>

<p>instances for advanced networking.</p>

<p>Create an <strong>enhanced network interface</strong>.</p>

<p>can choose &ldquo;spread&rdquo; clustering when creating ec2 instance.</p>

<h3>Clusering vs Grid</h3>

<p>grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ</p>

<p>grids more resilient but increased latency.</p>

<h3>VPN Connections</h3>

<p>can be static or dynamic</p>

<p>static = specify all routes</p>

<h3>BGP</h3>

<p>&ldquo;navigation system for the internet&rdquo;</p>

<h2>DDos Attacks</h2>

<p>OSI is a networking model</p>

<p>AWS services don&rsquo;t accept malformed packages, so are safe(ish?) from layer 3-4 attacks.</p>

<p>You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example. <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html</a></p>

<h3>Scaling</h3>

<p>should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance</p>

<h2>Lookup</h2>

<ul>
<li>split brain condition</li>
</ul>

<h2>Base64</h2>

<p>to binary</p>

<pre><code>base64 -d base64File.txt
</code></pre>
2020/03/18 22:33:02 Segment &{AWS Architecting 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://qa.qwiklabs.com/}]. raw = 'https://qa.qwiklabs.com/'
2020/03/18 22:33:02 Segment &{labs:  1 map[]}
2020/03/18 22:33:02 Segment &{https://qa.qwiklabs.com/ 17 map[href:https://qa.qwiklabs.com/]}
2020/03/18 22:33:02 Segment &{labs:  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{Acronyms 1 map[]}
2020/03/18 22:33:02 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:33:02 Segment &{WAF: Web Application Firewall 1 map[]}
2020/03/18 22:33:02 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:33:02 Segment &{AMI: Amazon Machine Image 1 map[]}
2020/03/18 22:33:02 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:33:02 Segment &{ECR: ? Docker images 1 map[]}
2020/03/18 22:33:02 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:33:02 Segment &{OU: Organisational Unit 1 map[]}
2020/03/18 22:33:02 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:33:02 Segment &{HPC: High Performance Computing 1 map[]}
2020/03/18 22:33:02 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:33:02 Segment &{VPC: Virtual Private …. 1 map[]}
2020/03/18 22:33:02 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:33:02 Segment &{BGP: Border Gateway Protocol 1 map[]}
2020/03/18 22:33:02 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:33:02 Segment &{VGW: Virtual GateWay 1 map[]}
2020/03/18 22:33:02 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:33:02 Segment &{HSM: Hardware Security Module 1 map[]}
2020/03/18 22:33:02 Segment &{Protocols 1 map[]}
2020/03/18 22:33:02 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:33:02 Segment &{RDP: Remote Desktop Protocol 1 map[]}
2020/03/18 22:33:02 Segment &{Services 1 map[]}
2020/03/18 22:33:02 Segment &{Well Architected Tool 1 map[]}
2020/03/18 22:33:02 Segment &{Goes through a checklist of architecture decisions to ensure you’re built the thing well 1 map[]}
2020/03/18 22:33:02 Segment &{AWS Licence Manager 1 map[]}
2020/03/18 22:33:02 Segment &{manage software licences across one or more accounts 1 map[]}
2020/03/18 22:33:02 Segment &{CloudTrail 1 map[]}
2020/03/18 22:33:02 Segment &{reveals account activity 1 map[]}
2020/03/18 22:33:02 Segment &{AWS Config 1 map[]}
2020/03/18 22:33:02 Segment &{Snapshots config of AWS account 1 map[]}
2020/03/18 22:33:02 Segment &{Active Directory Service 1 map[]}
2020/03/18 22:33:02 Segment &{Private Link 1 map[]}
2020/03/18 22:33:02 Segment &{VPS network endpoints 1 map[]}
2020/03/18 22:33:02 Segment &{AWS Shield 1 map[]}
2020/03/18 22:33:02 Segment &{Protects from DDoS attacks 1 map[]}
2020/03/18 22:33:02 Segment &{AWS Guard duty 1 map[]}
2020/03/18 22:33:02 Segment &{analyses flow logs to detect abnormal behaviour and sends notifications. 1 map[]}
2020/03/18 22:33:02 Segment &{Certificate Manager 1 map[]}
2020/03/18 22:33:02 Segment &{request public trusted certificates 1 map[]}
2020/03/18 22:33:02 Segment &{Module 0 1 map[]}
2020/03/18 22:33:02 Segment &{Best Practicies 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Well Architected Framework 1 map[]}
2020/03/18 22:33:02 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:33:02 Segment &{stop guessing capacity needs 1 map[]}
2020/03/18 22:33:02 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:33:02 Segment &{test systems at production scale 1 map[]}
2020/03/18 22:33:02 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:33:02 Segment &{lower the risk of architecture changes 1 map[]}
2020/03/18 22:33:02 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:33:02 Segment &{automate to make experimentation easier 1 map[]}
2020/03/18 22:33:02 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:33:02 Segment &{allow for evolutionary architecture 1 map[]}
2020/03/18 22:33:02 Segment &{Module 1: Account Management 1 map[]}
2020/03/18 22:33:02 Segment &{Larger companies with several departments/environments - make use of multiple accounts. 1 map[]}
2020/03/18 22:33:02 Segment &{Service limits apply per account. 1 map[]}
2020/03/18 22:33:02 Segment &{IAM Organisations - specify service limits for accounts in an organisation. 1 map[]}
2020/03/18 22:33:02 Segment &{AWS Support is also per account. 1 map[]}
2020/03/18 22:33:02 Segment &{Multi Account Patterns 1 map[]}
2020/03/18 22:33:02 Segment &{Independent accounts - no integration 1 map[]}
2020/03/18 22:33:02 Segment &{no integration 1 map[]}
2020/03/18 22:33:02 Segment &{Centrally controlled multi-accounts 1 map[]}
2020/03/18 22:33:02 Segment &{Best use case for separate environments. 1 map[]}
2020/03/18 22:33:02 Segment &{centralised control 1 map[]}
2020/03/18 22:33:02 Segment &{centralised control 1 map[]}
2020/03/18 22:33:02 Segment &{single bill 1 map[]}
2020/03/18 22:33:02 Segment &{single bill 1 map[]}
2020/03/18 22:33:02 Segment &{single instance pools 1 map[]}
2020/03/18 22:33:02 Segment &{single instance pools 1 map[]}
2020/03/18 22:33:02 Segment &{complex admin 1 map[]}
2020/03/18 22:33:02 Segment &{complex admin 1 map[]}
2020/03/18 22:33:02 Segment &{Multi Payer, multi-accounts 1 map[]}
2020/03/18 22:33:02 Segment &{like above, but costs are per account 1 map[]}
2020/03/18 22:33:02 Segment &{security 1 map[]}
2020/03/18 22:33:02 Segment &{Can configure permissions by team. 1 map[]}
2020/03/18 22:33:02 Segment &{Cross Account Roles 5 map[]}
2020/03/18 22:33:02 Segment &{ can be made. 1 map[]}
2020/03/18 22:33:02 Segment &{Policy based management 1 map[]}
2020/03/18 22:33:02 Segment &{Service control policy 5 map[]}
2020/03/18 22:33:02 Segment &{ is not an IAM policy. 1 map[]}
2020/03/18 22:33:02 Segment &{Lets you blacklist/whitelist services. 1 map[]}
2020/03/18 22:33:02 Segment &{If you move an account to another organisational unit, then depending on the service policy, this may mean that certain services can no longer controlled by that account. e.g is the new unit cannot access EC2 services - it cannot do any EC2 actions! 1 map[]}
2020/03/18 22:33:02 Segment &{Create an organisation. 1 map[]}
2020/03/18 22:33:02 Segment &{Consolidated billing 1 map[]}
2020/03/18 22:33:02 Segment &{Resource groups 1 map[]}
2020/03/18 22:33:02 Segment &{can define groups based on tags. 1 map[]}
2020/03/18 22:33:02 Segment &{Module 2 1 map[]}
2020/03/18 22:33:02 Segment &{VPC Peering 1 map[]}
2020/03/18 22:33:02 Segment &{EC2 1 map[]}
2020/03/18 22:33:02 Segment &{instances for advanced networking. 1 map[]}
2020/03/18 22:33:02 Segment &{Create an  1 map[]}
2020/03/18 22:33:02 Segment &{enhanced network interface 5 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{can choose “spread” clustering when creating ec2 instance. 1 map[]}
2020/03/18 22:33:02 Segment &{Clusering vs Grid 1 map[]}
2020/03/18 22:33:02 Segment &{grid like a cluster, but spread out (geographically) where a cluster exists in the same AZ 1 map[]}
2020/03/18 22:33:02 Segment &{grids more resilient but increased latency. 1 map[]}
2020/03/18 22:33:02 Segment &{VPN Connections 1 map[]}
2020/03/18 22:33:02 Segment &{can be static or dynamic 1 map[]}
2020/03/18 22:33:02 Segment &{static = specify all routes 1 map[]}
2020/03/18 22:33:02 Segment &{BGP 1 map[]}
2020/03/18 22:33:02 Segment &{“navigation system for the internet” 1 map[]}
2020/03/18 22:33:02 Segment &{DDos Attacks 1 map[]}
2020/03/18 22:33:02 Segment &{OSI is a networking model 1 map[]}
2020/03/18 22:33:02 Segment &{AWS services don’t accept malformed packages, so are safe(ish?) from layer 3-4 attacks. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html}]. raw = 'https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html'
2020/03/18 22:33:02 Segment &{You can create a lambda that will update security group ips ranges when the ip ranges file updates - there is a topic for this. And a git repo with an example.  1 map[]}
2020/03/18 22:33:02 Segment &{https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html 17 map[href:https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html]}
2020/03/18 22:33:02 Segment &{Scaling 1 map[]}
2020/03/18 22:33:02 Segment &{should have as small instances as possible - improving scaling and costs.
There is a trade off between scaling and performance 1 map[]}
2020/03/18 22:33:02 Segment &{Lookup 1 map[]}
2020/03/18 22:33:02 Segment &{split brain condition 1 map[]}
2020/03/18 22:33:02 Segment &{split brain condition 1 map[]}
2020/03/18 22:33:02 Segment &{Base64 1 map[]}
2020/03/18 22:33:02 Segment &{to binary 1 map[]}
2020/03/18 22:33:02 <h1>bash</h1>

<p>[&ldquo;#?!?#?\/?bin(\/| )bash\/?&rdquo;]<bash shebang></p>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<ul>
<li><a href="http://ryanstutorials.net/bash-scripting-tutorial/">ryans tutorial</a></li>
</ul>

<h2>networksetup</h2>

<p>configuring network settings</p>

<pre><code class="language-ss">$ networksetup -getcurrentlocation
$ networksetup -listlocations
$ networksetup -createlocation &lt;location name&gt; [populate]
$ networksetup -deletelocation &lt;location name&gt;
$ networksetup -switchtolocation &lt;location name&gt;
</code></pre>

<h2>logging</h2>

<pre><code class="language-sh">$ tail -f &lt;output.log&gt;
       -x
</code></pre>

<ul>
<li>f = live follow</li>
<li>x = number of lines (specify an actual number obvs)</li>
</ul>

<h2>shebang</h2>

<pre><code class="language-ss">#!/bin/bash
</code></pre>

<h2>variable</h2>

<pre><code class="language-sh">#!/bin/bash
# A simple copy script
cp $1 $2
# Let's verify the copy worked
echo Details for $2
ls -lh $2
</code></pre>

<p><strong>special variables</strong></p>

<pre><code class="language-sh">$0 - The name of the Bash script.
$1 - $9 - The first 9 arguments to the Bash script. (As mentioned above.)
$# - How many arguments were passed to the Bash script.
$@ - All the arguments supplied to the Bash script.
$? - The exit status of the most recently run process.
$$ - The process ID of the current script.
$USER - The username of the user running the script.
$HOSTNAME - The hostname of the machine the script is running on.
$SECONDS - The number of seconds since the script was started.
$RANDOM - Returns a different random number each time is it referred to.
$LINENO - Returns the current line number in the Bash script.
</code></pre>

<h2>chmod</h2>

<pre><code class="language-sh">chmod [OPTS] [PERMISSIONS] &lt;file&gt;
</code></pre>

<p><strong>numerical</strong>
- r=4
- w=2
- x=1</p>

<table>
<thead>
<tr>
<th align="left">Ref</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">u</td>
<td align="left">owner</td>
<td align="left">file&rsquo;s owner</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">group</td>
<td align="left">users who are members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">o</td>
<td align="left">others</td>
<td align="left">users who are neither the file&rsquo;s owner nor members of the file&rsquo;s group</td>
</tr>

<tr>
<td align="left">a</td>
<td align="left">all</td>
<td align="left">all three of the above, same as ugo</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">+</td>
<td align="left">adds the specified modes to the specified classes</td>
</tr>

<tr>
<td align="left">-</td>
<td align="left">removes the specified modes from the specified classes</td>
</tr>

<tr>
<td align="left">=</td>
<td align="left">the modes specified are to be made the exact modes for the specified classes</td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Name</th>
<th align="left">Decsription</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">r</td>
<td align="left">read</td>
<td align="left"><strong>r</strong>ead a file or list a directory&rsquo;s contents</td>
</tr>

<tr>
<td align="left">w</td>
<td align="left">write</td>
<td align="left"><strong>w</strong>rite to a file or directory</td>
</tr>

<tr>
<td align="left">x</td>
<td align="left">execute</td>
<td align="left">e<strong>x</strong>ecute a file or recurse a directory tree</td>
</tr>

<tr>
<td align="left">X</td>
<td align="left">special execute</td>
<td align="left">applied execute permissions to all directories and files with an excecutable permission already set</td>
</tr>

<tr>
<td align="left">s</td>
<td align="left">setuid/gid</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>

<tr>
<td align="left">t</td>
<td align="left">sticky</td>
<td align="left">details in <a href="https://en.wikipedia.org/wiki/Chmod#Special_modes">Special modes section</a></td>
</tr>
</tbody>
</table>
2020/03/18 22:33:02 Segment &{bash 1 map[]}
2020/03/18 22:33:02 Segment &{[“#?!?#?\/?bin(\/| )bash\/?”] 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://ryanstutorials.net/bash-scripting-tutorial/}]. raw = 'ryans tutorial'
2020/03/18 22:33:02 Segment &{ryans tutorial 17 map[href:http://ryanstutorials.net/bash-scripting-tutorial/]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{networksetup 1 map[]}
2020/03/18 22:33:02 Segment &{configuring network settings 1 map[]}
2020/03/18 22:33:02 Segment &{logging 1 map[]}
2020/03/18 22:33:02 Segment &{f = live follow 1 map[]}
2020/03/18 22:33:02 Segment &{f = live follow 1 map[]}
2020/03/18 22:33:02 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:33:02 Segment &{x = number of lines (specify an actual number obvs) 1 map[]}
2020/03/18 22:33:02 Segment &{shebang 1 map[]}
2020/03/18 22:33:02 Segment &{variable 1 map[]}
2020/03/18 22:33:02 Segment &{special variables 5 map[]}
2020/03/18 22:33:02 Segment &{chmod 1 map[]}
2020/03/18 22:33:02 Segment &{numerical 5 map[]}
2020/03/18 22:33:02 Segment &{
- r=4
- w=2
- x=1 1 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 <h1>homebrew</h1>

<ul>
<li><a href="https://github.com/Homebrew/brew/blob/master/docs/README.md#readme">gitHub README</a></li>
</ul>

<p>list packages:</p>

<pre><code class="language-ss">$ brew list
</code></pre>
2020/03/18 22:33:02 Segment &{homebrew 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/Homebrew/brew/blob/master/docs/README.md#readme}]. raw = 'gitHub README'
2020/03/18 22:33:02 Segment &{gitHub README 17 map[href:https://github.com/Homebrew/brew/blob/master/docs/README.md#readme]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{list packages: 1 map[]}
2020/03/18 22:33:02 <h1>Browserstack</h1>

<h2><a href="https://www.browserstack.com/local-testing#getting-started">Local</a></h2>

<p>Run tests on your local server</p>

<p>This requires you have the <code>BrowserStackLocal</code> binary running (it can be installed from the <a href="https://www.browserstack.com/local-testing#getting-started">help page</a>)</p>

<pre><code class="language-shell">./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe
./BrowserStackLocal --key qB7tdVmzzNRCu1eBnNWe --force-local
</code></pre>
2020/03/18 22:33:02 Segment &{Browserstack 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'Local'
2020/03/18 22:33:02 Segment &{Local 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:33:02 Segment &{Run tests on your local server 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.browserstack.com/local-testing#getting-started}]. raw = 'help page'
2020/03/18 22:33:02 Segment &{This requires you have the  1 map[]}
2020/03/18 22:33:02 Segment &{BrowserStackLocal 9 map[]}
2020/03/18 22:33:02 Segment &{ binary running (it can be installed from the  1 map[]}
2020/03/18 22:33:02 Segment &{help page 17 map[href:https://www.browserstack.com/local-testing#getting-started]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 <h1>c</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=nXvy5900m3M">Banas</a></li>
<li><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PLD28639E2FFC4B86A&amp;index=1">Stanford</a>;</li>
</ul>

<h2>basics</h2>

<h3>native methods</h3>

<pre><code class="language-c">sizeof(class);
// returns the number of bytes for the parameter type
</code></pre>

<h3>stdio</h3>

<p><strong>import</strong></p>

<pre><code class="language-c">#include &lt;stdio.h&gt;
</code></pre>

<p><strong>printf</strong>:</p>

<pre><code class="language-c">printf(&quot;formatted string %arg1 %arg2 ...&quot;, arg1, arg2 /*...*/);
</code></pre>

<p><strong>scanf</strong>:</p>

<pre><code class="language-c">int arg;
scanf(&quot;%d\n&quot;, &amp;arg);
</code></pre>

<p><strong>fgets</strong></p>

<pre><code class="language-c">int thingLength = 50;
char thing[thingLength]; 
fgets(thing, thingLength, stdin);
</code></pre>

<p><strong>fputs</strong></p>

<pre><code class="language-c">fputs(&quot;thing&quot;, stdout);
</code></pre>

<p><strong>puts</strong></p>

<pre><code class="language-c">puts();
</code></pre>

<h2>dynamic memory</h2>

<p><strong>malloc</strong></p>

<pre><code class="language-c">#include &lt;stdlib.h&gt;
// Initialize a int pointer (for an array)
int * pNumber
// decide the size of the array
int amountOfInts = 10;
// allocate the memory for the array
pNumber = (int *) malloc(amountOfInts * sizeof(int));

// check that the allocation was successful
if (pNumber != NULL) {
    // code
}
</code></pre>

<p><strong>memcpy</strong></p>

<pre><code class="language-c">#include &lt;string.h&gt;

memcpy(void* dest, void* src, int length);
</code></pre>

<p>// free the memory
free(pNumber);</p>

<pre><code>
## sleep

```c
#include &lt;unistd.h&gt;

int timeInSeconds = 3;
sleep(timeInSeconds);
</code></pre>

<h2>building</h2>

<p><strong>compile and link</strong>:</p>

<pre><code class="language-sh">gcc main.c
# defaults to a.out
gcc main.c -o programName
# specifies a name for the result executable
</code></pre>

<p><strong>compile</strong>:</p>

<pre><code class="language-sh">gcc -c file.c
# builds the object file without linking
gcc -I &lt;dir&gt; -c file.c
# build the object file looking in the specified directory for referenced header files
</code></pre>

<p><strong>linking</strong>:</p>

<p>The job of the linker is to link together a bunch of object files (.o files) into a binary executable</p>

<pre><code class="language-sh">gcc foo.o bar.o baz.o -o myprog
# creates the executable myprog.out by linking the parameter object files
gcc -Wall -c foo.cc
# show all compiler warnings
</code></pre>

<pre><code class="language-sh">ar rs &lt;libname&gt;.a objectFile.o # , sub.o ...
</code></pre>

<h2>libraries</h2>

<p><strong>static</strong>:
compile the source files</p>

<pre><code class="language-sh">gcc -c $(ls ./*c)
</code></pre>

<p>create the static library from the object files:</p>

<pre><code class="language-sh">ar -cvq libname.a *.o
</code></pre>

<p>opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created</p>

<p>gives you the file <code>libname.a</code></p>

<p><strong>list files in lib</strong>:</p>

<pre><code class="language-sh">ar -t libname.a
</code></pre>
2020/03/18 22:33:02 Segment &{c 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.youtube.com/watch?v=nXvy5900m3M}]. raw = 'Banas'
2020/03/18 22:33:02 Segment &{Banas 17 map[href:https://www.youtube.com/watch?v=nXvy5900m3M]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1}]. raw = 'Stanford'
2020/03/18 22:33:02 Segment &{Stanford 17 map[href:https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PLD28639E2FFC4B86A&index=1]}
2020/03/18 22:33:02 Segment &{; 1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{; 1 map[]}
2020/03/18 22:33:02 Segment &{basics 1 map[]}
2020/03/18 22:33:02 Segment &{native methods 1 map[]}
2020/03/18 22:33:02 Segment &{stdio 1 map[]}
2020/03/18 22:33:02 Segment &{import 5 map[]}
2020/03/18 22:33:02 Segment &{printf 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{scanf 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{fgets 5 map[]}
2020/03/18 22:33:02 Segment &{fputs 5 map[]}
2020/03/18 22:33:02 Segment &{puts 5 map[]}
2020/03/18 22:33:02 Segment &{dynamic memory 1 map[]}
2020/03/18 22:33:02 Segment &{malloc 5 map[]}
2020/03/18 22:33:02 Segment &{memcpy 5 map[]}
2020/03/18 22:33:02 Segment &{// free the memory
free(pNumber); 1 map[]}
2020/03/18 22:33:02 Segment &{building 1 map[]}
2020/03/18 22:33:02 Segment &{compile and link 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{compile 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{linking 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{The job of the linker is to link together a bunch of object files (.o files) into a binary executable 1 map[]}
2020/03/18 22:33:02 Segment &{libraries 1 map[]}
2020/03/18 22:33:02 Segment &{static 5 map[]}
2020/03/18 22:33:02 Segment &{:
compile the source files 1 map[]}
2020/03/18 22:33:02 Segment &{create the static library from the object files: 1 map[]}
2020/03/18 22:33:02 Segment &{opts:
- c: Whenever an archive is created, an informational message to that effect is written to standard error
- v: verbose output
- q: Quickly append the specified files to the archive. If the archive does not exist a new archive file is created 1 map[]}
2020/03/18 22:33:02 Segment &{gives you the file  1 map[]}
2020/03/18 22:33:02 Segment &{libname.a 9 map[]}
2020/03/18 22:33:02 Segment &{list files in lib 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 <h1>camel</h1>

<h2>testing</h2>

<p>Extend the tests class with <code>CamelTestSupport</code></p>

<pre><code class="language-java">class MyTest extends CamelTestSupport {

}
</code></pre>

<p>create an exchange with body like so:</p>

<pre><code class="language-java">@Test
public void myTest() {
  Exchange myExchange = createExchange();
}
</code></pre>
2020/03/18 22:33:02 Segment &{camel 1 map[]}
2020/03/18 22:33:02 Segment &{testing 1 map[]}
2020/03/18 22:33:02 Segment &{Extend the tests class with  1 map[]}
2020/03/18 22:33:02 Segment &{CamelTestSupport 9 map[]}
2020/03/18 22:33:02 Segment &{create an exchange with body like so: 1 map[]}
2020/03/18 22:33:02 <p><a href="https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md">https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md</a></p>
2020/03/18 22:33:02 >>>>> atts = [{ href https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md}]. raw = 'https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md'
2020/03/18 22:33:02 Segment &{https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md 17 map[href:https://raw.githubusercontent.com/teamcapybara/capybara/master/README.md]}
2020/03/18 22:33:02 <h1>CENTOS 7</h1>

<h2>migrating from CENTOS 6</h2>

<p><code>systemctl</code> rather than <code>service</code></p>

<h3>Httpd configuration for Apache 2.4</h3>

<p>Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably <code>cloud-httpd24-ssl-services-devs</code>):</p>

<pre><code>cloud-httpd24-ssl-includes            (custom - see git page, link below)
cloud-httpd24-ssl-services            (just services)
cloud-httpd24-ssl-services-devs       (services and developers)
cloud-httpd24-ssl-services-devs-staff (services, developers and staff  (desktop certificates))
cloud-httpd24-ssl-no-certs            (SSL without client certificates)
</code></pre>

<p>More info here: <a href="https://github.com/bbc/cloud-httpd-conf">https://github.com/bbc/cloud-httpd-conf</a>.</p>

<p>Also refer to this PR for an example of migrating a service from centos6 to centos7</p>

<p><a href="https://github.com/bbc/rms-monitoring-seyren/pull/5/files">https://github.com/bbc/rms-monitoring-seyren/pull/5/files</a></p>
2020/03/18 22:33:02 Segment &{CENTOS 7 1 map[]}
2020/03/18 22:33:02 Segment &{migrating from CENTOS 6 1 map[]}
2020/03/18 22:33:02 Segment &{systemctl 9 map[]}
2020/03/18 22:33:02 Segment &{ rather than  1 map[]}
2020/03/18 22:33:02 Segment &{service 9 map[]}
2020/03/18 22:33:02 Segment &{Httpd configuration for Apache 2.4 1 map[]}
2020/03/18 22:33:02 Segment &{Centos7 includes apache 2.4, which requires different httpd conf (ssl config) than Centos6 (Apache 2.2).
Add either of the following modules to make it work
(depending on requirements - probably  1 map[]}
2020/03/18 22:33:02 Segment &{cloud-httpd24-ssl-services-devs 9 map[]}
2020/03/18 22:33:02 Segment &{): 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/bbc/cloud-httpd-conf}]. raw = 'https://github.com/bbc/cloud-httpd-conf'
2020/03/18 22:33:02 Segment &{More info here:  1 map[]}
2020/03/18 22:33:02 Segment &{https://github.com/bbc/cloud-httpd-conf 17 map[href:https://github.com/bbc/cloud-httpd-conf]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{Also refer to this PR for an example of migrating a service from centos6 to centos7 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/bbc/rms-monitoring-seyren/pull/5/files}]. raw = 'https://github.com/bbc/rms-monitoring-seyren/pull/5/files'
2020/03/18 22:33:02 Segment &{https://github.com/bbc/rms-monitoring-seyren/pull/5/files 17 map[href:https://github.com/bbc/rms-monitoring-seyren/pull/5/files]}
2020/03/18 22:33:02 <h1>certs</h1>

<ul>
<li>/etc/pki/<strong>cert.p12</strong>
main one
pw: cert</li>
<li>/etc/pki/<strong>certificate.pem</strong>
a pem of your cert.p12, (so pw: cert) used in the morph stuff</li>
<li>/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details <a href="https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup">here</a></li>
</ul>

<h2>create PEM</h2>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem
</code></pre>

<p>Or with no target password</p>

<pre><code>openssl pkcs12 -in dev.p12 -out dev.pem -nodes
</code></pre>

<h2>Chrome issue</h2>

<ol>
<li>go to your cert in the keychain, and expand the private key.</li>
<li>control-click and &ldquo;Get Info&rdquo;</li>
<li>&ldquo;Access Control&rdquo; tab</li>
<li>Select &ldquo;Confirm before allowing access&rdquo;</li>
</ol>

<h2>svn issue</h2>

<p>After a cert update, svn became very slow. The following from Shane Kelly:</p>

<p>Hi all,</p>

<p>Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster:</p>

<p>CERT_DIR=&ldquo;/Users/kellys55/…..&rdquo;
PKCS_FILE=&ldquo;${CERT_DIR}/shanekelly-20180419.p12&rdquo;
CERT_FILE=&ldquo;${CERT_DIR}/just_cert.crt&rdquo;
KEY_FILE=&ldquo;${CERT_DIR}/just_key.key&rdquo;
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12</p>
2020/03/18 22:33:02 Segment &{certs 1 map[]}
2020/03/18 22:33:02 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:33:02 Segment &{cert.p12 5 map[]}
2020/03/18 22:33:02 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:33:02 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{
main one
pw: cert 1 map[]}
2020/03/18 22:33:02 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:33:02 Segment &{certificate.pem 5 map[]}
2020/03/18 22:33:02 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:33:02 Segment &{/etc/pki/ 1 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{
a pem of your cert.p12, (so pw: cert) used in the morph stuff 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup}]. raw = 'here'
2020/03/18 22:33:02 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:33:02 Segment &{here 17 map[href:https://confluence.dev.bbc.co.uk/display/morph/2%29+Developer+Machine+Setup]}
2020/03/18 22:33:02 Segment &{/etc/pki/tls/certs/ca-bundle.crt
used for the morph-cli installation. It has stuff from the morph-cli details  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{create PEM 1 map[]}
2020/03/18 22:33:02 Segment &{Or with no target password 1 map[]}
2020/03/18 22:33:02 Segment &{Chrome issue 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{svn issue 1 map[]}
2020/03/18 22:33:02 Segment &{After a cert update, svn became very slow. The following from Shane Kelly: 1 map[]}
2020/03/18 22:33:02 Segment &{Hi all, 1 map[]}
2020/03/18 22:33:02 Segment &{Some of you have been affected by a significant slowdown in SVN since upgrading your developer certs. I’ve worked with Mark in OTG to reproduce and isolate the issue and it looks like it’s an issue with how Firefox exports the p12 file (as per our usual setup instructions). For some reason, the format, content or ordering of this exported p12 file can cause the slowdown we’ve been seeing (we are trying to ascertain why). However, if you use the below script to separate out the p12 file into it’s constituent parts, then recombine them, svn should run a lot faster: 1 map[]}
2020/03/18 22:33:02 Segment &{CERT_DIR=“/Users/kellys55/…..”
PKCS_FILE=“${CERT_DIR}/shanekelly-20180419.p12”
CERT_FILE=“${CERT_DIR}/just_cert.crt”
KEY_FILE=“${CERT_DIR}/just_key.key”
openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE} -passin pass:password
openssl pkcs12 -nocerts -clcerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE} -passin pass:password
openssl pkcs12 -export -in ${CERT_FILE} -inkey ${KEY_FILE} -out newcert.p12 1 map[]}
2020/03/18 22:33:02 <h1>google structured data</h1>

<h2>claim review</h2>

<p><strong>required fields</strong></p>

<pre><code class="language-json">{
  &quot;@type&quot; : &quot;ClaimReview&quot;,
  &quot;datePublished&quot; : &quot;&quot;,
  &quot;url&quot; : &quot;url of the article&quot;,
  &quot;itemReviewed&quot; : {
    &quot;@type&quot; : &quot;CreativeWork&quot;,
    &quot;author&quot; : {
      &quot;@type&quot; : &quot;Person/Organization&quot;,
      &quot;name&quot; : &quot;name&quot;,
    },
    &quot;datePublished&quot; : &quot;&quot;
  },
  &quot;claimReviewed&quot; : &quot;summary of claim under review&quot;,
  &quot;author&quot; : {
    &quot;@type&quot; : &quot;Person/Organization&quot;,
    &quot;name&quot; : &quot;name&quot;
  },
  &quot;reviewRating&quot; : {
    &quot;@type&quot; : &quot;Rating&quot;,
    &quot;ratingValue&quot; : 1,
    &quot;bestRating&quot; : 2,
    &quot;worstRating&quot; : 0,
    &quot;alternateName&quot; : &quot;textual phrasing of the rating, e.g. 'mostly true' (keep it short)&quot;
  }
}
</code></pre>

<h3>reviewRating</h3>

<p><strong>What are ratingValue, bestRating, worstRating, and are they required?</strong></p>

<p>Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true.</p>

<p>For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam &amp; abuse.</p>

<p><em>If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1.</em></p>

<p><strong>What is reviewRating.alternateName and is it required?</strong></p>

<p>The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as &ldquo;Mostly True.&rdquo; It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own.</p>

<p>Yes, it is required regardless whether you provide the numerical rating or not.</p>

<h3>what we&rsquo;re missing</h3>

<ul>
<li>[x] @type</li>
<li>[x] datePublished</li>
<li>[x] url</li>
<li>[ ] itemReviewed:

<ul>
<li>[x] @type (CreativeWork)</li>
<li>[ ] author:</li>
<li>[ ] @type (Person or Org?)</li>
<li>[ ] name</li>
<li>[ ] datePublished</li>
</ul></li>
<li>[ ] claimReviewed</li>
<li>[x] author: (default to BBC?)s

<ul>
<li>[x] type</li>
<li>[x] name</li>
</ul></li>
<li>[ ] reviewRating

<ul>
<li>[x] @type (Rating)</li>
<li>[ ] ratingValue (can be -1)</li>
<li>[ ] bestRating (can be -1)</li>
<li>[ ] worstRating (can be -1)</li>
<li>[ ] alternateName (we have a verdict, could lift it from the body if it&rsquo;s predictable?)</li>
</ul></li>
</ul>

<h3>case examples</h3>

<p>Washington Post writes to Google&rsquo;s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there.</p>

<p>Snopes.com set their reviewRating values to -1. &lsquo;itemReviewed&rsquo; is &lsquo;The Internet&rsquo; (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don&rsquo;t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld.</p>

<p>Politifact: Missing &lsquo;ratingValue&rsquo;, but still appearing in google news.</p>
2020/03/18 22:33:02 Segment &{google structured data 1 map[]}
2020/03/18 22:33:02 Segment &{claim review 1 map[]}
2020/03/18 22:33:02 Segment &{required fields 5 map[]}
2020/03/18 22:33:02 Segment &{reviewRating 1 map[]}
2020/03/18 22:33:02 Segment &{What are ratingValue, bestRating, worstRating, and are they required? 5 map[]}
2020/03/18 22:33:02 Segment &{Those three fields constitute the numerical rating, indicating, on the given scale determined by (worstRating, bestRating), how close the claim is judged to be true. 1 map[]}
2020/03/18 22:33:02 Segment &{For example, if you use a system of True, Partly True, and False, you could map True to 3, Partly True to 2, and False to 1. The numerical rating will not be visible to the user, but is helpful for platforms to detect whether there is rough consensus across fact-checkers, as well as to spot spam & abuse. 1 map[]}
2020/03/18 22:33:02 Segment &{If your organization does not assign numerical ratings, you can simply set ratingValue, bestRating, and worstRating all to -1. 3 map[]}
2020/03/18 22:33:02 Segment &{What is reviewRating.alternateName and is it required? 5 map[]}
2020/03/18 22:33:02 Segment &{The field reviewRating/alternateName is the textual rating, a short phrase summarizing the overall assessment of the claim, such as “Mostly True.” It is OK to have a long sentence here, but it is strongly desired that the beginning phrase of that long sentence can stand on its own. 1 map[]}
2020/03/18 22:33:02 Segment &{Yes, it is required regardless whether you provide the numerical rating or not. 1 map[]}
2020/03/18 22:33:02 Segment &{what we’re missing 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type 1 map[]}
2020/03/18 22:33:02 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:33:02 Segment &{[x] datePublished 1 map[]}
2020/03/18 22:33:02 Segment &{[x] url 1 map[]}
2020/03/18 22:33:02 Segment &{[x] url 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] author: 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] name 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] itemReviewed:

 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (CreativeWork) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] author: 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] author: 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] @type (Person or Org?) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] name 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] name 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] datePublished 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] claimReviewed 1 map[]}
2020/03/18 22:33:02 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] type 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] name 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] author: (default to BBC?)s

 1 map[]}
2020/03/18 22:33:02 Segment &{[x] type 1 map[]}
2020/03/18 22:33:02 Segment &{[x] type 1 map[]}
2020/03/18 22:33:02 Segment &{[x] name 1 map[]}
2020/03/18 22:33:02 Segment &{[x] name 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] reviewRating

 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:33:02 Segment &{[x] @type (Rating) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] ratingValue (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] bestRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] worstRating (can be -1) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] alternateName (we have a verdict, could lift it from the body if it’s predictable?) 1 map[]}
2020/03/18 22:33:02 Segment &{case examples 1 map[]}
2020/03/18 22:33:02 Segment &{Washington Post writes to Google’s specification. Often missing bestRating / worstRating. But there are optional (defaults are 1-5). Mark up using HTML, but rating value is there. 1 map[]}
2020/03/18 22:33:02 Segment &{Snopes.com set their reviewRating values to -1. ‘itemReviewed’ is ‘The Internet’ (as an organization) in one. All required fields are present, and the testing tool returns no errors. (But the articles don’t appear with a FactCheck tag in google news). Mark-up is in HTML rather than json-ld. 1 map[]}
2020/03/18 22:33:02 Segment &{Politifact: Missing ‘ratingValue’, but still appearing in google news. 1 map[]}
2020/03/18 22:33:02 <h1>coffee script</h1>

<h2>functions</h2>

<pre><code class="language-coffee">name = (signature) -&gt; implementation
</code></pre>

<p>With default values:</p>

<pre><code class="language-coffee">doAThing = (parameter, optionalParameter = &quot;default&quot;) -&gt; ...
</code></pre>

<h2>objects</h2>

<pre><code class="language-coffee">object =
  key: &quot;value&quot;
  key2: &quot;value2&quot;
  objectKey:
    innerObjectKey: &quot;value&quot;
</code></pre>

<h2>classes</h2>

<pre><code class="language-coffee">class Animal extends SuperClass
  constructor: (@parameter) -&gt;
    #...

  function: (signature) -&gt;
    #...
    super

  voidFunction: -&gt;
    #...
</code></pre>

<h2>splats</h2>

<pre><code class="language-coffee">variableFunction = (one, two, theRest...) -&gt;
  #...

# calling
variableFunction [1,2,3,4,5,6,7]...
</code></pre>

<h2>comprehensions</h2>

<pre><code class="language-coffee">... value for value in collection

# with indexes
... value, i for value, i  in collection

# with conditions
... value for value in collection when ...
</code></pre>
2020/03/18 22:33:02 Segment &{coffee script 1 map[]}
2020/03/18 22:33:02 Segment &{functions 1 map[]}
2020/03/18 22:33:02 Segment &{With default values: 1 map[]}
2020/03/18 22:33:02 Segment &{objects 1 map[]}
2020/03/18 22:33:02 Segment &{classes 1 map[]}
2020/03/18 22:33:02 Segment &{splats 1 map[]}
2020/03/18 22:33:02 Segment &{comprehensions 1 map[]}
2020/03/18 22:33:02 <h1>cosmos-cli</h1>

<h2>create stack</h2>

<pre><code class="language-sh">cd $DIR_WITH_COSMOS_PARAMS
cosmos create-stack ${COMPONENT_NAME} ${ENVIRONMENT} ${PATH_TO_CONFIG_JSON}
</code></pre>

<h2>deploy</h2>

<p>Deploy and old release:</p>

<pre><code class="language-sh">cosmos deploy [-r &lt;RELEASE&gt;] COMPONENT ENV
# e.g.
cosmos deploy -r 222-1.x86_64 rms-jimi-hendrix test
</code></pre>
2020/03/18 22:33:02 Segment &{cosmos-cli 1 map[]}
2020/03/18 22:33:02 Segment &{create stack 1 map[]}
2020/03/18 22:33:02 Segment &{deploy 1 map[]}
2020/03/18 22:33:02 Segment &{Deploy and old release: 1 map[]}
2020/03/18 22:33:02 <h1>curl</h1>

<p>using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command</p>

<pre><code class="language-sh">which curl
# =&gt; /usr/local/bin/curl

curl --version
# =&gt; curl 7.52.1 (x86_64-apple-darwin15.6.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.5
#     Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
#     Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy

</code></pre>

<h2>cert</h2>

<p>curl with cert</p>

<pre><code class="language-sh">curl -k -E &lt;path/to/cert.pem&gt; \
  https://url
</code></pre>

<p>with response headers:</p>

<pre><code class="language-sh">curl -i &lt;URL&gt;
</code></pre>

<h2>output</h2>

<p>Write output to file</p>

<pre><code class="language-sh">curl -o filename.etn http://....
     --output
</code></pre>
2020/03/18 22:33:02 Segment &{curl 1 map[]}
2020/03/18 22:33:02 Segment &{using brew curl, symlink saved to /usr/local/bin, overriding the native rubbishy Mac curl command 1 map[]}
2020/03/18 22:33:02 Segment &{cert 1 map[]}
2020/03/18 22:33:02 Segment &{curl with cert 1 map[]}
2020/03/18 22:33:02 Segment &{with response headers: 1 map[]}
2020/03/18 22:33:02 Segment &{output 1 map[]}
2020/03/18 22:33:02 Segment &{Write output to file 1 map[]}
2020/03/18 22:33:02 <h1>curses</h1>

<ul>
<li><a href="http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME">docs</a></li>
<li><a href="http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/">how to</a></li>
</ul>

<p><strong>compile</strong>:
Need to specify -lcurses for some reason</p>

<pre><code class="language-sh">gcc -lcurses main.c

</code></pre>

<h2>setup</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  initscr();          // set up the screen
  
  // user input is available per character rather than being buffered by the line
  raw()               // any user input
  cbreak()            // only non-control sequences
  
  clear();            // ?
  
  // control the echoing of characters
  echo()              // show the typed characters
  noecho()            // hide the typed characters
  
  // error is returned if user input doesn't happen until the specified timeout
  halfdelay(timeoutValue) // timeout in deci-seconds
  
  // make the cursor 
  // 0 = invisible
  // 1 = visible
  // 2 = extra visible
  curs_set(value)      
  
  keypad()            // enables the reading of functional keys, arrows etc
  
  /*...*/
  
  endwin();           // must call at the end
}
</code></pre>

<h2>screen</h2>

<pre><code class="language-c">int y, x;
getyx(stdscr, y, x);          // gets the current cursor location

int cols, rows;
getmaxyx(stdscr, cols, rows); // gets the window boundaries

getparyx();                   // get anchor coordinates of a subwindow relative to a parent
getbegyx();                   // get window beginning coordinates
getmaxyx();                   // get window max coordinates
</code></pre>

<p><strong>screen dump</strong>:</p>

<pre><code class="language-c">scr_dump();       // dump the state of the screen to a temporary file
scr_restore();    // restore a dumped screen
</code></pre>

<h2>printing</h2>

<p><strong>output</strong>:</p>

<pre><code class="language-c">#include &lt;curses.h&gt;

int main(int argc, char const * argv[]) {
  /*set up*/
  
  // set the current cursor location 
  move(row, column);
  
  // printing methods
  printw(&quot;a string&quot;);	            // print a string to the buffer
  mvprintw(row, col, string);     // move to the specified row/column, then print string 
  
  addch('c');                     // appends a single char to the buffer and moves the position along 1
  addch('c' | A_BOLD);            // with attributes
  mvaddch(row, col, 'c');         // move to the specified row/column then print the char
  
  // manipulate the current attributes
  attrset(ATTRIBUTE);
  attron(ATTRIBUTE);
  attroff(ATTRIBUTE);
  
  refresh();                      // dumps the print buffer to the screen
  
  /*tear down*/
}
</code></pre>

<h3>attributes</h3>

<pre><code class="language-c">attrset(ATTRIBUTE);   // sets the attributes for the window, overriding any existing
attron(ATTRIBUTE);    // adds a attributes
attroff(ATTRIBUTE§);  // removes the attribute

attr_get();           // gets the current attributes

// change the attribute in a range without moving the cursor
chgat(col, row, update, ATTRIBUTE, colIndex, NULL);
// or with mobing the cursor:
mvchgat(col, row, update, ATTRIBUTE, colIndex, NULL);
/* 
 * First two parameters specify the position at which to start 
 * Third parameter number of characters to update. -1 means till 
 * end of line
 * Forth parameter is the normal attribute you wanted to give 
 * to the charcter
 * Fifth is the color index. It is the index given during init_pair()
 * use 0 if you didn't want color
 * Sixth one is always NULL 
 */
</code></pre>

<p><strong>attribute options</strong>:</p>

<pre><code class="language-c">A_NORMAL        // Normal display (no highlight)
A_STANDOUT      // Best highlighting mode of the terminal.
A_UNDERLINE     // Underlining
A_REVERSE       // Reverse video
A_BLINK         // Blinking
A_DIM           // Half bright
A_BOLD          // Extra bright or bold
A_PROTECT       // Protected mode
A_INVIS         // Invisible or blank mode
A_ALTCHARSET    // Alternate character set
A_CHARTEXT      // Bit-mask to extract a character

// for a colour:
COLOR_PAIR(n);   // Color-pair number n 

</code></pre>

<h3>colours</h3>

<pre><code class="language-c">#include &lt;curses.h&gt;

/* generic setup */

bool c_enabled = has_colors();         // does the terminal window support colours?
start_color();                         // must use this to enable colouring

use_default_colors();                  // use original colours, colour keys are both set to -1
init_pair(2, COLOR_RED, -1);           // inits pait with default bg colour
assume_default_colors(int, int);       // sets the original colour pair
/* also orig_pair, orig_colors? */

/* define a foreground / background colour pair
 * keyed with the parameter number */
init_pair(1, COLOR_RED, COLOR_BLACK);


/* param 1       : colour name
 * param 2, 3, 4 : rgb content min = 0, max = 1000 
 * returns ERR if the colour changes aren't supported by the terminal (use can_change_color())
 */
init_color(COLOR_RED, 700, 0, 0);
can_change_color();                    // can the terminal colours be changed?

//can be used to find the color content and foreground, background combination for the pair
color_content();
pair_content();

attron(COLOR_PAIR(x));    // set the colour attribute
attroff(COLOUR_PAIR(x));  // remove the colour attribute

/* ... */
</code></pre>

<p><strong>colours</strong>:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7</p>

<h2>reading</h2>

<pre><code class="language-c">#include &lt;curses.h&gt;

/*set up*/

char c = getch();       // get char
scanw();                // get formatted input
getstr();               // get strings

keypad(pWindow, TRUE);   //

/*tear down*/

</code></pre>

<p><strong>keys constants</strong>:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT</p>

<h2>mouse</h2>

<p>must initialize the mouse mask first:</p>

<pre><code class="language-c">mousemask(  mmask_t newmask,      /*The events you want to listen to*/
            mmask_t * oldmask);   /*The old events mask             */
            
MEVENT event;

ch = getch();
if(ch == KEY_MOUSE)
    if(getmouse(&amp;event) == OK)
        .    /* Do some thing with the event */
        .
        .
        
if(event.bstate &amp; BUTTON1_PRESSED)
        printw(&quot;Left Button Pressed&quot;);
</code></pre>

<p><strong>MEVENT</strong> looks like this:</p>

<pre><code class="language-c">typedef struct
{
    short id;         // ID to distinguish multiple devices
    int x, y, z;      // event coordinates
    mmask_t bstate;   // button state bits
}   
</code></pre>

<p><strong>key masks</strong>:</p>

<ul>
<li><code>BUTTON1_PRESSED</code>          mouse button 1 down</li>
<li><code>BUTTON1_RELEASED</code>         mouse button 1 up</li>
<li><code>BUTTON1_CLICKED</code>          mouse button 1 clicked</li>
<li><code>BUTTON1_DOUBLE_CLICKED</code>   mouse button 1 double clicked</li>
<li><code>BUTTON1_TRIPLE_CLICKED</code>   mouse button 1 triple clicked</li>
<li><code>BUTTON2_PRESSED</code>          mouse button 2 down</li>
<li><code>BUTTON2_RELEASED</code>         mouse button 2 up</li>
<li><code>BUTTON2_CLICKED</code>          mouse button 2 clicked</li>
<li><code>BUTTON2_DOUBLE_CLICKED</code>   mouse button 2 double clicked</li>
<li><code>BUTTON2_TRIPLE_CLICKED</code>   mouse button 2 triple clicked</li>
<li><code>BUTTON3_PRESSED</code>          mouse button 3 down</li>
<li><code>BUTTON3_RELEASED</code>         mouse button 3 up</li>
<li><code>BUTTON3_CLICKED</code>          mouse button 3 clicked</li>
<li><code>BUTTON3_DOUBLE_CLICKED</code>   mouse button 3 double clicked</li>
<li><code>BUTTON3_TRIPLE_CLICKED</code>   mouse button 3 triple clicked</li>
<li><code>BUTTON4_PRESSED</code>          mouse button 4 down</li>
<li><code>BUTTON4_RELEASED</code>         mouse button 4 up</li>
<li><code>BUTTON4_CLICKED</code>          mouse button 4 clicked</li>
<li><code>BUTTON4_DOUBLE_CLICKED</code>   mouse button 4 double clicked</li>
<li><code>BUTTON4_TRIPLE_CLICKED</code>   mouse button 4 triple clicked</li>
<li><code>BUTTON_SHIFT</code>             shift was down during button state change</li>
<li><code>BUTTON_CTRL</code>              control was down during button state change</li>
<li><code>BUTTON_ALT</code>               alt was down during button state change</li>
<li><code>ALL_MOUSE_EVENTS</code>         report all button state changes</li>
<li><code>REPORT_MOUSE_POSITION</code>    report mouse movement</li>
</ul>
2020/03/18 22:33:02 Segment &{curses 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME}]. raw = 'docs'
2020/03/18 22:33:02 Segment &{docs 17 map[href:http://invisible-island.net/ncurses/man/ncurses.3x.html#h2-NAME]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 >>>>> atts = [{ href http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/}]. raw = 'how to'
2020/03/18 22:33:02 Segment &{how to 17 map[href:http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{compile 5 map[]}
2020/03/18 22:33:02 Segment &{:
Need to specify -lcurses for some reason 1 map[]}
2020/03/18 22:33:02 Segment &{setup 1 map[]}
2020/03/18 22:33:02 Segment &{screen 1 map[]}
2020/03/18 22:33:02 Segment &{screen dump 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{printing 1 map[]}
2020/03/18 22:33:02 Segment &{output 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{attributes 1 map[]}
2020/03/18 22:33:02 Segment &{attribute options 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{colours 1 map[]}
2020/03/18 22:33:02 Segment &{colours 5 map[]}
2020/03/18 22:33:02 Segment &{:
- COLOR_BLACK     0
- COLOR_RED       1
- COLOR_GREEN     2
- COLOR_YELLOW    3
- COLOR_BLUE      4
- COLOR_MAGENTA   5
- COLOR_CYAN      6
- COLOR_WHITE     7 1 map[]}
2020/03/18 22:33:02 Segment &{reading 1 map[]}
2020/03/18 22:33:02 Segment &{keys constants 5 map[]}
2020/03/18 22:33:02 Segment &{:
- KEY_UP
- KEY_DOWN
- KEY_LEFT
- KEY_RIGHT 1 map[]}
2020/03/18 22:33:02 Segment &{mouse 1 map[]}
2020/03/18 22:33:02 Segment &{must initialize the mouse mask first: 1 map[]}
2020/03/18 22:33:02 Segment &{MEVENT 5 map[]}
2020/03/18 22:33:02 Segment &{ looks like this: 1 map[]}
2020/03/18 22:33:02 Segment &{key masks 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON1_PRESSED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 1 down 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON1_RELEASED 9 map[]}
2020/03/18 22:33:02 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{         mouse button 1 up 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON1_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 1 clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON1_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 1 double clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON1_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 1 triple clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON2_PRESSED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 2 down 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON2_RELEASED 9 map[]}
2020/03/18 22:33:02 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{         mouse button 2 up 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON2_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 2 clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON2_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 2 double clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON2_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 2 triple clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON3_PRESSED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 3 down 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON3_RELEASED 9 map[]}
2020/03/18 22:33:02 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{         mouse button 3 up 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON3_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 3 clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON3_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 3 double clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON3_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 3 triple clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON4_PRESSED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 4 down 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON4_RELEASED 9 map[]}
2020/03/18 22:33:02 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{         mouse button 4 up 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON4_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{          mouse button 4 clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON4_DOUBLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 4 double clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON4_TRIPLE_CLICKED 9 map[]}
2020/03/18 22:33:02 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{   mouse button 4 triple clicked 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON_SHIFT 9 map[]}
2020/03/18 22:33:02 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{             shift was down during button state change 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON_CTRL 9 map[]}
2020/03/18 22:33:02 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{              control was down during button state change 1 map[]}
2020/03/18 22:33:02 Segment &{BUTTON_ALT 9 map[]}
2020/03/18 22:33:02 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{               alt was down during button state change 1 map[]}
2020/03/18 22:33:02 Segment &{ALL_MOUSE_EVENTS 9 map[]}
2020/03/18 22:33:02 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{         report all button state changes 1 map[]}
2020/03/18 22:33:02 Segment &{REPORT_MOUSE_POSITION 9 map[]}
2020/03/18 22:33:02 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{    report mouse movement 1 map[]}
2020/03/18 22:33:02 <h1>D</h1>

<p>## dmd</p>

<pre><code class="language-sh">brew install dmd
</code></pre>

<h2>Tutorial (pluralsight)</h2>

<p>Designed as a replacement for c++</p>

<h3>Paradigms</h3>

<ul>
<li>garbage collection (unline c++)</li>
<li>unicode support (unline c++)</li>
<li>concurrency</li>
<li>meta programming</li>
</ul>

<h3>Tools</h3>

<h4>dmd</h4>

<p>Proprietary back end and open-source front end. The official compiler for D lang.</p>

<h4>Libraries</h4>

<h5>Phobos</h5>

<p>Offical D library</p>

<h5>stl</h5>

<h3>Resources</h3>

<ul>
<li>conf: <a href="http://dconf.org">http://dconf.org</a></li>
<li>lang: <a href="http://dlang.org">http://dlang.org</a></li>
<li>@D_Programming on Twitter</li>
</ul>

<h3>Types and Operators</h3>

<h4>Integral Types</h4>

<p><strong>32 bit numbers</strong>:</p>

<pre><code class="language-d">int a = 3;
auto b = 3u;
uint c = 4_000_000_000;
</code></pre>

<p><strong>64 bit numbers</strong>:</p>

<pre><code class="language-d">long d = 54;
ulong e = 54;
auto f = 5_000_000_000;
auto g = 5L;
auto h = 65UL;
</code></pre>

<p><strong>16 bit</strong>:</p>

<pre><code class="language-d">short i = 45;
ushort j = 34;
</code></pre>

<p><strong>8 bit types</strong>:</p>

<pre><code class="language-d">byte k = 1;
ubyte l = 255;
</code></pre>

<p><strong>conversions</strong>:</p>

<pre><code class="language-d">audo x = 123 + 123UL;
// x = unsigned long
</code></pre>

<p><strong>non decimal</strong>:</p>

<pre><code class="language-d">auto hexadecimal = 0x123ABC;
auto octal = 0876;
auto binary = 0b01100101;
</code></pre>

<h4>floating points</h4>

<pre><code class="language-d">float f = 1.0;
auto g = 80.1f;
</code></pre>
2020/03/18 22:33:02 Segment &{D 1 map[]}
2020/03/18 22:33:02 Segment &{## dmd 1 map[]}
2020/03/18 22:33:02 Segment &{Tutorial (pluralsight) 1 map[]}
2020/03/18 22:33:02 Segment &{Designed as a replacement for c++ 1 map[]}
2020/03/18 22:33:02 Segment &{Paradigms 1 map[]}
2020/03/18 22:33:02 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:33:02 Segment &{garbage collection (unline c++) 1 map[]}
2020/03/18 22:33:02 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:33:02 Segment &{unicode support (unline c++) 1 map[]}
2020/03/18 22:33:02 Segment &{concurrency 1 map[]}
2020/03/18 22:33:02 Segment &{concurrency 1 map[]}
2020/03/18 22:33:02 Segment &{meta programming 1 map[]}
2020/03/18 22:33:02 Segment &{meta programming 1 map[]}
2020/03/18 22:33:02 Segment &{Tools 1 map[]}
2020/03/18 22:33:02 Segment &{dmd 1 map[]}
2020/03/18 22:33:02 Segment &{Proprietary back end and open-source front end. The official compiler for D lang. 1 map[]}
2020/03/18 22:33:02 Segment &{Libraries 1 map[]}
2020/03/18 22:33:02 Segment &{Phobos 1 map[]}
2020/03/18 22:33:02 Segment &{Offical D library 1 map[]}
2020/03/18 22:33:02 Segment &{stl 1 map[]}
2020/03/18 22:33:02 Segment &{Resources 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://dconf.org}]. raw = 'http://dconf.org'
2020/03/18 22:33:02 Segment &{conf:  1 map[]}
2020/03/18 22:33:02 Segment &{http://dconf.org 17 map[href:http://dconf.org]}
2020/03/18 22:33:02 Segment &{conf:  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 >>>>> atts = [{ href http://dlang.org}]. raw = 'http://dlang.org'
2020/03/18 22:33:02 Segment &{lang:  1 map[]}
2020/03/18 22:33:02 Segment &{http://dlang.org 17 map[href:http://dlang.org]}
2020/03/18 22:33:02 Segment &{lang:  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:33:02 Segment &{@D_Programming on Twitter 1 map[]}
2020/03/18 22:33:02 Segment &{Types and Operators 1 map[]}
2020/03/18 22:33:02 Segment &{Integral Types 1 map[]}
2020/03/18 22:33:02 Segment &{32 bit numbers 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{64 bit numbers 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{16 bit 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{8 bit types 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{conversions 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{non decimal 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{floating points 1 map[]}
2020/03/18 22:33:02 <h1>dagger</h1>

<h2>annotations</h2>

<h3>provider annotation</h3>

<pre><code class="language-java">@Provides
@Singleton
@Named(&quot;name&quot;)
</code></pre>
2020/03/18 22:33:02 Segment &{dagger 1 map[]}
2020/03/18 22:33:02 Segment &{annotations 1 map[]}
2020/03/18 22:33:02 Segment &{provider annotation 1 map[]}
2020/03/18 22:33:02 <h1>docker</h1>

<h2>introduction</h2>

<p>5 core products:</p>

<ol>
<li><strong>docker engine</strong>: building

<ul>
<li>define images</li>
<li>add in application content</li>
<li>spin up local containers for testing</li>
</ul></li>
<li><strong>docker machine</strong>: running

<ul>
<li>provides a host (local or cloud)</li>
</ul></li>
<li><strong>docker compose</strong>: building

<ul>
<li>defines linking</li>
<li>allows you to group containers into a single application</li>
</ul></li>
<li><strong>docker registry</strong>: shipping

<ul>
<li>where we store images</li>
</ul></li>
<li><strong>docker swarm</strong>: running

<ul>
<li>distribute containers across an infrastructure</li>
<li>scale on demand</li>
<li>managing hosts</li>
<li>scheduling</li>
<li>allows us to make a group of components across various machines</li>
</ul></li>
</ol>

<p>supporting products:</p>

<ol>
<li><strong>docker hub</strong>

<ul>
<li>publish and manage containers</li>
</ul></li>
<li><strong>docker trusted registry</strong></li>
<li><strong>tutum</strong>

<ul>
<li>web interface for managing docker structure</li>
</ul></li>
<li><strong>kitematic</strong>

<ul>
<li>desktop app for managing docker</li>
</ul></li>
</ol>

<h3>hypervisors</h3>

<p>allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types</p>

<ol>
<li>type 1
hypervisor lives directly on the sever, and each holds an OS</li>
<li>type 2
physical server with OS, OS contains hypervisors with their own OS&rsquo;s running applications</li>
</ol>

<p><strong>namespaces</strong> Made containers possible. Allows us to isolate running processes from each other</p>

<h3>installation</h3>

<p>docker engine is built on Linux, otherwise requires a hypervisor</p>

<p>for info on installation to to the [docker docs]() // get link from slides!</p>

<h4>setup</h4>

<p><a href="https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker">https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker</a></p>

<p>To enable access to private repos, there are a few steps to go through (detailed in the link above)</p>

<p>You will require your dev certificate, key and ca bundle to get access to the modav docker image repository.</p>

<ol>
<li><p>Find or create the .docker directory in your home folder
<code>sh
cd ~/.docker
</code>
1. Create the certs.d directory in side the .docker directory
<code>sh
# ~/.docker
mkdir certs.d
cd certs.d
</code></p></li>

<li><p>Create the modav-docker.int.api.bbci.co.uk directory inside the certs.d directory. This is the same url the modav docker repository is reachable on and docker uses this match to load certificates per custom repository.</p>

<pre><code class="language-sh"># ~/.docker/certs.d
mkdir modav-docker.int.api.bbci.co.uk
cd modav-docker.int.api.bbci.co.uk
</code></pre>
<ol>
<li>Copy/link your dev certificate to the modav-docker.int.api.bbci.co.uk directory and name it client.cert
<code>sh
cp &lt;your ssl cert location&gt;/dev.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.cert
</code></li>
</ol></li>

<li><p>You might need to extract your certificate and key from your p12 bundle, this command should do it:</p>

<pre><code class="language-sh">openssl pkcs12 -nokeys -clcerts -in ${PKCS_FILE} -out ${CERT_FILE}
openssl pkcs12 -nocerts -nodes -in ${PKCS_FILE} -out ${KEY_FILE}
</code></pre>
<ol>
<li>Copy/link your dev key to the modav-docker.int.api.bbci.co.uk directory and name it client.key
<code>sh
cp &lt;your ssl cert location&gt;/dev.key ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/client.key
</code></li>
</ol></li>

<li><p>Copy/link your ca-bundle to the modav-docker.int.api.bbci.co.uk directory and name it ca.crt</p>

<pre><code class="language-sh">cp &lt;your ssl cert location&gt;/ca-bundle.crt ~/.docker/certs.d/modav-docker.int.api.bbci.co.uk/ca.crt
</code></pre>
<p>If you don&rsquo;t already have a ca-bundle.crt but you have a ca-bundle.pem you can convert it this way:</p>

<pre><code class="language-sh">openssl x509 -outform der -in ca-bundle.pem -out ca-bundle.crt
</code></pre></li>

<li><p>Open the docker setting menu in the Mac status bar and select preferences</p></li>

<li><p>Open the Daemon tab on the docker settings window</p></li>

<li><p>Add the modav docker repository url: <a href="https://modav-docker.int.api.bbci.co.uk">https://modav-docker.int.api.bbci.co.uk</a> to the Registry mirrors list. Ignore the warning message about there being no certs, we&rsquo;ve just configured this.
NOTE: (The warning is the reuslt of a bug in Docker and isn&rsquo;t anything to worry about. For some reason docker is remving the first letter on the hostname so it doesn&rsquo;t match.)</p></li>

<li><p>Apply and exit, then start (DON&rsquo;T JUST RESTART IT)the docker for mac application</p></li>

<li><p>Try and pull an image from the modav repository using this command:</p>

<pre><code class="language-sh">docker pull modav-docker.int.api.bbci.co.uk/modav/centos-7-bake
</code></pre>
<h3>components</h3>

<p><strong>daemon</strong> does the work, the <strong>client</strong> delegates to the daemon process.
<code>docker build</code> tells the daemon to create a container, building images, etc.
In a multi-machine environment, one client talks to multiple daemons (one for each machine). A machine with a daemon is a <strong>docker host</strong> so <code>docker-machine</code> talks to the particular machine rather than the client (so you need it to point to a particular one!).
The <strong>docker client</strong> runs on the host, as communicates with a daemon
&ldquo;`</p></li>
</ol>

<p>$ docker version</p>

<p>Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64</p>

<p>// this is (probably) your local machine</p>

<p>Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64</p>

<p>// this is the vm</p>

<pre><code>An __image__ is a read-only template of how to create a container. it contains the information.

- what to install
- network configuration
- which ports to expose
- environment variables

Each is almost always build on top of another image.

normally created by you, stored in a registry. You can have __base images__ that you use to extend, from your own or an official library. it lives for the length of its main process

A __container__ is an instance based on an image
- fully isolated
- changes to the container do not affect the image

A __repository__ is where images are stored. It lives in a __registry__.
- can store multiple images in a repository
- they are version controlled (not as strongly as git)

A __tag__ is the version number for an image
- identifer of a image is `repository:tag`
- if you don't specity the tag, then `:latest` is the default
- an image can have multiple tags (e.g. `latest` and `v1`)

### processes

Each container has a PID 1 process

The PID 1 processes are really other processes of the host machine.

All container processes are children of the docker daemon, which is running on some host PID

## docker machine

show machines
</code></pre>

<p>$ docker-machine ls</p>

<pre><code>show environment variables for machine:
</code></pre>

<p>docker-machine env [OPTIONS] <name>
    &ndash;no-proxy</p>

<pre><code>set up a machine
</code></pre>

<p>docker-machine create &ndash;driver virtualbox <name></p>

<pre><code>start up the machine:
</code></pre>

<p>docker-machine start <name></p>

<pre><code>direct the docker client to talk to the machine
</code></pre>

<p>eval $(docker-machine env <name>)</p>

<pre><code>sets up the environment variables and config, but this could be done manually so you can do it over a network

get the ip:
</code></pre>

<p>docker-machine ip <name></p>

<pre><code>stop the machine:
</code></pre>

<p>docker-machine stop <name></p>

<pre><code>### enable proxies

1. ssh into docker:
</code></pre>

<p>$ docker-machine ssh <name></p>

<pre><code>2. edit the daemon config file
</code></pre>

<p>sudo vi /var/lib/boot2docker/profile</p>

<pre><code>3. add the following config:
</code></pre>

<p>export HTTP_PROXY=<http-proxy-url>
   export HTTPS_PROXY=<https-proxy-url></p>

<pre><code>4. exit the ssh
</code></pre>

<p>docker-machine restart</p>

<pre><code>## images

list images
```sh
$ docker images [OPTIONS]

#  -a                 all
#  -f &lt;key&gt;=&lt;value&gt;   filter
</code></pre>

<p>tagging</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<pre><code class="language-sh">$ docker rmi &lt;imageName/imageId&gt;                    # to remove specific
$ docker rmi $(docker images [OPTIONS])             # to remove several

$ docker rmi $(docker images -qa)                   # remove all
$ docker rmi $(docker images -q -f dangling=true)   # remove dangling images (untagged)
</code></pre>

<h3>building</h3>

<p>Each <strong>layer</strong> in an image is <strong>read only</strong>. So creating a container of an image yields a <strong>writeable layer</strong>. Amending files in a container doesn&rsquo;t strictly amend them, but a record is kept in the writeable layer of what was changed.</p>

<p>commit a new image from a container</p>

<pre><code class="language-sh">$ docker commit [OPTIONS] &lt;container-id&gt; &lt;imageName:tag&gt;
    #  -a, --author=&lt;author&gt;       set the author
    #  -c, --change=[&lt;change&gt;]     apply specific instructions
    #  -m, --message=&lt;message&gt;     commit message
    #  -p, --pause                 pause during commit
    #  --help                      print help
</code></pre>

<p>build a new image from a <strong>build context</strong></p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;build-context&gt;
    # -t, --tag &lt;tag&gt;           tag the image
    # -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<h3>running [run]</h3>

<p>on run, the component runs the <strong>default command</strong>. This can be overridden by passing a command</p>

<pre><code class="language-sh">docker run [OPTIONS] &lt;image&gt; [COMMANDS]

$ docker run &lt;image&gt;             # with default command
$ docker run &lt;image&gt; &lt;command&gt;   # with specified command
$ docker run -it &lt;image&gt; sh      # runs with shell process

$ docker run -d &lt;image&gt;          # run in detached mode
</code></pre>

<p>stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; # stops gracefully
$ docker kill &lt;container-id/name&gt; # kills the container
</code></pre>

<h3>tagging</h3>

<p>creates a new version or updates an existing version. requires</p>

<pre><code class="language-sh">$ docker tag &lt;image&gt; &lt;repo:tag&gt;
</code></pre>

<h2>containers</h2>

<p>A <strong>container</strong> is an instance based on an image</p>

<p>view containers</p>

<pre><code class="language-sh">$ docker ps [OPTIONS]
#  -a                   all
#  -q                   quiet (only display ids)
#  -f &lt;field&gt;=&lt;value&gt;   filter
</code></pre>

<p>run a container</p>

<pre><code class="language-sh">docker run &lt;image&gt;
docker run -it &lt;image&gt; sh | bash // for interactive mode

# options:
# -P            expose a port
# -p &lt;port&gt;     expose a specific port
# -d            detached mode
</code></pre>

<p>save a change:</p>

<pre><code class="language-sh">$ docker commit &lt;container-id&gt; &lt;name&gt;
# returns an imageId
</code></pre>

<p>view changes (compares the state of the container with the image it&rsquo;s based on)</p>

<pre><code class="language-sh">docker diff &lt;container-id&gt;
</code></pre>

<p>inspect</p>

<pre><code class="language-sh">$ docker inspect &lt;container-id&gt;
</code></pre>

<h3>management</h3>

<p>A container is created when running an image, but you can create one without running using the <strong>docker create</strong> command</p>

<pre><code class="language-sh">$ docker create &lt;image&gt;
</code></pre>

<p>To stop a container</p>

<pre><code class="language-sh">$ docker stop &lt;container-id/name&gt; // stops gracefully

$ docker kill &lt;container-id/name&gt; // kills the container
</code></pre>

<p>To start a previously stopped container</p>

<pre><code class="language-sh">$ docker start &lt;container-id&gt;
</code></pre>

<h3>terminal access</h3>

<p>Use <strong>docker exec</strong> to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container</p>

<pre><code class="language-sh">$ docker exec [OPTIONS] &lt;container&gt; &lt;command&gt;
      -it   // interactive mode
</code></pre>

<h3>remove</h3>

<p><strong>images</strong> and <strong>containers</strong> are stored on the docker host. They are not automatically removed, so we need to clean up manually.</p>

<p>remove containers</p>

<pre><code class="language-sh">$ docker rm [OPTIONS] &lt;container-id&gt;
  # -f, --force  force remove
  # -l, --link
</code></pre>

<p>to remove multiples in one command</p>

<pre><code class="language-sh">$ docker rm $(docker ps -q -f &lt;field&gt;=&lt;value&gt;) # filtered
$ docker rm $(docker ps -qa)                   # all
</code></pre>

<h3>port mapping</h3>

<p>services typically run on standard ports. Within a container, you don&rsquo;t need to map to the same port outside of the container.</p>

<p>Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports</p>

<pre><code class="language-sh">docker run -P &lt;image&gt;                                 # automatic map to a port
docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image&gt;    # explicitly map to a given port
</code></pre>

<p>use <strong>EXPOSE</strong> in the docker file to specify container ports to map to</p>

<pre><code>EXPOSE 80 81 82
</code></pre>

<h2>hub</h2>

<p>login</p>

<pre><code class="language-sh">docker login --username=&lt;username&gt; --email=&lt;email&gt;
</code></pre>

<p><strong>PUSH</strong>
push the new version</p>

<pre><code class="language-sh">docker tag &lt;image&gt; &lt;repo:tag&gt;
docker login --username=&lt;username&gt; --email=&lt;email&gt;
docker push &lt;repo:tag&gt;
</code></pre>

<p><strong>PULL</strong></p>

<p>when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry</p>

<pre><code class="language-sh">$ docker pull [OPTIONS] &lt;name:tag&gt;
  #  -a, --all-tags
  #  --disable-content-trust
  #  --help
</code></pre>

<h2>configuration</h2>

<p>docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access.</p>

<p>to set this up:</p>

<pre><code class="language-sh">docker daemon -H unix:///var/run/... -H tcp// ...
</code></pre>

<p>on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered</p>

<h3>remote daemon</h3>

<p>set a configuration for a terminal process:</p>

<pre><code class="language-sh">export DOCKER_HOST=&quot;tcp://192.169.59.106:2375&quot;
docker ps
</code></pre>

<p>set it in the command with the <code>-H</code> flag</p>

<pre><code class="language-sh">docker -H tcp://... &lt;command&gt;
</code></pre>

<p>secure tls on the daemon:</p>

<pre><code class="language-sh">docker daemon -H ...
</code></pre>

<h2>logging</h2>

<p>docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container.</p>

<p>print all log for a container</p>

<pre><code class="language-sh">docker logs
docker logs -f             # follow
docker logs --since=&quot;&quot;     # since a particular time
docker logs --help=false   # print usage
docker logs --tail         # tail the log
docker logs --log-driver   # set the driver
docker logs --log-opt=[]   # driver-specific options
</code></pre>

<h2>dockerfile</h2>

<p>A <strong>docker file</strong> is a single configuration file that defines how an image is built</p>

<p>Save it as <code>Dockerfile</code>, no extension. You can use any name, but &lsquo;Dockerfile&rsquo; is the default (so doesn&rsquo;t need to be specified)</p>

<p>Can be used to define
- base images
- &hellip;</p>

<p>build an image from a dockerfile</p>

<pre><code class="language-sh">$ docker build [OPTIONS] &lt;directoryOfDockerfile&gt;
  #  -t, --tag &lt;tag&gt;           tag the image
  #  -f, --file &lt;filename&gt;     specify the dockerfile name
</code></pre>

<p>Normally, am image requires supporting files, e.g.:
- source code
- web content</p>

<h3>instructions</h3>

<p>instructions are written in linux shell commands</p>

<p><strong>FROM</strong>:</p>

<p>should be the first instruction, specifying the base image</p>

<pre><code>FROM &lt;image&gt;
</code></pre>

<p><strong>RUN</strong>:</p>

<p>executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands)</p>

<pre><code>RUN [&quot;&lt;ececutable&gt;&quot;, &quot;&lt;param&gt;&quot;, ..]
RUN &lt;command&gt;
</code></pre>

<p><strong>ADD</strong>:</p>

<p>adds a file to a specific location</p>

<pre><code>ADD &lt;file&gt; /                      # adds &lt;FILE&gt; to the root directory
ADD &lt;file&gt; &lt;target-directory&gt;     # adds &lt;FILE&gt; to the target directory
</code></pre>

<p><strong>CMD</strong>:</p>

<p>override the default command</p>

<pre><code>CMD echo 'hello world!'
</code></pre>

<p><strong>ENTRYPOINT</strong>:</p>

<p>a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command</p>

<pre><code>ENTRYPOINT [&quot;&lt;executble&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]
</code></pre>

<p>running this:</p>

<pre><code class="language-sh">$ docker run echobox
:   # outputs blank string

$ docker run echobox 'hello world!'
: hello world!
</code></pre>

<p><strong>ENV</strong></p>

<p>set environment variables</p>

<pre><code>ENV env=dev
ENV environment=$env
</code></pre>

<p><strong>VOLUME</strong></p>

<p>specific a volume</p>

<h3>build context</h3>

<p>This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container</p>

<h2>volumes</h2>

<p>A <strong>volume</strong> is a file system location. Within a container there is file system isolation. Volumes &lsquo;punch a hole&rsquo; in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers.</p>

<p>A <strong>simple volume</strong> is just a location in the container that is not mapped to a local diractory</p>

<pre><code class="language-sh">docker run -v /volume &lt;image&gt;
</code></pre>

<p>Volumes must be explicitly removed:</p>

<pre><code class="language-sh">docker rm -v &lt;volume&gt;
</code></pre>

<p>They cannot be mounted to the root file system</p>

<p><strong>host volumes</strong> is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be <em>overwritten</em></p>

<pre><code class="language-sh">$ docker run -v &lt;host-directory&gt;:&lt;container-directory&gt;:&lt;permission&gt; &lt;image&gt;

 # the directory must be a full path, so it can be differentiated from named volumes
</code></pre>

<p><strong>named volumes</strong> is a volume with a name that can be reused</p>

<pre><code class="language-sh">docker volume create --name &lt;volume-name&gt;

docker volume ls

docker run -v &lt;volume-name&gt; &lt;image&gt;
</code></pre>

<p>named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems</p>

<p>mounting from other containers will copy the volumes from a specified container</p>

<pre><code class="language-sh">docker run --volumes-from &lt;from-container&gt; &lt;image&gt;
</code></pre>

<h3>dangling volumes</h3>

<p>a dangling volume is a volume that isn&rsquo;t reference by a container</p>

<pre><code class="language-sh">docker volume ls -f dangling=true
</code></pre>

<h2>networking</h2>

<p>docker support the following network modes:
- none
- host
- default bridge
- others</p>

<p>list networks:</p>

<pre><code class="language-sh">docker network ls
</code></pre>

<p>create a network</p>

<pre><code class="language-sh">docker network create &lt;network-name&gt; [OPTIONS]
  #  --internal=true
</code></pre>

<p>there are 3 pre-defined networks that cannot be removed.</p>

<p>use a network:</p>

<pre><code class="language-sh">docker run --network none &lt;image&gt;
</code></pre>

<p>inspect network:</p>

<pre><code class="language-sh">docker network inspect &lt;networ  k-name&gt;
</code></pre>

<p>remove a network</p>

<pre><code class="language-sh">docker network rm &lt;name&gt;

# will have to end any containers using the networks first
</code></pre>

<h3>network types</h3>

<p><strong>NONE</strong>:</p>

<p>no network</p>

<p><strong>HOST</strong>:</p>

<p>shares the host network</p>

<p><strong>BRIDGE</strong>:</p>

<p>default network
- containers can reach each other by ip address, not by name</p>

<p>requires  linking:</p>

<p>a <strong>container link</strong></p>

<pre><code>docker run --link &lt;image-name&gt;:&lt;link&gt;
</code></pre>

<h2>continuous integration</h2>

<p>when deploying to containers, we want to build our containers before running integration tests. Also, there isn&rsquo;t any real need to publish an artifact, given the</p>

<p><strong>dockerhub</strong> has an <strong>autobuild</strong> option. It listens to a git repo and build when a commit it made</p>

<h2>docker compose</h2>

<p>helps to create your entire application. Written in <strong>yaml</strong>. It basically just lets you build several containers at once.</p>
2020/03/18 22:33:02 Segment &{docker 1 map[]}
2020/03/18 22:33:02 Segment &{introduction 1 map[]}
2020/03/18 22:33:02 Segment &{5 core products: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{supporting products: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{hypervisors 1 map[]}
2020/03/18 22:33:02 Segment &{allows you to run separate OSs on a single machine. A precursor to containers. But with dedicated CPU and RAM, so we can only carve it up a distinct number of times. There are limited types 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{namespaces 5 map[]}
2020/03/18 22:33:02 Segment &{ Made containers possible. Allows us to isolate running processes from each other 1 map[]}
2020/03/18 22:33:02 Segment &{installation 1 map[]}
2020/03/18 22:33:02 Segment &{docker engine is built on Linux, otherwise requires a hypervisor 1 map[]}
2020/03/18 22:33:02 Segment &{for info on installation to to the [docker docs]() // get link from slides! 1 map[]}
2020/03/18 22:33:02 Segment &{setup 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker}]. raw = 'https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker'
2020/03/18 22:33:02 Segment &{https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker 17 map[href:https://confluence.dev.bbc.co.uk/display/modav/Modav+Docker]}
2020/03/18 22:33:02 Segment &{To enable access to private repos, there are a few steps to go through (detailed in the link above) 1 map[]}
2020/03/18 22:33:02 Segment &{You will require your dev certificate, key and ca bundle to get access to the modav docker image repository. 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{$ docker version 1 map[]}
2020/03/18 22:33:02 Segment &{Client:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.7.1
 Git commit:   6f9534c
 Built:        Thu Sep  8 10:31:18 2016
 OS/Arch:      darwin/amd64 1 map[]}
2020/03/18 22:33:02 Segment &{// this is (probably) your local machine 1 map[]}
2020/03/18 22:33:02 Segment &{Server:
 Version:      1.12.1
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   23cf638
 Built:        Thu Aug 18 17:52:38 2016
 OS/Arch:      linux/amd64 1 map[]}
2020/03/18 22:33:02 Segment &{// this is the vm 1 map[]}
2020/03/18 22:33:02 Segment &{$ docker-machine ls 1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine env [OPTIONS]  1 map[]}
2020/03/18 22:33:02 Segment &{
    –no-proxy 1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine create –driver virtualbox  1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine start  1 map[]}
2020/03/18 22:33:02 Segment &{eval $(docker-machine env  1 map[]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine ip  1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine stop  1 map[]}
2020/03/18 22:33:02 Segment &{$ docker-machine ssh  1 map[]}
2020/03/18 22:33:02 Segment &{sudo vi /var/lib/boot2docker/profile 1 map[]}
2020/03/18 22:33:02 Segment &{export HTTP_PROXY= 1 map[]}
2020/03/18 22:33:02 Segment &{
   export HTTPS_PROXY= 1 map[]}
2020/03/18 22:33:02 Segment &{docker-machine restart 1 map[]}
2020/03/18 22:33:02 Segment &{tagging 1 map[]}
2020/03/18 22:33:02 Segment &{images 5 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{containers 5 map[]}
2020/03/18 22:33:02 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:33:02 Segment &{building 1 map[]}
2020/03/18 22:33:02 Segment &{Each  1 map[]}
2020/03/18 22:33:02 Segment &{layer 5 map[]}
2020/03/18 22:33:02 Segment &{ in an image is  1 map[]}
2020/03/18 22:33:02 Segment &{read only 5 map[]}
2020/03/18 22:33:02 Segment &{. So creating a container of an image yields a  1 map[]}
2020/03/18 22:33:02 Segment &{writeable layer 5 map[]}
2020/03/18 22:33:02 Segment &{. Amending files in a container doesn’t strictly amend them, but a record is kept in the writeable layer of what was changed. 1 map[]}
2020/03/18 22:33:02 Segment &{commit a new image from a container 1 map[]}
2020/03/18 22:33:02 Segment &{build a new image from a  1 map[]}
2020/03/18 22:33:02 Segment &{build context 5 map[]}
2020/03/18 22:33:02 Segment &{running [run] 1 map[]}
2020/03/18 22:33:02 Segment &{on run, the component runs the  1 map[]}
2020/03/18 22:33:02 Segment &{default command 5 map[]}
2020/03/18 22:33:02 Segment &{. This can be overridden by passing a command 1 map[]}
2020/03/18 22:33:02 Segment &{stop a container 1 map[]}
2020/03/18 22:33:02 Segment &{tagging 1 map[]}
2020/03/18 22:33:02 Segment &{creates a new version or updates an existing version. requires 1 map[]}
2020/03/18 22:33:02 Segment &{containers 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{container 5 map[]}
2020/03/18 22:33:02 Segment &{ is an instance based on an image 1 map[]}
2020/03/18 22:33:02 Segment &{view containers 1 map[]}
2020/03/18 22:33:02 Segment &{run a container 1 map[]}
2020/03/18 22:33:02 Segment &{save a change: 1 map[]}
2020/03/18 22:33:02 Segment &{view changes (compares the state of the container with the image it’s based on) 1 map[]}
2020/03/18 22:33:02 Segment &{inspect 1 map[]}
2020/03/18 22:33:02 Segment &{management 1 map[]}
2020/03/18 22:33:02 Segment &{A container is created when running an image, but you can create one without running using the  1 map[]}
2020/03/18 22:33:02 Segment &{docker create 5 map[]}
2020/03/18 22:33:02 Segment &{ command 1 map[]}
2020/03/18 22:33:02 Segment &{To stop a container 1 map[]}
2020/03/18 22:33:02 Segment &{To start a previously stopped container 1 map[]}
2020/03/18 22:33:02 Segment &{terminal access 1 map[]}
2020/03/18 22:33:02 Segment &{Use  1 map[]}
2020/03/18 22:33:02 Segment &{docker exec 5 map[]}
2020/03/18 22:33:02 Segment &{ to execute another process in a container. PID1 process is the main process on the container, but we can inject other processes in the container. Typically this would be a bash process so you can hack into the container 1 map[]}
2020/03/18 22:33:02 Segment &{remove 1 map[]}
2020/03/18 22:33:02 Segment &{images 5 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{containers 5 map[]}
2020/03/18 22:33:02 Segment &{ are stored on the docker host. They are not automatically removed, so we need to clean up manually. 1 map[]}
2020/03/18 22:33:02 Segment &{remove containers 1 map[]}
2020/03/18 22:33:02 Segment &{to remove multiples in one command 1 map[]}
2020/03/18 22:33:02 Segment &{port mapping 1 map[]}
2020/03/18 22:33:02 Segment &{services typically run on standard ports. Within a container, you don’t need to map to the same port outside of the container. 1 map[]}
2020/03/18 22:33:02 Segment &{Within a container, only one process can bind to one port, but many containers can bind processes to the same port that map to different host ports 1 map[]}
2020/03/18 22:33:02 Segment &{use  1 map[]}
2020/03/18 22:33:02 Segment &{EXPOSE 5 map[]}
2020/03/18 22:33:02 Segment &{ in the docker file to specify container ports to map to 1 map[]}
2020/03/18 22:33:02 Segment &{hub 1 map[]}
2020/03/18 22:33:02 Segment &{login 1 map[]}
2020/03/18 22:33:02 Segment &{PUSH 5 map[]}
2020/03/18 22:33:02 Segment &{
push the new version 1 map[]}
2020/03/18 22:33:02 Segment &{PULL 5 map[]}
2020/03/18 22:33:02 Segment &{when you use an image, it automatically pulls the image, but you can explicitly pull them. Perhaps if you want to do your downloading beforehand, or ensuring you pull a different version to one in your local registry 1 map[]}
2020/03/18 22:33:02 Segment &{configuration 1 map[]}
2020/03/18 22:33:02 Segment &{docker daemon listens on a unix socket by default. To allow remote access you have to configure TCP socket access. 1 map[]}
2020/03/18 22:33:02 Segment &{to set this up: 1 map[]}
2020/03/18 22:33:02 Segment &{on docker-machine, boot2docker profile /var/lib/boot2docker/profile configuration may be altered 1 map[]}
2020/03/18 22:33:02 Segment &{remote daemon 1 map[]}
2020/03/18 22:33:02 Segment &{set a configuration for a terminal process: 1 map[]}
2020/03/18 22:33:02 Segment &{set it in the command with the  1 map[]}
2020/03/18 22:33:02 Segment &{-H 9 map[]}
2020/03/18 22:33:02 Segment &{ flag 1 map[]}
2020/03/18 22:33:02 Segment &{secure tls on the daemon: 1 map[]}
2020/03/18 22:33:02 Segment &{logging 1 map[]}
2020/03/18 22:33:02 Segment &{docker captures all STOUT to a logger, using a particular logging driver. It can be configured on a whole daemon or a container. 1 map[]}
2020/03/18 22:33:02 Segment &{print all log for a container 1 map[]}
2020/03/18 22:33:02 Segment &{dockerfile 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{docker file 5 map[]}
2020/03/18 22:33:02 Segment &{ is a single configuration file that defines how an image is built 1 map[]}
2020/03/18 22:33:02 Segment &{Save it as  1 map[]}
2020/03/18 22:33:02 Segment &{Dockerfile 9 map[]}
2020/03/18 22:33:02 Segment &{, no extension. You can use any name, but ‘Dockerfile’ is the default (so doesn’t need to be specified) 1 map[]}
2020/03/18 22:33:02 Segment &{Can be used to define
- base images
- … 1 map[]}
2020/03/18 22:33:02 Segment &{build an image from a dockerfile 1 map[]}
2020/03/18 22:33:02 Segment &{Normally, am image requires supporting files, e.g.:
- source code
- web content 1 map[]}
2020/03/18 22:33:02 Segment &{instructions 1 map[]}
2020/03/18 22:33:02 Segment &{instructions are written in linux shell commands 1 map[]}
2020/03/18 22:33:02 Segment &{FROM 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{should be the first instruction, specifying the base image 1 map[]}
2020/03/18 22:33:02 Segment &{RUN 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{executes a command in the container
used to modify file systems
run scripts / download software
each command issues a commit (so you have intermediate commits between run commands) 1 map[]}
2020/03/18 22:33:02 Segment &{ADD 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{adds a file to a specific location 1 map[]}
2020/03/18 22:33:02 Segment &{CMD 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{override the default command 1 map[]}
2020/03/18 22:33:02 Segment &{ENTRYPOINT 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{a command executed at runtime. This command cannot be overridden when the image is run. Any command passed when running will be treated as arguments to the entrypoint command 1 map[]}
2020/03/18 22:33:02 Segment &{running this: 1 map[]}
2020/03/18 22:33:02 Segment &{ENV 5 map[]}
2020/03/18 22:33:02 Segment &{set environment variables 1 map[]}
2020/03/18 22:33:02 Segment &{VOLUME 5 map[]}
2020/03/18 22:33:02 Segment &{specific a volume 1 map[]}
2020/03/18 22:33:02 Segment &{build context 1 map[]}
2020/03/18 22:33:02 Segment &{This is the directory containing all resources needed for the build. The daemon turns this in to a tar and copies it to the new container 1 map[]}
2020/03/18 22:33:02 Segment &{volumes 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{volume 5 map[]}
2020/03/18 22:33:02 Segment &{ is a file system location. Within a container there is file system isolation. Volumes ‘punch a hole’ in the container allowing us to access that file system from somewhere else. This allows up to share file systems across multiple containers. 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{simple volume 5 map[]}
2020/03/18 22:33:02 Segment &{ is just a location in the container that is not mapped to a local diractory 1 map[]}
2020/03/18 22:33:02 Segment &{Volumes must be explicitly removed: 1 map[]}
2020/03/18 22:33:02 Segment &{They cannot be mounted to the root file system 1 map[]}
2020/03/18 22:33:02 Segment &{host volumes 5 map[]}
2020/03/18 22:33:02 Segment &{ is a mount point that is mapped to a host directory. Anything in an existing directory with the same path will be  1 map[]}
2020/03/18 22:33:02 Segment &{overwritten 3 map[]}
2020/03/18 22:33:02 Segment &{named volumes 5 map[]}
2020/03/18 22:33:02 Segment &{ is a volume with a name that can be reused 1 map[]}
2020/03/18 22:33:02 Segment &{named volumes use drivers to specify the file system. so you can make:
- local file system volumes
- network file systems
- cloud file systems 1 map[]}
2020/03/18 22:33:02 Segment &{mounting from other containers will copy the volumes from a specified container 1 map[]}
2020/03/18 22:33:02 Segment &{dangling volumes 1 map[]}
2020/03/18 22:33:02 Segment &{a dangling volume is a volume that isn’t reference by a container 1 map[]}
2020/03/18 22:33:02 Segment &{networking 1 map[]}
2020/03/18 22:33:02 Segment &{docker support the following network modes:
- none
- host
- default bridge
- others 1 map[]}
2020/03/18 22:33:02 Segment &{list networks: 1 map[]}
2020/03/18 22:33:02 Segment &{create a network 1 map[]}
2020/03/18 22:33:02 Segment &{there are 3 pre-defined networks that cannot be removed. 1 map[]}
2020/03/18 22:33:02 Segment &{use a network: 1 map[]}
2020/03/18 22:33:02 Segment &{inspect network: 1 map[]}
2020/03/18 22:33:02 Segment &{remove a network 1 map[]}
2020/03/18 22:33:02 Segment &{network types 1 map[]}
2020/03/18 22:33:02 Segment &{NONE 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{no network 1 map[]}
2020/03/18 22:33:02 Segment &{HOST 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{shares the host network 1 map[]}
2020/03/18 22:33:02 Segment &{BRIDGE 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{default network
- containers can reach each other by ip address, not by name 1 map[]}
2020/03/18 22:33:02 Segment &{requires  linking: 1 map[]}
2020/03/18 22:33:02 Segment &{a  1 map[]}
2020/03/18 22:33:02 Segment &{container link 5 map[]}
2020/03/18 22:33:02 Segment &{continuous integration 1 map[]}
2020/03/18 22:33:02 Segment &{when deploying to containers, we want to build our containers before running integration tests. Also, there isn’t any real need to publish an artifact, given the 1 map[]}
2020/03/18 22:33:02 Segment &{dockerhub 5 map[]}
2020/03/18 22:33:02 Segment &{ has an  1 map[]}
2020/03/18 22:33:02 Segment &{autobuild 5 map[]}
2020/03/18 22:33:02 Segment &{ option. It listens to a git repo and build when a commit it made 1 map[]}
2020/03/18 22:33:02 Segment &{docker compose 1 map[]}
2020/03/18 22:33:02 Segment &{helps to create your entire application. Written in  1 map[]}
2020/03/18 22:33:02 Segment &{yaml 5 map[]}
2020/03/18 22:33:02 Segment &{. It basically just lets you build several containers at once. 1 map[]}
2020/03/18 22:33:02 <h1>dot (graph description language)</h1>

<p><a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language">https://en.wikipedia.org/wiki/DOT_(graph_description_language</a>)</p>

<pre><code class="language-dot">graph name {
  a -- b -- c;
}
</code></pre>
2020/03/18 22:33:02 Segment &{dot (graph description language) 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://en.wikipedia.org/wiki/DOT_(graph_description_language}]. raw = 'https://en.wikipedia.org/wiki/DOT_(graph_description_language'
2020/03/18 22:33:02 Segment &{https://en.wikipedia.org/wiki/DOT_(graph_description_language 17 map[href:https://en.wikipedia.org/wiki/DOT_(graph_description_language]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 <h1><a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/">Enterprise Engineering Patterns</a></h1>

<h2><a href="http://camel.apache.org/">Apache Camel</a></h2>
2020/03/18 22:33:02 >>>>> atts = [{ href http://www.enterpriseintegrationpatterns.com/patterns/messaging/}]. raw = 'Enterprise Engineering Patterns'
2020/03/18 22:33:02 Segment &{Enterprise Engineering Patterns 17 map[href:http://www.enterpriseintegrationpatterns.com/patterns/messaging/]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://camel.apache.org/}]. raw = 'Apache Camel'
2020/03/18 22:33:02 Segment &{Apache Camel 17 map[href:http://camel.apache.org/]}
2020/03/18 22:33:02 <h1>eslint</h1>

<p>Pluggable javascript linting tool</p>

<p><a href="https://eslint.org/">https://eslint.org/</a></p>

<h2>configuring</h2>

<p>diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling:</p>

<pre><code class="language-js">/* eslint-disable */
smelly(code )  goes here  
/* eslint-enable */

clean(code) goes here;

</code></pre>

<p>diable specific rules (comma separated):</p>

<pre><code class="language-js">/* eslint-disable no-alert, no-console */
console.log('haha, I\'m getting away with this!');
/* eslint-enable no-alert, no-console */
</code></pre>

<p>disable on a specific line:</p>

<pre><code class="language-js">console.log('just this once!'); // eslint-disable-line no-console
</code></pre>

<h3>config file</h3>

<p><code>.eslintrc</code></p>

<pre><code class="language-json">{
    &quot;extends&quot;: &quot;eslint:recommended&quot;,
    &quot;parser&quot;: &quot;babel-eslint&quot;,
    &quot;parserOptions&quot;: {
        &quot;ecmaVersion&quot;: 6,
        &quot;sourceType&quot;: &quot;module&quot;,
        &quot;ecmaFeatures&quot;: {
            &quot;jsx&quot;: true,
            &quot;impliedStrict&quot;: true
        }
    },
    &quot;env&quot;: {
        &quot;es6&quot;: true,
        &quot;node&quot;: true,
        &quot;browser&quot;: true,
        &quot;jasmine&quot;: true
    },
    &quot;rules&quot;: {
        &quot;arrow-parens&quot;: [2, &quot;always&quot;],
        &quot;arrow-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;constructor-super&quot;: 2,
        &quot;generator-star-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;no-dupe-class-members&quot;: 2,
        &quot;no-this-before-super&quot;: 2,
        &quot;no-var&quot;: 2,
        &quot;prefer-arrow-callback&quot;: 2,
        &quot;prefer-const&quot;: 2,
        &quot;prefer-spread&quot;: 2,
        &quot;prefer-template&quot;: 2,

        &quot;array-bracket-spacing&quot;: 2,
        &quot;block-scoped-var&quot;: 2,
        &quot;block-spacing&quot;: 2,
        &quot;brace-style&quot;: 2,
        &quot;camelcase&quot;: 2,
        &quot;comma-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;comma-style&quot;: 2,
        &quot;complexity&quot;: [1, 10],
        &quot;computed-property-spacing&quot;: [2, &quot;never&quot;],
        &quot;consistent-return&quot;: 2,
        &quot;curly&quot;: 2,
        &quot;eol-last&quot;: 2,
        &quot;eqeqeq&quot;: 2,
        &quot;indent&quot;: 2,
        &quot;jsx-quotes&quot;: 1,
        &quot;key-spacing&quot;: [2, {
            &quot;beforeColon&quot;: false,
            &quot;afterColon&quot;: true,
            &quot;mode&quot;: &quot;minimum&quot;
        }],
        &quot;keyword-spacing&quot;: [2, {
            &quot;before&quot;: true,
            &quot;after&quot;: true
        }],
        &quot;max-depth&quot;: [1, 4],
        &quot;max-nested-callbacks&quot;: [1, 8],
        &quot;max-params&quot;: [2, 4],
        &quot;max-statements&quot;: [1, 20],
        &quot;no-else-return&quot;: 1,
        &quot;no-eq-null&quot;: 2,
        &quot;no-eval&quot;: 2,
        &quot;no-extra-bind&quot;: 2,
        &quot;no-implied-eval&quot;: 2,
        &quot;no-inline-comments&quot;: 1,
        &quot;no-lonely-if&quot;: 1,
        &quot;no-lone-blocks&quot;: 2,
        &quot;no-loop-func&quot;: 2,
        &quot;no-magic-numbers&quot;: [2, {
            &quot;ignore&quot;: [-1, 0, 1, 2, 200, 404, 500],
            &quot;ignoreArrayIndexes&quot;: true
        }],
        &quot;no-mixed-spaces-and-tabs&quot;: 2,
        &quot;no-multiple-empty-lines&quot;: 2,
        &quot;no-multi-spaces&quot;: 1,
        &quot;no-multi-str&quot;: 1,
        &quot;no-nested-ternary&quot;: 2,
        &quot;no-param-reassign&quot;: 2,
        &quot;no-plusplus&quot;: 1,
        &quot;no-return-assign&quot;: 2,
        &quot;no-self-compare&quot;: 2,
        &quot;no-sequences&quot;: 1,
        &quot;no-spaced-func&quot;: 2,
        &quot;no-trailing-spaces&quot;: 2,
        &quot;no-useless-call&quot;: 2,
        &quot;no-use-before-define&quot;: 2,
        &quot;no-unexpected-multiline&quot;: 1,
        &quot;no-unneeded-ternary&quot;: 2,
        &quot;no-warning-comments&quot;: [1, {
            &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;],
            &quot;location&quot;: &quot;start&quot;
        }],
        &quot;one-var&quot;: 0,
        &quot;semi&quot;: [2, &quot;always&quot;],
        &quot;semi-spacing&quot;: [2, {
            &quot;before&quot;: false,
            &quot;after&quot;: true
        }],
        &quot;space-before-blocks&quot;: 2,
        &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],
        &quot;space-in-parens&quot;: [2, &quot;never&quot;],
        &quot;space-infix-ops&quot;: 2,
        &quot;space-unary-ops&quot;: 2,
        &quot;spaced-comment&quot;: [2, &quot;always&quot;, {
            &quot;exceptions&quot;: [&quot;-&quot;, &quot;+&quot;]
        }],
        &quot;vars-on-top&quot;: 1,
        &quot;yoda&quot;: 1
    }
}
</code></pre>

<h2>rules</h2>

<p>It&rsquo;s a big list, to be found <a href="https://eslint.org/docs/rules/">here</a></p>
2020/03/18 22:33:02 Segment &{eslint 1 map[]}
2020/03/18 22:33:02 Segment &{Pluggable javascript linting tool 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://eslint.org/}]. raw = 'https://eslint.org/'
2020/03/18 22:33:02 Segment &{https://eslint.org/ 17 map[href:https://eslint.org/]}
2020/03/18 22:33:02 Segment &{configuring 1 map[]}
2020/03/18 22:33:02 Segment &{diable/enable all rules for the remainder of the file, or within a blocked scope by re-enabling: 1 map[]}
2020/03/18 22:33:02 Segment &{diable specific rules (comma separated): 1 map[]}
2020/03/18 22:33:02 Segment &{disable on a specific line: 1 map[]}
2020/03/18 22:33:02 Segment &{config file 1 map[]}
2020/03/18 22:33:02 Segment &{.eslintrc 9 map[]}
2020/03/18 22:33:02 Segment &{rules 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://eslint.org/docs/rules/}]. raw = 'here'
2020/03/18 22:33:02 Segment &{It’s a big list, to be found  1 map[]}
2020/03/18 22:33:02 Segment &{here 17 map[href:https://eslint.org/docs/rules/]}
2020/03/18 22:33:02 <h1>gcc</h1>

<p>show include paths:</p>

<pre><code class="language-shell">echo | gcc -E -Wp,-v -
</code></pre>

<p>show linker paths:</p>

<pre><code class="language-shell">gcc -Xlinker -v
</code></pre>

<h2>options</h2>

<p>see <a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html</a></p>

<h2>compile</h2>

<pre><code class="language-shell">gcc -c source.c [... others.c]
gcc -c source.c -o source.o
</code></pre>

<p>When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the <code>-I</code> option.</p>

<pre><code class="language-shell">gcc -c source.c -Irelative/path/to/include
gcc -c source.c -I/absolute/path/to/include
</code></pre>

<h2>link</h2>

<pre><code class="language-shell">gcc
</code></pre>

<p>Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? (<code>gcc -Xlinker -v</code> will tell you the defaults)
1. what libraries do I link with?</p>

<p>the first is resolved with the <code>-L</code> option, the seconds with the <code>-l</code> options</p>

<p>e.g</p>

<pre><code class="language-shell">gcc -Lpath/to/foo/lib -lfoo  foo.o -o foo.out
</code></pre>

<p>the name should be without extension of <code>lib</code> prefix</p>
2020/03/18 22:33:02 Segment &{gcc 1 map[]}
2020/03/18 22:33:02 Segment &{show include paths: 1 map[]}
2020/03/18 22:33:02 Segment &{show linker paths: 1 map[]}
2020/03/18 22:33:02 Segment &{options 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html}]. raw = 'https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html'
2020/03/18 22:33:02 Segment &{see  1 map[]}
2020/03/18 22:33:02 Segment &{https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html 17 map[href:https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html]}
2020/03/18 22:33:02 Segment &{compile 1 map[]}
2020/03/18 22:33:02 Segment &{When using a static library, you need to include the path to the header files
that are imported in your code. Pass the relative file path as an argument with the  1 map[]}
2020/03/18 22:33:02 Segment &{-I 9 map[]}
2020/03/18 22:33:02 Segment &{ option. 1 map[]}
2020/03/18 22:33:02 Segment &{link 1 map[]}
2020/03/18 22:33:02 Segment &{Likewise when working with a static library, you need to specify
1. where are any included libraries to be found? ( 1 map[]}
2020/03/18 22:33:02 Segment &{gcc -Xlinker -v 9 map[]}
2020/03/18 22:33:02 Segment &{ will tell you the defaults)
1. what libraries do I link with? 1 map[]}
2020/03/18 22:33:02 Segment &{the first is resolved with the  1 map[]}
2020/03/18 22:33:02 Segment &{-L 9 map[]}
2020/03/18 22:33:02 Segment &{ option, the seconds with the  1 map[]}
2020/03/18 22:33:02 Segment &{-l 9 map[]}
2020/03/18 22:33:02 Segment &{ options 1 map[]}
2020/03/18 22:33:02 Segment &{e.g 1 map[]}
2020/03/18 22:33:02 Segment &{the name should be without extension of  1 map[]}
2020/03/18 22:33:02 Segment &{lib 9 map[]}
2020/03/18 22:33:02 Segment &{ prefix 1 map[]}
2020/03/18 22:33:02 <h1>Data Protection and Info Sec Training</h1>

<p>GDPR = (General Data Protection Regulation)</p>

<h2>Security</h2>

<p>Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless)</p>

<h2>What is Personal Data?</h2>

<p>Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress)</p>

<p>Personal data can be a combination of pieces of information that, when grouped together, can identify any living person.</p>

<p>Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ &hellip;</p>

<p>Misuse can result in a €20M fine!</p>

<h2>Handling personal data</h2>

<p>4 principles:</p>

<h4>1 Accountability</h4>

<p>Keeping records and carrying out Privacy Impact Assessments</p>

<p>This means keeping an Information Asset Register (IAR). this contains</p>

<ul>
<li>description of the data being kept</li>
<li>the legal reason it is being used</li>
</ul>

<p>Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing</p>

<h4>2 Transparency</h4>

<p>Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with)</p>

<h4>3 Data Minimisation</h4>

<p>Only collect data that is needed.</p>

<p>Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required</p>

<h4>4 Data portability</h4>

<p>GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data</p>

<p>Also parental consent is required for children&rsquo;s data</p>

<h3>Breach</h3>

<p>If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately.</p>

<p>Under GDPR, breaches must be reported to the UK Information Commission within 72 hours</p>

<p>so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team.</p>

<h3>Summary</h3>

<p>Personal data must always be kept secure, accurate and up to date.</p>

<p>The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC&rsquo;s total worldwide turnover.</p>

<p>If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​.</p>

<h2>Scams</h2>

<p>There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation.</p>

<h3>Phishing</h3>

<p>Using email to trick you into taking action (links, attachments).</p>

<p>Look out for things that JDLR (Just Doesn&rsquo;t Look Right). clues are:</p>

<ul>
<li>Urgency: often these will have an urgent tone to rush you</li>
<li>Deceptive links: check the address before clicking</li>
<li>Misleading sender</li>
<li>Generic greeting: &ldquo;dear customer&rdquo;</li>
<li>Poor spelling/grammar</li>
<li>Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender</li>
</ul>

<p>Contact information.security@bbc.co.uk if you find anything suspicious</p>

<h3>Text and Phone Scams</h3>

<p>It&rsquo;s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of.</p>

<p>Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious</p>

<h2>Passwords</h2>

<p>Don&rsquo;t you just love passwords? Trouble is, we&rsquo;re dependent on good password practice to keep BBC information secure.</p>

<p>Is your password as good as it could be? Really?</p>

<h4>Do&rsquo;s</h4>

<ul>
<li>make them at least 8 chars long</li>
<li>think about using a passphrase</li>
<li>mix thinhs up, with symbols and uppercase</li>
<li>change your password as soon as you suspect something</li>
</ul>

<h4>Dont&rsquo;s</h4>

<ul>
<li>write them down</li>
<li>use sequences or repeated characters</li>
<li>use a password that is public information (e.g. your address, DOB, name, etc)</li>
<li>share the network password</li>
</ul>

<h2>Email</h2>

<p>2 rules in the Acceptable Use Policy:</p>

<ol>
<li>BBC email for work only</li>
<li>Personal email for non-work only</li>
</ol>

<h2>Handling Data</h2>

<p>Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children&rsquo;s personal data
+ audience data</p>

<p>Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed.</p>

<p>This is known as <strong>RESTRICTED</strong> data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it&rsquo;s placed in the cloud.
1. Encrypt the file before it&rsquo;s uploaded.</p>

<p><strong>PUBLIC</strong></p>

<p>Information that is already publicly available or information that wouldn&rsquo;t breach any confidentiality if it were disclosed.</p>

<p><strong>PROTECTED</strong></p>

<p>This is the BBC&rsquo;s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed.</p>

<p>For more information on types of information (data classification) and how to handle them visit Gateway.</p>

<h2>Offline Security</h2>

<p>Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online.</p>

<p>In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations.</p>

<p>Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them?</p>

<h2>Help</h2>

<p>Remember you&rsquo;re not alone. The BBC InfoSec Team are here to help and we&rsquo;re available <sup>24</sup>&frasl;<sub>7</sub>, providing advice, dealing with threats and managing cyber-attacks. If you&rsquo;re in any doubt at all or you just want to make sure you&rsquo;re doing the right thing, drop us a quick email at information.security@bbc.co.uk</p>

<p>For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk</p>

<p>We&rsquo;re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn&rsquo;t get in the way of your project going live</p>

<p>If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed.</p>
2020/03/18 22:33:02 Segment &{Data Protection and Info Sec Training 1 map[]}
2020/03/18 22:33:02 Segment &{GDPR = (General Data Protection Regulation) 1 map[]}
2020/03/18 22:33:02 Segment &{Security 1 map[]}
2020/03/18 22:33:02 Segment &{Potential threats
+ state-sponsored groups (e.g. China)
+ Hacktivists (e.g. Anonymous)
+ Cyber criminals (in it for the money)
+ Glory seekers (in it for the glory)
+ Employees (potentially when being careless) 1 map[]}
2020/03/18 22:33:02 Segment &{What is Personal Data? 1 map[]}
2020/03/18 22:33:02 Segment &{Personal data is any information that identifies any living person.
(e.g. address, name, cookie ids, ip adrress) 1 map[]}
2020/03/18 22:33:02 Segment &{Personal data can be a combination of pieces of information that, when grouped together, can identify any living person. 1 map[]}
2020/03/18 22:33:02 Segment &{Sensitive data:
+ health
+ sex life
+ political optinion/membership
+ biometric data
+ … 1 map[]}
2020/03/18 22:33:02 Segment &{Misuse can result in a €20M fine! 1 map[]}
2020/03/18 22:33:02 Segment &{Handling personal data 1 map[]}
2020/03/18 22:33:02 Segment &{4 principles: 1 map[]}
2020/03/18 22:33:02 Segment &{1 Accountability 1 map[]}
2020/03/18 22:33:02 Segment &{Keeping records and carrying out Privacy Impact Assessments 1 map[]}
2020/03/18 22:33:02 Segment &{This means keeping an Information Asset Register (IAR). this contains 1 map[]}
2020/03/18 22:33:02 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:33:02 Segment &{description of the data being kept 1 map[]}
2020/03/18 22:33:02 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:33:02 Segment &{the legal reason it is being used 1 map[]}
2020/03/18 22:33:02 Segment &{Must be a lawful ground for collecting data, e.g:
+ journalism
+ marketing
+ billing 1 map[]}
2020/03/18 22:33:02 Segment &{2 Transparency 1 map[]}
2020/03/18 22:33:02 Segment &{Must provide a privacy notice. In it you must say:
+ Who? (are we)
+ What? (data are you collecting)
+ Why? (are you collecting data)
+ How long data will be kept (and who you are sharing it with) 1 map[]}
2020/03/18 22:33:02 Segment &{3 Data Minimisation 1 map[]}
2020/03/18 22:33:02 Segment &{Only collect data that is needed. 1 map[]}
2020/03/18 22:33:02 Segment &{Must not be kept for longer than necessary for the purpose for which it was collected. Must be accurate, up to date and deleted when no longer required 1 map[]}
2020/03/18 22:33:02 Segment &{4 Data portability 1 map[]}
2020/03/18 22:33:02 Segment &{GDPR gives people more control of their data. They have a right to:
+ Access a copy of their data records
+ Have something deleted or corrected
+ Object to the use of their data 1 map[]}
2020/03/18 22:33:02 Segment &{Also parental consent is required for children’s data 1 map[]}
2020/03/18 22:33:02 Segment &{Breach 1 map[]}
2020/03/18 22:33:02 Segment &{If at any point data is mishandled, this may be a Personal Data Breach and should be raised with
the Data Protection Legal Team immediately. 1 map[]}
2020/03/18 22:33:02 Segment &{Under GDPR, breaches must be reported to the UK Information Commission within 72 hours 1 map[]}
2020/03/18 22:33:02 Segment &{so in that case, email dpa.officer@bbc.co.uk
Must be consulted before communicating with any external team. 1 map[]}
2020/03/18 22:33:02 Segment &{Summary 1 map[]}
2020/03/18 22:33:02 Segment &{Personal data must always be kept secure, accurate and up to date. 1 map[]}
2020/03/18 22:33:02 Segment &{The penalties for mishandling personal data are up to 20 million euros or 4% of the BBC’s total worldwide turnover. 1 map[]}
2020/03/18 22:33:02 Segment &{If you think or suspect personal data has been lost or mishandled you must report it immediately to dpa.officer@bbc.co.uk​. 1 map[]}
2020/03/18 22:33:02 Segment &{Scams 1 map[]}
2020/03/18 22:33:02 Segment &{There are several tricks designed to fool you into giving valuable information away without realising. Hit the wrong link or attachment and you could be putting the entire BBC at risk; our broadcasts, our sensitive information and our reputation. 1 map[]}
2020/03/18 22:33:02 Segment &{Phishing 1 map[]}
2020/03/18 22:33:02 Segment &{Using email to trick you into taking action (links, attachments). 1 map[]}
2020/03/18 22:33:02 Segment &{Look out for things that JDLR (Just Doesn’t Look Right). clues are: 1 map[]}
2020/03/18 22:33:02 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:33:02 Segment &{Urgency: often these will have an urgent tone to rush you 1 map[]}
2020/03/18 22:33:02 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:33:02 Segment &{Deceptive links: check the address before clicking 1 map[]}
2020/03/18 22:33:02 Segment &{Misleading sender 1 map[]}
2020/03/18 22:33:02 Segment &{Misleading sender 1 map[]}
2020/03/18 22:33:02 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:33:02 Segment &{Generic greeting: “dear customer” 1 map[]}
2020/03/18 22:33:02 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:33:02 Segment &{Poor spelling/grammar 1 map[]}
2020/03/18 22:33:02 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:33:02 Segment &{Personalisation: personal attacks with info the attacker has gleaned about you. Think about the sender 1 map[]}
2020/03/18 22:33:02 Segment &{Contact information.security@bbc.co.uk if you find anything suspicious 1 map[]}
2020/03/18 22:33:02 Segment &{Text and Phone Scams 1 map[]}
2020/03/18 22:33:02 Segment &{It’s not just emails that can be hijacked by hackers. There are other types of scams, using phones or text messages, that you need to be aware of. 1 map[]}
2020/03/18 22:33:02 Segment &{Be sceptical of phone calls, especially when they want you to visit a page. Same with texts. Contact information.security@bbc.co.uk if you are at all suspicious 1 map[]}
2020/03/18 22:33:02 Segment &{Passwords 1 map[]}
2020/03/18 22:33:02 Segment &{Don’t you just love passwords? Trouble is, we’re dependent on good password practice to keep BBC information secure. 1 map[]}
2020/03/18 22:33:02 Segment &{Is your password as good as it could be? Really? 1 map[]}
2020/03/18 22:33:02 Segment &{Do’s 1 map[]}
2020/03/18 22:33:02 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:33:02 Segment &{make them at least 8 chars long 1 map[]}
2020/03/18 22:33:02 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:33:02 Segment &{think about using a passphrase 1 map[]}
2020/03/18 22:33:02 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:33:02 Segment &{mix thinhs up, with symbols and uppercase 1 map[]}
2020/03/18 22:33:02 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:33:02 Segment &{change your password as soon as you suspect something 1 map[]}
2020/03/18 22:33:02 Segment &{Dont’s 1 map[]}
2020/03/18 22:33:02 Segment &{write them down 1 map[]}
2020/03/18 22:33:02 Segment &{write them down 1 map[]}
2020/03/18 22:33:02 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:33:02 Segment &{use sequences or repeated characters 1 map[]}
2020/03/18 22:33:02 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:33:02 Segment &{use a password that is public information (e.g. your address, DOB, name, etc) 1 map[]}
2020/03/18 22:33:02 Segment &{share the network password 1 map[]}
2020/03/18 22:33:02 Segment &{share the network password 1 map[]}
2020/03/18 22:33:02 Segment &{Email 1 map[]}
2020/03/18 22:33:02 Segment &{2 rules in the Acceptable Use Policy: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Handling Data 1 map[]}
2020/03/18 22:33:02 Segment &{Some of the data we handle needs special consideration, especially in the light of the new General Data Protection Regulations (GDPR). Examples might include:
+ editorially sensitive data
+ talent personal data
+ children’s personal data
+ audience data 1 map[]}
2020/03/18 22:33:02 Segment &{Significant reputational, financial or operational damage or personal injury may result if this type of information is wrongly disclosed. 1 map[]}
2020/03/18 22:33:02 Segment &{This is known as  1 map[]}
2020/03/18 22:33:02 Segment &{RESTRICTED 5 map[]}
2020/03/18 22:33:02 Segment &{ data and there are two simple steps you need to remember when sending or storing it:
1. Get approval from the manager accountable for the data before it’s placed in the cloud.
1. Encrypt the file before it’s uploaded. 1 map[]}
2020/03/18 22:33:02 Segment &{PUBLIC 5 map[]}
2020/03/18 22:33:02 Segment &{Information that is already publicly available or information that wouldn’t breach any confidentiality if it were disclosed. 1 map[]}
2020/03/18 22:33:02 Segment &{PROTECTED 5 map[]}
2020/03/18 22:33:02 Segment &{This is the BBC’s default classification for information (unless otherwise identified as PUBLIC or RESTRICTED information). This is typically information produced in day-to-day running of the BBC and may have a wide range of damaging consequences if wrongfully disclosed. 1 map[]}
2020/03/18 22:33:02 Segment &{For more information on types of information (data classification) and how to handle them visit Gateway. 1 map[]}
2020/03/18 22:33:02 Segment &{Offline Security 1 map[]}
2020/03/18 22:33:02 Segment &{Not all information security risks lurk in cyberspace. There are still many ways information can fall into the wrong hands without you being online. 1 map[]}
2020/03/18 22:33:02 Segment &{In public places, such as trains, coffee shops or pubs, be aware of the possibility that others are viewing your screen, reading your papers or overhearing your conversations. 1 map[]}
2020/03/18 22:33:02 Segment &{Find the potential information security hazards in the image below. Go on, you know you want to. There are five of them. Can you find them? 1 map[]}
2020/03/18 22:33:02 Segment &{Help 1 map[]}
2020/03/18 22:33:02 Segment &{Remember you’re not alone. The BBC InfoSec Team are here to help and we’re available  1 map[]}
2020/03/18 22:33:02 Segment &{24 1 map[]}
2020/03/18 22:33:02 Segment &{⁄ 1 map[]}
2020/03/18 22:33:02 Segment &{7 1 map[]}
2020/03/18 22:33:02 Segment &{, providing advice, dealing with threats and managing cyber-attacks. If you’re in any doubt at all or you just want to make sure you’re doing the right thing, drop us a quick email at information.security@bbc.co.uk 1 map[]}
2020/03/18 22:33:02 Segment &{For any personal data query, the Data Protection Team can advise you on data protection and the new General Data Protection Regulation (GDPR) - get in touch at dpa.officer@bbc.co.uk 1 map[]}
2020/03/18 22:33:02 Segment &{We’re here to work with you on your projects - talk to us right at the beginning to ensure that meeting data protection legal requirements and BBC Infosec Policies doesn’t get in the way of your project going live 1 map[]}
2020/03/18 22:33:02 Segment &{If the finish course button has not appeared you have not completed all the sections in the course, go to the Home icon and check that each section says completed. 1 map[]}
2020/03/18 22:33:02 <h1>Git cheat sheet</h1>

<ul>
<li><p>name of the current banch and nothing else (for automation)</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre></li>

<li><p>all commits that your branch have that are not yet in master</p>

<pre><code>git log master..&lt;HERE_COMES_YOUR_BRANCH_NAME&gt;
</code></pre></li>

<li><p>setting up a character used for comments</p>

<pre><code>git config core.commentchar &lt;HERE_COMES_YOUR_COMMENT_CHAR&gt;
</code></pre></li>

<li><p>fixing <code>fatal: Could not parse object</code> after unsuccessful revert</p>

<pre><code>git revert --quit
</code></pre></li>

<li><p>view diff with inline changes</p>

<pre><code>git diff --word-diff=plain master
</code></pre></li>

<li><p>view quick stat of a diff</p>

<pre><code>git diff --shortstat master
git diff --numstat master
git diff --dirstat master
</code></pre></li>

<li><p>undo last just made commit</p>

<pre><code>git reset HEAD~
</code></pre></li>

<li><p>list last 20 hashes in reverse</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse -n 20
</code></pre></li>

<li><p>list commits between dates</p>

<pre><code>git log --format=&quot;%p..%h %cd %&lt;(17)%an %s&quot; --date=format:&quot;%a %m/%d %H:%M&quot; --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
</code></pre></li>

<li><p>try a new output for diffing</p>

<pre><code>git diff --compaction-heuristic ...
         --color-words ...
</code></pre></li>

<li><p>enable more thorough comparison</p>

<pre><code>git config --global diff.algorithm patience
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the latest</p>

<pre><code>git checkout HEAD~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit relative to the given commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt;~&lt;NUMBER&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>restoring a file from a certain commit</p>

<pre><code>git checkout &lt;COMMIT_HASH&gt; -- &lt;RELATIVE_PATH_TO_FILE&gt;
</code></pre></li>

<li><p>creating a diff file from unstaged changes for a <strong>specific folder</strong></p>

<pre><code>git diff -- &lt;RELATIVE_PATH_TO_FOLDER&gt; changes.diff
</code></pre></li>

<li><p>applying a diff file</p>

<ul>
<li>go to the root directory of your repository</li>
<li>run:
<code>
git apply changes.diff
</code></li>
</ul></li>

<li><p>show differences between last commit and currrent changes:</p>

<pre><code>git difftool -d
</code></pre></li>

<li><p>referring to:</p>

<ul>
<li>last commits <code>... HEAD~1 ...</code></li>
<li>last 3 commits <code>... HEAD~3 ...</code></li>
</ul></li>

<li><p>show the history of changes of a file</p>

<pre><code>git log -p -- ./Scripts/Libs/select2.js
</code></pre></li>

<li><p>ignoring whitespaces</p>

<pre><code>git rebase --ignore-whitespace &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>pulling for fast-forward only (eliminating a chance for unintended merging)</p>

<pre><code>git pull --ff-only
</code></pre></li>

<li><p>list of all tags</p>

<pre><code>git fetch
git tag -l
</code></pre></li>

<li><p>archive a branch using tags</p>

<pre><code>git tag &lt;TAG_NAME&gt; &lt;BRANCH_NAME&gt;
git push origin --tags
</code></pre>
<p>you can delete your branch now</p></li>

<li><p>get a tagged branch</p>

<pre><code>git checkout -b &lt;BRANCH_NAME&gt; &lt;TAG_NAME&gt;
</code></pre></li>

<li><p>list of all branches that haven&rsquo;t been merged to master</p>

<pre><code>git branch --no-merge master
</code></pre></li>

<li><p>enable more elaborate diff algorithm by default</p>

<pre><code>git config --global diff.algorithm histogram
</code></pre></li>

<li><p>list of all developers</p>

<pre><code>git shortlog -s -n -e
</code></pre></li>

<li><p>display graph of branches</p>

<pre><code>git log --decorate --graph --all --date=relative
</code></pre>
<p>or</p>

<pre><code>git log --decorate --graph --all --oneline 
</code></pre></li>

<li><p>remembering the password</p>

<pre><code>git config --global credential.helper store
git fetch
</code></pre>
<p>the first command tells git to remember the credentials that you are going to provide for the second command</p></li>

<li><p>path to the global config</p>

<pre><code>C:\Users\Bykov\.gitconfig
</code></pre>
<ul>
<li>example of a global config<br />
&rdquo;`</li>
</ul></li>
</ul>

<p>[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;
       path = \&ldquo;C:/Program Files/Perforce\&rdquo;
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool &ldquo;p4merge&rdquo;]
       cmd = p4merge.exe \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool &ldquo;meld&rdquo;]
       cmd = \&ldquo;C:/Program Files (x86)/Meld/Meld.exe\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;
       path = C:/Program Files (x86)/Meld/Meld.exe</p>

<pre><code>
- viewing differences between current and other branch  
</code></pre>

<p>git difftool -d BRANCH_NAME</p>

<pre><code>
- viewing differences between current and stash  
   ``` 
   git difftool -d stash
</code></pre>

<ul>
<li><p>viewing differences between several commits in a diff tool</p>

<pre><code>git difftool -d HEAD@{2}...HEAD@{0}
</code></pre></li>

<li><p>view all global settings</p>

<pre><code>git config --global -l
</code></pre></li>

<li><p>delete tag</p>

<pre><code>git tag -d my-tag
git push origin :refs/tags/my-tag
</code></pre></li>

<li><p>pushing tags</p>

<pre><code>git push --tags
</code></pre></li>

<li><p>checking the history of a file or a folder</p>

<pre><code>git log -- &lt;FILE_OR_FOLDER&gt;
</code></pre></li>

<li><p>disabling the scroller</p>

<pre><code>git --no-pager &lt;...&gt;
</code></pre></li>

<li><p>who pushed last which branch</p>

<pre><code>git for-each-ref --format=&quot;%(committerdate) %09 %(refname) %09 %(authorname)&quot;
</code></pre></li>

<li><p>deleting remote branch</p>

<pre><code>git push origin :&lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>deleting remote branch localy</p>

<pre><code>git branch -r -D &lt;BRANCH_NAME&gt;
</code></pre>
<p>or to sync with the remote</p>

<pre><code>git fetch --all --prune
</code></pre></li>

<li><p>deleting local branch</p>

<pre><code>git branch -d &lt;BRANCH_NAME&gt;
</code></pre></li>

<li><p>list <strong>actual</strong> remote branchs</p>

<pre><code>git ls-remote --heads origin
</code></pre></li>

<li><p>list all remote (fetched) branches</p>

<pre><code>git branch -r
</code></pre></li>

<li><p>list all local branches</p>

<pre><code>git branch -l
</code></pre></li>

<li><p>find to which branch a given commit belongs</p>

<pre><code>git branch --contains &lt;COMMIT&gt;
</code></pre></li>

<li><p>updating from a forked repository</p>

<pre><code>git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
</code></pre></li>
</ul>
2020/03/18 22:33:02 Segment &{Git cheat sheet 1 map[]}
2020/03/18 22:33:02 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git rev-parse --abbrev-ref HEAD
 9 map[]}
2020/03/18 22:33:02 Segment &{name of the current banch and nothing else (for automation) 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log master..<HERE_COMES_YOUR_BRANCH_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{all commits that your branch have that are not yet in master 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git config core.commentchar <HERE_COMES_YOUR_COMMENT_CHAR>
 9 map[]}
2020/03/18 22:33:02 Segment &{setting up a character used for comments 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{fixing  1 map[]}
2020/03/18 22:33:02 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:33:02 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git revert --quit
 9 map[]}
2020/03/18 22:33:02 Segment &{fixing  1 map[]}
2020/03/18 22:33:02 Segment &{fatal: Could not parse object 9 map[]}
2020/03/18 22:33:02 Segment &{ after unsuccessful revert 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git diff --word-diff=plain master
 9 map[]}
2020/03/18 22:33:02 Segment &{view diff with inline changes 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git diff --shortstat master
git diff --numstat master
git diff --dirstat master
 9 map[]}
2020/03/18 22:33:02 Segment &{view quick stat of a diff 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git reset HEAD~
 9 map[]}
2020/03/18 22:33:02 Segment &{undo last just made commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse -n 20
 9 map[]}
2020/03/18 22:33:02 Segment &{list last 20 hashes in reverse 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list commits between dates 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log --format="%p..%h %cd %<(17)%an %s" --date=format:"%a %m/%d %H:%M" --reverse --after=2016-11-09T00:00:00-05:00 --before=2016-11-10T00:00:00-05:00
 9 map[]}
2020/03/18 22:33:02 Segment &{list commits between dates 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git diff --compaction-heuristic ...
         --color-words ...
 9 map[]}
2020/03/18 22:33:02 Segment &{try a new output for diffing 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git config --global diff.algorithm patience
 9 map[]}
2020/03/18 22:33:02 Segment &{enable more thorough comparison 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git checkout HEAD~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit relative to the latest 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git checkout <COMMIT_HASH>~<NUMBER> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit relative to the given commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git checkout <COMMIT_HASH> -- <RELATIVE_PATH_TO_FILE>
 9 map[]}
2020/03/18 22:33:02 Segment &{restoring a file from a certain commit 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:33:02 Segment &{specific folder 5 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git diff -- <RELATIVE_PATH_TO_FOLDER> changes.diff
 9 map[]}
2020/03/18 22:33:02 Segment &{creating a diff file from unstaged changes for a  1 map[]}
2020/03/18 22:33:02 Segment &{specific folder 5 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{applying a diff file 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{run:
 1 map[]}
2020/03/18 22:33:02 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{applying a diff file 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:33:02 Segment &{go to the root directory of your repository 1 map[]}
2020/03/18 22:33:02 Segment &{run:
 1 map[]}
2020/03/18 22:33:02 Segment &{
git apply changes.diff
 9 map[]}
2020/03/18 22:33:02 Segment &{run:
 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git difftool -d
 9 map[]}
2020/03/18 22:33:02 Segment &{show differences between last commit and currrent changes: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{referring to: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{last commits  1 map[]}
2020/03/18 22:33:02 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{last 3 commits  1 map[]}
2020/03/18 22:33:02 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{referring to: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{last commits  1 map[]}
2020/03/18 22:33:02 Segment &{... HEAD~1 ... 9 map[]}
2020/03/18 22:33:02 Segment &{last commits  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{last 3 commits  1 map[]}
2020/03/18 22:33:02 Segment &{... HEAD~3 ... 9 map[]}
2020/03/18 22:33:02 Segment &{last 3 commits  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log -p -- ./Scripts/Libs/select2.js
 9 map[]}
2020/03/18 22:33:02 Segment &{show the history of changes of a file 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git rebase --ignore-whitespace <BRANCH_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{ignoring whitespaces 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git pull --ff-only
 9 map[]}
2020/03/18 22:33:02 Segment &{pulling for fast-forward only (eliminating a chance for unintended merging) 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list of all tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git fetch
git tag -l
 9 map[]}
2020/03/18 22:33:02 Segment &{list of all tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git tag <TAG_NAME> <BRANCH_NAME>
git push origin --tags
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:33:02 Segment &{archive a branch using tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{you can delete your branch now 1 map[]}
2020/03/18 22:33:02 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git checkout -b <BRANCH_NAME> <TAG_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{get a tagged branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch --no-merge master
 9 map[]}
2020/03/18 22:33:02 Segment &{list of all branches that haven’t been merged to master 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git config --global diff.algorithm histogram
 9 map[]}
2020/03/18 22:33:02 Segment &{enable more elaborate diff algorithm by default 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list of all developers 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git shortlog -s -n -e
 9 map[]}
2020/03/18 22:33:02 Segment &{list of all developers 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{display graph of branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log --decorate --graph --all --date=relative
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{or 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log --decorate --graph --all --oneline 
 9 map[]}
2020/03/18 22:33:02 Segment &{display graph of branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{or 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{remembering the password 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git config --global credential.helper store
git fetch
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:33:02 Segment &{remembering the password 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{the first command tells git to remember the credentials that you are going to provide for the second command 1 map[]}
2020/03/18 22:33:02 Segment &{path to the global config 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{C:\Users\Bykov\.gitconfig
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{example of a global config 1 map[]}
2020/03/18 22:33:02 Segment &{
”` 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{path to the global config 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{example of a global config 1 map[]}
2020/03/18 22:33:02 Segment &{
”` 1 map[]}
2020/03/18 22:33:02 Segment &{example of a global config 1 map[]}
2020/03/18 22:33:02 Whaaat? br
2020/03/18 22:33:02 Segment &{
”` 1 map[]}
2020/03/18 22:33:02 Segment &{[user]
       email = *****
       name = Aleksey Bykov
       password = *****
   [merge]
       tool = p4merge
   [mergetool “p4merge”]
       cmd = p4merge.exe \“$BASE\” \“$LOCAL\” \“$REMOTE\” \“$MERGED\”
       path = \“C:/Program Files/Perforce\”
       trustExitCode = false
   [push]
       default = simple
   [diff]
       tool = meld
       compactionHeuristic = true
   [difftool “p4merge”]
       cmd = p4merge.exe \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files/Perforce/p4merge.exe
   [difftool “meld”]
       cmd = \“C:/Program Files (x86)/Meld/Meld.exe\” \“$LOCAL\” \“$REMOTE\”
       path = C:/Program Files (x86)/Meld/Meld.exe 1 map[]}
2020/03/18 22:33:02 Segment &{git difftool -d BRANCH_NAME 1 map[]}
2020/03/18 22:33:02 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git difftool -d HEAD@{2}...HEAD@{0}
 9 map[]}
2020/03/18 22:33:02 Segment &{viewing differences between several commits in a diff tool 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{view all global settings 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git config --global -l
 9 map[]}
2020/03/18 22:33:02 Segment &{view all global settings 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{delete tag 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git tag -d my-tag
git push origin :refs/tags/my-tag
 9 map[]}
2020/03/18 22:33:02 Segment &{delete tag 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{pushing tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git push --tags
 9 map[]}
2020/03/18 22:33:02 Segment &{pushing tags 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git log -- <FILE_OR_FOLDER>
 9 map[]}
2020/03/18 22:33:02 Segment &{checking the history of a file or a folder 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git --no-pager <...>
 9 map[]}
2020/03/18 22:33:02 Segment &{disabling the scroller 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git for-each-ref --format="%(committerdate) %09 %(refname) %09 %(authorname)"
 9 map[]}
2020/03/18 22:33:02 Segment &{who pushed last which branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git push origin :<BRANCH_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{deleting remote branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch -r -D <BRANCH_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git fetch --all --prune
 9 map[]}
2020/03/18 22:33:02 Segment &{deleting remote branch localy 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{or to sync with the remote 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{deleting local branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch -d <BRANCH_NAME>
 9 map[]}
2020/03/18 22:33:02 Segment &{deleting local branch 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list  1 map[]}
2020/03/18 22:33:02 Segment &{actual 5 map[]}
2020/03/18 22:33:02 Segment &{ remote branchs 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git ls-remote --heads origin
 9 map[]}
2020/03/18 22:33:02 Segment &{list  1 map[]}
2020/03/18 22:33:02 Segment &{actual 5 map[]}
2020/03/18 22:33:02 Segment &{ remote branchs 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch -r
 9 map[]}
2020/03/18 22:33:02 Segment &{list all remote (fetched) branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{list all local branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch -l
 9 map[]}
2020/03/18 22:33:02 Segment &{list all local branches 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git branch --contains <COMMIT>
 9 map[]}
2020/03/18 22:33:02 Segment &{find to which branch a given commit belongs 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{git remote add upstream https://github.com/Microsoft/TypeScript.git
git fetch upstream
git rebase upstream/master
 9 map[]}
2020/03/18 22:33:02 Segment &{updating from a forked repository 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 <h1>git</h1>

<p>get the remote repository url:</p>

<pre><code class="language-sh">git config --get remote.origin.url
</code></pre>

<p>shows the logical variables</p>

<pre><code class="language-sh">git config -l
</code></pre>

<p>show the logical variables, including variables in the .git/config file</p>

<pre><code class="language-sh">git var -l
</code></pre>

<h2>diff</h2>

<pre><code class="language-sh">git diff [opts] &lt;branch&gt;
git diff [opts] &lt;branch_1&gt; &lt;branch_2&gt;
git diff [opts] &lt;commit_hash&gt;
git diff [opts] &lt;commit_hash_1&gt; &lt;commit_hash_2&gt;
</code></pre>

<h3>options</h3>

<h4>stat ( <code>--stat</code> )</h4>

<p>Get a summary of the changes</p>

<pre><code class="language-sh">git diff --stat master
</code></pre>

<h2>clone</h2>

<pre><code class="language-sh">git clone &lt;repo&gt;
git clone &lt;repo&gt; &lt;directory&gt;
git clone -b &lt;branch&gt; &lt;repo&gt; &lt;directory&gt;
</code></pre>

<h2>push</h2>

<pre><code class="language-sh">


</code></pre>

<h2>branch</h2>

<p>list §branches:</p>

<pre><code class="language-sh">$ git branch [-r | -a]
-r = remote
-a = all
</code></pre>

<p>checkout and create new branch:</p>

<pre><code class="language-sh">$ git checkout -b &lt;branch_name&gt;
</code></pre>

<p>prune local branch list:</p>

<pre><code class="language-sh">$ git remote update origin --prune
</code></pre>

<p>fetch remote branches:</p>

<pre><code class="language-sh">$ git fetch origin
</code></pre>

<h2>remote</h2>

<pre><code class="language-sh">git remote [-v | --verbose]
git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;
git remote rename &lt;old&gt; &lt;new&gt;
git remote remove &lt;name&gt;
git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​
git remote get-url [--push] [--all] &lt;name&gt;
git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;
git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;
git remote [-v | --verbose] show [-n] &lt;name&gt;…​
git remote prune [-n | --dry-run] &lt;name&gt;…​
git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]
</code></pre>

<h2>config</h2>

<p>file located at <code>~/.gitconfig</code>.</p>

<pre><code class="language-sh">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
git config [&lt;file-option&gt;] [type] --add name value
git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
git config [&lt;file-option&gt;] --unset name [value_regex]
git config [&lt;file-option&gt;] --unset-all name [value_regex]
git config [&lt;file-option&gt;] --rename-section old_name new_name
git config [&lt;file-option&gt;] --remove-section name
git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
git config [&lt;file-option&gt;] --get-color name [default]
git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
git config [&lt;file-option&gt;] -e | --edit
</code></pre>

<h3>link</h3>

<p><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></p>

<h2>reith</h2>

<h3>setup</h3>

<ul>
<li>Add the following in <code>~/.ssh/config</code> locally to operate through the proxies
<code>
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
</code></li>
<li>Add the identify in the ~/.gitconfig
<code>
git config --global user.name &quot;yourname&quot;
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
</code></li>
<li>and some more
<code>
git config --global merge.tool vimdiff
see it
git config -l
</code></li>
</ul>

<p>check the ssh connection:</p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p>http.proxy config variable:<br />
- ?&hellip;? means optional
- &lt;&hellip;&gt; means variable</p>

<p>view it:</p>

<pre><code class="language-sh">$ git config ?--[get | get-all]? http.proxy
&gt; http.proxy=http://www-cache.reith.bbc.co.uk:80
</code></pre>

<p>set it:</p>

<pre><code class="language-sh">$ git config --global http.proxy &lt;value&gt;
</code></pre>

<p>unset it:</p>

<pre><code class="language-sh">$ git config --global --[unset | unset-all] http.proxy ?&lt;value-regex&gt;?
</code></pre>

<p>add it:</p>

<pre><code class="language-sh">$ git config --global --add http.proxy http://www-cache.reith.bbc.co.uk:80
</code></pre>

<h2>alias</h2>

<p>make an alias:</p>

<pre><code class="language-sh">git config --global alias.&lt;name&lt; &quot;&lt;command&gt;, e.g. fetch origin master&quot;
</code></pre>

<h2>grep</h2>

<p>command line search for text in git project:</p>

<pre><code class="language-sh">git grep &quot;string&quot;

// searching specific files only
git grep &quot;search string&quot; -- '*.scala'

// case insensitive
git grep -i &quot;case insensitive search string&quot;
</code></pre>

<h2>stash</h2>

<p><strong>add and pop</strong>:</p>

<pre><code class="language-sh"># stash current changes
git stash
# saving the stash name
git stash save 'the stash name'

# apply and remove the stash
git stash pop
</code></pre>

<p><strong>list</strong>:</p>

<pre><code class="language-sh">git stash list
</code></pre>

<p><strong>delete</strong>:</p>

<pre><code class="language-sh"># drop the head
git stash drop 

# drop a specified stash
git stash drop stash@{X}
</code></pre>

<p><strong>view</strong>:</p>

<pre><code class="language-sh"># for the head of the stash
# see change summary
git stash show
# see diff
git stash show -p

# for a specified stash
git stash show [OPTS] stash@{X}
</code></pre>

<h2>github</h2>

<p>find file: Cmd + t</p>
2020/03/18 22:33:02 Segment &{git 1 map[]}
2020/03/18 22:33:02 Segment &{get the remote repository url: 1 map[]}
2020/03/18 22:33:02 Segment &{shows the logical variables 1 map[]}
2020/03/18 22:33:02 Segment &{show the logical variables, including variables in the .git/config file 1 map[]}
2020/03/18 22:33:02 Segment &{diff 1 map[]}
2020/03/18 22:33:02 Segment &{options 1 map[]}
2020/03/18 22:33:02 Segment &{stat (  1 map[]}
2020/03/18 22:33:02 Segment &{--stat 9 map[]}
2020/03/18 22:33:02 Segment &{ ) 1 map[]}
2020/03/18 22:33:02 Segment &{Get a summary of the changes 1 map[]}
2020/03/18 22:33:02 Segment &{clone 1 map[]}
2020/03/18 22:33:02 Segment &{push 1 map[]}
2020/03/18 22:33:02 Segment &{branch 1 map[]}
2020/03/18 22:33:02 Segment &{list §branches: 1 map[]}
2020/03/18 22:33:02 Segment &{checkout and create new branch: 1 map[]}
2020/03/18 22:33:02 Segment &{prune local branch list: 1 map[]}
2020/03/18 22:33:02 Segment &{fetch remote branches: 1 map[]}
2020/03/18 22:33:02 Segment &{remote 1 map[]}
2020/03/18 22:33:02 Segment &{config 1 map[]}
2020/03/18 22:33:02 Segment &{file located at  1 map[]}
2020/03/18 22:33:02 Segment &{~/.gitconfig 9 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{link 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://git-scm.com/docs/git-config}]. raw = 'https://git-scm.com/docs/git-config'
2020/03/18 22:33:02 Segment &{https://git-scm.com/docs/git-config 17 map[href:https://git-scm.com/docs/git-config]}
2020/03/18 22:33:02 Segment &{reith 1 map[]}
2020/03/18 22:33:02 Segment &{setup 1 map[]}
2020/03/18 22:33:02 Segment &{Add the following in  1 map[]}
2020/03/18 22:33:02 Segment &{~/.ssh/config 9 map[]}
2020/03/18 22:33:02 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:33:02 Segment &{
Host github.com
ProxyCommand nc -x socks-gw.reith.bbc.co.uk:1085 %h %p
 9 map[]}
2020/03/18 22:33:02 Segment &{Add the following in  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ locally to operate through the proxies
 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:33:02 Segment &{
git config --global user.name "yourname"
git config --global user.email youremail@bbc
git config --global url.https://github.com/.insteadOf git://github.com/
 9 map[]}
2020/03/18 22:33:02 Segment &{Add the identify in the ~/.gitconfig
 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{and some more
 1 map[]}
2020/03/18 22:33:02 Segment &{
git config --global merge.tool vimdiff
see it
git config -l
 9 map[]}
2020/03/18 22:33:02 Segment &{and some more
 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{check the ssh connection: 1 map[]}
2020/03/18 22:33:02 Segment &{http.proxy config variable: 1 map[]}
2020/03/18 22:33:02 Segment &{
- ?…? means optional
- <…> means variable 1 map[]}
2020/03/18 22:33:02 Segment &{view it: 1 map[]}
2020/03/18 22:33:02 Segment &{set it: 1 map[]}
2020/03/18 22:33:02 Segment &{unset it: 1 map[]}
2020/03/18 22:33:02 Segment &{add it: 1 map[]}
2020/03/18 22:33:02 Segment &{alias 1 map[]}
2020/03/18 22:33:02 Segment &{make an alias: 1 map[]}
2020/03/18 22:33:02 Segment &{grep 1 map[]}
2020/03/18 22:33:02 Segment &{command line search for text in git project: 1 map[]}
2020/03/18 22:33:02 Segment &{stash 1 map[]}
2020/03/18 22:33:02 Segment &{add and pop 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{list 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{delete 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{view 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{github 1 map[]}
2020/03/18 22:33:02 Segment &{find file: Cmd + t 1 map[]}
2020/03/18 22:33:02 <h1>hungarian notation</h1>

<p><a href="https://en.wikipedia.org/wiki/Hungarian_notation">wikipedia</a></p>

<h1>lint</h1>

<p><a href="https://en.wikipedia.org/wiki/Lint_(software">wikipedia</a>)</p>
2020/03/18 22:33:02 Segment &{hungarian notation 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Hungarian_notation}]. raw = 'wikipedia'
2020/03/18 22:33:02 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Hungarian_notation]}
2020/03/18 22:33:02 Segment &{lint 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lint_(software}]. raw = 'wikipedia'
2020/03/18 22:33:02 Segment &{wikipedia 17 map[href:https://en.wikipedia.org/wiki/Lint_(software]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 <h1>gnuplot</h1>

<p><a href="http://gnuplot.info/">http://gnuplot.info/</a></p>

<p>## install</p>

<pre><code class="language-sh">brew install gnuplot
</code></pre>

<h2>usage</h2>

<p>e.g.</p>

<pre><code class="language-sh">gnuplot -e &quot;set terminal svg; set datafile separator comma; set style data lines; set xlabel '% requests'; set ylabel 'response time (ms)'; set title '/$ENDPOINT n$NUMBER c$CONCURRENCY'; plot '$CSV_DIR/$RUNNAME.csv'&quot; &gt; $GRAPH_DIR/$RUNNAME.svg
</code></pre>
2020/03/18 22:33:02 Segment &{gnuplot 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://gnuplot.info/}]. raw = 'http://gnuplot.info/'
2020/03/18 22:33:02 Segment &{http://gnuplot.info/ 17 map[href:http://gnuplot.info/]}
2020/03/18 22:33:02 Segment &{## install 1 map[]}
2020/03/18 22:33:02 Segment &{usage 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 <h1>grep</h1>

<h2>options</h2>

<p><strong>invert match</strong></p>

<pre><code class="language-sh">-v, --invert-match
</code></pre>

<p><strong>context</strong></p>

<pre><code class="language-sh">-C[num, --context=num]
</code></pre>
2020/03/18 22:33:02 Segment &{grep 1 map[]}
2020/03/18 22:33:02 Segment &{options 1 map[]}
2020/03/18 22:33:02 Segment &{invert match 5 map[]}
2020/03/18 22:33:02 Segment &{context 5 map[]}
2020/03/18 22:33:02 <h1>Grunt</h1>

<h2>Gruntfile</h2>

<p>Template <code>Gruntfile</code> with <code>eslint</code> and <code>jasmine</code> and <code>babel</code> for es-6 projects</p>

<p><strong>dev-dependencies</strong>:</p>

<pre><code class="language-json">dev-dependencies: {
  &quot;babel-eslint&quot;: &quot;^6.1.2&quot;,
  &quot;babel-register&quot;: &quot;^6.9.0&quot;,
  &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,
  &quot;eslint&quot;: &quot;^3.0.0&quot;,
  &quot;grunt&quot;: &quot;^1.0.1&quot;,
  &quot;grunt-contrib-jasmine&quot;: &quot;^1.1.0&quot;,
  &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,
  &quot;grunt-eslint&quot;: &quot;^18.1.0&quot;,
  &quot;grunt-template-jasmine-requirejs&quot;: &quot;&quot;
}
</code></pre>

<p>or</p>

<pre><code class="language-sh">npm install --save-dev babel-eslint babel-register babel-preset-env eslint grunt grunt-babel grunt-eslint grunt-contrib-jasmine grunt-template-jasmine-requirejs
</code></pre>

<p>and in the Gruntfile:</p>

<pre><code class="language-js">module.exports = function(grunt) {
    'use strict';
    grunt.loadNpmTasks('grunt-babel');
    grunt.loadNpmTasks('grunt-eslint');
    grunt.loadNpmTasks('grunt-contrib-jasmine');
    grunt.initConfig({
        eslint: {
            target: [
                './src/**/*.js*',
                './test/unit/**/*.js',
                './Gruntfile.js'
            ]
        },
        babel: {
            options: {
                sourceMap: true,
                presets: ['env']
            },
            dist: {
                files: [{
                    dest: './lib/src',
                    src: '**/*.js*',
                    expand: true,
                    cwd: './src/',
                    ext: '.js'
                }]
            },
            test: {
                files: [{
                    dest: &quot;./lib/test/unit&quot;,
                    src: &quot;**/*.js&quot;,
                    expand: true,
                    cwd: './test/unit/',
                    ext: &quot;.js&quot;
                }]
            }
        },
        jasmine: {
            test: {
                src: 'src/**/*.js',
                options: {
                    specs: 'lib/test/unit/*spec.js',
                    helpers: 'lib/test/helpers/*.js',
                    template: require('grunt-template-jasmine-requirejs')
                }
            }
        }
    });
    grunt.registerTask('build', [
        'babel:dist'
    ]);
    grunt.registerTask('test', [
        'babel:dist',
        'babel:test',
        'jasmine',
        'eslint'
    ]);
};
</code></pre>
2020/03/18 22:33:02 Segment &{Grunt 1 map[]}
2020/03/18 22:33:02 Segment &{Gruntfile 1 map[]}
2020/03/18 22:33:02 Segment &{Template  1 map[]}
2020/03/18 22:33:02 Segment &{Gruntfile 9 map[]}
2020/03/18 22:33:02 Segment &{ with  1 map[]}
2020/03/18 22:33:02 Segment &{eslint 9 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{jasmine 9 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{babel 9 map[]}
2020/03/18 22:33:02 Segment &{ for es-6 projects 1 map[]}
2020/03/18 22:33:02 Segment &{dev-dependencies 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{or 1 map[]}
2020/03/18 22:33:02 Segment &{and in the Gruntfile: 1 map[]}
2020/03/18 22:33:02 <h1>install mongo script</h1>

<pre><code class="language-ss">#!/bin/bash

clear
echo &quot;Going to install MongoDB for y'all...&quot;

sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo

echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo

sudo yum install -y mongodb-org

echo &quot;MongoDB is installed. You're welcome!&quot;

</code></pre>
2020/03/18 22:33:02 Segment &{install mongo script 1 map[]}
2020/03/18 22:33:02 <h1>iPlayer radio automation</h1>

<p><a href="https://github.com/bbc/music-automation-api">https://github.com/bbc/music-automation-api</a></p>

<p>from Anthony:</p>

<blockquote>
<p>Anthony Kalu [2:52 PM]<br />
<a href="https://github.com/bbc-frameworks/frameworks-capybara">https://github.com/bbc-frameworks/frameworks-capybara</a><br />
GitHub bbc-frameworks/frameworks-capybara<br />
frameworks-capybara - gem to aid setup of Capybara for testing bbc sites</p>

<p><a href="https://github.com/bbc/playspace/tree/master/cucumber">https://github.com/bbc/playspace/tree/master/cucumber</a></p>

<p><a href="https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb">https://github.com/bbc/playspace/blob/master/cucumber/features/support/world.rb</a></p>

<p>yhh this is a good example<br />
if you need me to run through it.. just give me a shout<br />
but its pretty straight forward</p>
</blockquote>
2020/03/18 22:33:02 Segment &{iPlayer radio automation 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/bbc/music-automation-api}]. raw = 'https://github.com/bbc/music-automation-api'
2020/03/18 22:33:02 Segment &{https://github.com/bbc/music-automation-api 17 map[href:https://github.com/bbc/music-automation-api]}
2020/03/18 22:33:02 Segment &{from Anthony: 1 map[]}
2020/03/18 22:33:02 <h1>Jasmine</h1>

<p>js testing framework</p>

<p><a href="https://jasmine.github.io/2.0/introduction.html">https://jasmine.github.io/2.0/introduction.html</a></p>

<h2>expectations</h2>

<p>Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value</p>

<pre><code class="language-js">expect(value).toBe(expected);
</code></pre>

<p>or chain with a <code>.not</code> to assert in the negative</p>

<pre><code class="language-js">expect(value).not.toBe(expected);
</code></pre>

<h3>matchers</h3>

<pre><code class="language-js">
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toMatch(/regex/);
expect(value).toBeDefined();
expect(value).toBeUndefined();
expect(value).toBeNull();
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toContain(substring);
expect(value).toBeLessThan(number);
expect(value).toBeGreaterThan(number);
expect(value).toBeCloseTo(number, precision);


expect(value).toThrow();
expect(value).toThrow('what');

expect(value).toThrowError(&quot;foo bar baz&quot;);
expect(value).toThrowError(/bar/);
expect(value).toThrowError(TypeError);
expect(value).toThrowError(TypeError, &quot;foo bar baz&quot;);

</code></pre>
2020/03/18 22:33:02 Segment &{Jasmine 1 map[]}
2020/03/18 22:33:02 Segment &{js testing framework 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://jasmine.github.io/2.0/introduction.html}]. raw = 'https://jasmine.github.io/2.0/introduction.html'
2020/03/18 22:33:02 Segment &{https://jasmine.github.io/2.0/introduction.html 17 map[href:https://jasmine.github.io/2.0/introduction.html]}
2020/03/18 22:33:02 Segment &{expectations 1 map[]}
2020/03/18 22:33:02 Segment &{Expectations are built with the function expect which takes a value, called the actual. It is chained with a Matcher function, which takes the expected value 1 map[]}
2020/03/18 22:33:02 Segment &{or chain with a  1 map[]}
2020/03/18 22:33:02 Segment &{.not 9 map[]}
2020/03/18 22:33:02 Segment &{ to assert in the negative 1 map[]}
2020/03/18 22:33:02 Segment &{matchers 1 map[]}
2020/03/18 22:33:02 <h1>libexec</h1>

<p><a href="https://sny.no/2017/05/libexec">https://sny.no/2017/05/libexec</a></p>
2020/03/18 22:33:02 Segment &{libexec 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://sny.no/2017/05/libexec}]. raw = 'https://sny.no/2017/05/libexec'
2020/03/18 22:33:02 Segment &{https://sny.no/2017/05/libexec 17 map[href:https://sny.no/2017/05/libexec]}
2020/03/18 22:33:02 <h1>lsof</h1>

<p><a href="https://en.wikipedia.org/wiki/Lsof">https://en.wikipedia.org/wiki/Lsof</a></p>

<p>LiSt Open Files</p>

<pre><code class="language-sh">lsof
</code></pre>

<h2>check ports</h2>

<pre><code class="language-sh">lsof -i :&lt;port&gt;

# e.g.
lsof -i :80
</code></pre>

<p><a href="https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/">https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/</a></p>
2020/03/18 22:33:02 Segment &{lsof 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://en.wikipedia.org/wiki/Lsof}]. raw = 'https://en.wikipedia.org/wiki/Lsof'
2020/03/18 22:33:02 Segment &{https://en.wikipedia.org/wiki/Lsof 17 map[href:https://en.wikipedia.org/wiki/Lsof]}
2020/03/18 22:33:02 Segment &{LiSt Open Files 1 map[]}
2020/03/18 22:33:02 Segment &{check ports 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/}]. raw = 'https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/'
2020/03/18 22:33:02 Segment &{https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/ 17 map[href:https://www.tecmint.com/find-out-which-process-listening-on-a-particular-port/]}
2020/03/18 22:33:02 <h1>markdown</h1>

<h2>lists</h2>

<p><strong>bulleted</strong>
- one
- two
   - two.one</p>

<pre><code>- one
- two
  - two.one
</code></pre>

<p><strong>numbered</strong>
1. number 1
2. number 2</p>

<pre><code>1. number 1
2. number 2
</code></pre>

<p><strong>checkbox</strong>
- [ ] unchecked box
- [x] checked box</p>

<pre><code>- [ ] unchecked box
- [x] checked box
</code></pre>

<pre><code>this is an unspecified code block
</code></pre>

<ol>
<li>this is a list</li>
<li>this is another list item</li>
</ol>

<ul>
<li>[ ] this is a checkbox</li>
<li>[x] this is a checked checkbox</li>
</ul>

<h2>code</h2>

<pre><code class="language-javascript">this is some code in javascript
def something = &quot;how is the weather today?&quot;, skdjfk lsdf ks lsdfj
println (something)
</code></pre>

<pre><code class="language-scala">def this = &quot;hello there&quot;
def another = &quot;&quot;&quot;helllooo there&quot;&quot;&quot;
def &quot;&quot;&quot; this is a string &quot; &quot;&quot;&quot; and s&quot;&quot;&quot; this is $another &quot;&quot;&quot;
println(this + another + s&quot;$this $another&quot; + &quot;\&quot; more strings&quot;) and then some
this is some scala
</code></pre>

<p>this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language</p>

<h2>quote [&ldquo;quotes?&rdquo;;quote blocks]</h2>

<blockquote>
<p>this is a quote<br />
this is a new line
but this should continue on the same line!</p>
</blockquote>

<pre><code>&gt; this is a quote  
this is a new line
but this should continue on the same line!  
</code></pre>

<blockquote>
<p>this is a separate code block
continuing on the next line</p>
</blockquote>

<pre><code>&gt;this is a separate code block
&gt;continuing on the next line
</code></pre>

<h2>links</h2>

<p>this is a link: www.google.com</p>

<p>I can also label a link like so: <a href="https://github.com">github</a></p>

<p>Or I could reference them like this <a href="www.facebook.com">facebook</a> or i can say <a href="www.facebook.com">go to facebook</a> so long as I provide the reference below somehwere</p>

<pre><code>this is a link: www.google.com

I can also label a link like so:
 [github](https://github.com)

Or I could reference them like this [facebook] or i can say [go to facebook][facebook] so long as I provide the reference below somehwere

[facebook]: www.facebook.com
</code></pre>

<h2>headers [&ldquo;headers?&rdquo;]</h2>

<p>// # header 1
    # header 1
blah blah</p>

<p>//## header 2
    ## header 2
header 2 blah</p>

<h3>header 3</h3>

<pre><code>### header 3
</code></pre>

<p>blah blah</p>

<h4>header 4</h4>

<pre><code>#### header 4
</code></pre>

<p>blah blah</p>

<h5>header 5</h5>

<pre><code>##### header 5
</code></pre>

<p>blah blah</p>

<p>Alternatively:</p>

<h1>blah</h1>

<pre><code>blah
===
</code></pre>

<h2>blah blah</h2>

<pre><code>blah blah
------
</code></pre>

<h2>code</h2>

<h2>unmarked</h2>

<pre><code>```
this is an unmarked code block
```
</code></pre>

<pre><code>this is an unmarked code block
</code></pre>

<p>with ~ these
    ~~~
    code with squiggles
    ~~~</p>

<pre><code>code with squiggles
</code></pre>

<p>### scala</p>

<pre><code class="language-scala">  def someThing(int: Int) = {
    println(&quot;This is a string&quot;)
    &quot;hello&quot; match {
      case &quot;hello&quot; =&gt; println(&quot;that makes sense&quot;)
      case _ =&gt; println(&quot;the laws of computing just broke&quot;)
    }
  }
</code></pre>

<p>### java</p>

<pre><code class="language-java">  public static void main (String[] args){
    System.out.println(&quot;This is a string!&quot;)
  }

  public String doSomethingWithSomethingElse(String something, String somethingElse) {
    return something + somethingElse
  }
</code></pre>

<h2>inline formatting</h2>

<p>you can make string <strong>bold</strong> like that or <strong>like this</strong> if you like</p>

<pre><code>you can make string __bold__ like that or **like this** if you like
</code></pre>

<p>you can also make <em>italics</em> using single asterisks or <em>single underlines</em> if you prefer</p>

<pre><code>you can also make *italics* using single asterisks or _single underlines_ if you prefer
</code></pre>

<p>I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or *</p>

<h2>indented literals</h2>

<pre><code>This is indented by four spaces
This is on the next line

THis is separated by a line





This is sepatated by a bunch of lines
</code></pre>

<p>And this is just a normal string</p>

<pre><code>Now two tabs
With some       irregular  spaces !
</code></pre>
2020/03/18 22:33:02 Segment &{markdown 1 map[]}
2020/03/18 22:33:02 Segment &{lists 1 map[]}
2020/03/18 22:33:02 Segment &{bulleted 5 map[]}
2020/03/18 22:33:02 Segment &{
- one
- two
   - two.one 1 map[]}
2020/03/18 22:33:02 Segment &{numbered 5 map[]}
2020/03/18 22:33:02 Segment &{
1. number 1
2. number 2 1 map[]}
2020/03/18 22:33:02 Segment &{checkbox 5 map[]}
2020/03/18 22:33:02 Segment &{
- [ ] unchecked box
- [x] checked box 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] this is a checkbox 1 map[]}
2020/03/18 22:33:02 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:33:02 Segment &{[x] this is a checked checkbox 1 map[]}
2020/03/18 22:33:02 Segment &{code 1 map[]}
2020/03/18 22:33:02 Segment &{this is just a pointless and quite random string of gibberish which, while containing meaningful symbols and adopting correct english grammar, in nonetheless utterly lacking in informativeness and hence might be considered meaningless by those who take that opinion in the philosophy of language 1 map[]}
2020/03/18 22:33:02 Segment &{quote [“quotes?”;quote blocks] 1 map[]}
2020/03/18 22:33:02 Segment &{links 1 map[]}
2020/03/18 22:33:02 Segment &{this is a link: www.google.com 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com}]. raw = 'github'
2020/03/18 22:33:02 Segment &{I can also label a link like so:  1 map[]}
2020/03/18 22:33:02 Segment &{github 17 map[href:https://github.com]}
2020/03/18 22:33:02 >>>>> atts = [{ href www.facebook.com}]. raw = 'facebook'
2020/03/18 22:33:02 >>>>> atts = [{ href www.facebook.com}]. raw = 'go to facebook'
2020/03/18 22:33:02 Segment &{Or I could reference them like this  1 map[]}
2020/03/18 22:33:02 Segment &{facebook 17 map[href:www.facebook.com]}
2020/03/18 22:33:02 Segment &{ or i can say  1 map[]}
2020/03/18 22:33:02 Segment &{go to facebook 17 map[href:www.facebook.com]}
2020/03/18 22:33:02 Segment &{ so long as I provide the reference below somehwere 1 map[]}
2020/03/18 22:33:02 Segment &{headers [“headers?”] 1 map[]}
2020/03/18 22:33:02 Segment &{// # header 1
    # header 1
blah blah 1 map[]}
2020/03/18 22:33:02 Segment &{//## header 2
    ## header 2
header 2 blah 1 map[]}
2020/03/18 22:33:02 Segment &{header 3 1 map[]}
2020/03/18 22:33:02 Segment &{blah blah 1 map[]}
2020/03/18 22:33:02 Segment &{header 4 1 map[]}
2020/03/18 22:33:02 Segment &{blah blah 1 map[]}
2020/03/18 22:33:02 Segment &{header 5 1 map[]}
2020/03/18 22:33:02 Segment &{blah blah 1 map[]}
2020/03/18 22:33:02 Segment &{Alternatively: 1 map[]}
2020/03/18 22:33:02 Segment &{blah 1 map[]}
2020/03/18 22:33:02 Segment &{blah blah 1 map[]}
2020/03/18 22:33:02 Segment &{code 1 map[]}
2020/03/18 22:33:02 Segment &{unmarked 1 map[]}
2020/03/18 22:33:02 Segment &{with ~ these
    ~~~
    code with squiggles
    ~~~ 1 map[]}
2020/03/18 22:33:02 Segment &{### scala 1 map[]}
2020/03/18 22:33:02 Segment &{### java 1 map[]}
2020/03/18 22:33:02 Segment &{inline formatting 1 map[]}
2020/03/18 22:33:02 Segment &{you can make string  1 map[]}
2020/03/18 22:33:02 Segment &{bold 5 map[]}
2020/03/18 22:33:02 Segment &{ like that or  1 map[]}
2020/03/18 22:33:02 Segment &{like this 5 map[]}
2020/03/18 22:33:02 Segment &{ if you like 1 map[]}
2020/03/18 22:33:02 Segment &{you can also make  1 map[]}
2020/03/18 22:33:02 Segment &{italics 3 map[]}
2020/03/18 22:33:02 Segment &{ using single asterisks or  1 map[]}
2020/03/18 22:33:02 Segment &{single underlines 3 map[]}
2020/03/18 22:33:02 Segment &{ if you prefer 1 map[]}
2020/03/18 22:33:02 Segment &{I can also escape backslashes like so \ or *
    I can also escape backslashes like so \ or * 1 map[]}
2020/03/18 22:33:02 Segment &{indented literals 1 map[]}
2020/03/18 22:33:02 Segment &{And this is just a normal string 1 map[]}
2020/03/18 22:33:02 <h1>Maven</h1>

<h2>command line</h2>

<h3>options</h3>

<pre><code class="language-shell">mvn &lt;command&gt; -U # clear local cache
mvn &lt;command&gt; -X # debug
</code></pre>
2020/03/18 22:33:02 Segment &{Maven 1 map[]}
2020/03/18 22:33:02 Segment &{command line 1 map[]}
2020/03/18 22:33:02 Segment &{options 1 map[]}
2020/03/18 22:33:02 <h1>mongo</h1>

<p>To run the server:</p>

<pre><code class="language-ss">$ mongod
</code></pre>

<p>To run the command-line environment:</p>

<pre><code class="language-ss">$ mongo
</code></pre>

<h2>organisation</h2>

<ul>
<li>dbPath = /data/db</li>
<li>conf = /usr/loca/etc/mongod.conf</li>
</ul>

<h2>config</h2>

<p><em>default config</em></p>

<p>defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1</p>

<h2>scale-grid</h2>

<p><a href="https://console.scalegrid.io">https://console.scalegrid.io</a></p>

<p>To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg:</p>

<pre><code class="language-sh">
mongo u=admin p=&lt;password&gt; --ssh

</code></pre>

<h3>crendentials</h3>

<ul>
<li>username : CPSSupport2@bbc.co.uk</li>
<li>password : CpSmong0!1620</li>
</ul>

<h2>ssh access</h2>

<ol>
<li>get the</li>
<li>ssh onto cps-airlock</li>
<li>ssh onto db instance

<ul>
<li>get the pem file</li>
<li>change permissions to
<code>
chmod 400 &lt;file.pem&gt;
</code></li>
</ul></li>
</ol>

<ul>
<li>ssh onto instance:
<code>
ssh -i &lt;path to .pem&gt; ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
</code></li>
</ul>

<h2>command line</h2>

<h3>querying</h3>

<p>A query is a JSON object</p>

<p>For exact matching use explicit values:
&gt; {
&gt; &ldquo;textField&rdquo;: &ldquo;value&rdquo;,
&gt; &ldquo;numberField&rdquo;: 2,
&gt; &ldquo;boolField&rdquo;: true
&gt; }</p>

<h4>query selectors</h4>

<h5>comparison</h5>

<ul>
<li><p>$eq: equal to a specified value</p></li>

<li><p>$gt: greater than a specified value</p></li>

<li><p>$gte: greater than or equal to a specified value</p></li>

<li><p>$lt: less that a specified value</p></li>

<li><p>$lte: less than/equal to a specified value</p></li>

<li><p>$ne: not equal to a specified value</p></li>

<li><p>$in: any value in an array</p></li>

<li><p>$nin: none of the values in the array</p>

<h5>logical selectors</h5></li>

<li><p>$or</p></li>

<li><p>$and</p></li>

<li><p>$not</p></li>

<li><p>$nor</p>

<h4>element</h4></li>

<li><p>$exists:</p></li>

<li><p>$type:</p>

<h5>evaluation</h5></li>

<li><p>$mod:</p></li>

<li><p>$regex:</p></li>

<li><p>$text:</p></li>

<li><p>$where:
For optional values use $in:
&gt; { &ldquo;key&rdquo;: { $in: [ &ldquo;value1&rdquo;, &ldquo;value2&rdquo; ] } }</p></li>
</ul>

<p><em>find</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;, &lt;projection&gt;)
</code></pre>

<p><em>sort</em></p>

<pre><code class="language-ss">db.collection.find(&lt;query&gt;).sort(&lt;sort-query&gt;)
</code></pre>

<h4>meta</h4>

<p>Explain a query</p>

<pre><code class="language-ss">db.&lt;..query..&gt;.explain(&lt;option&gt;)
// options = &quot;executionStats&quot;
</code></pre>

<p>Show all indexes</p>

<pre><code class="language-ss">db.posts.getIndexes()
</code></pre>

<p>Remove all indexes</p>

<pre><code class="language-ss">db.posts.dropIndexes()
</code></pre>

<p>Get different values for keys</p>

<pre><code class="language-ss">db.posts.distinct(&quot;meta.status&quot;)
</code></pre>

<h3>aggregation</h3>

<ul>
<li><a href="https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator">useful codeproject link</a></li>
</ul>
2020/03/18 22:33:02 Segment &{mongo 1 map[]}
2020/03/18 22:33:02 Segment &{To run the server: 1 map[]}
2020/03/18 22:33:02 Segment &{To run the command-line environment: 1 map[]}
2020/03/18 22:33:02 Segment &{organisation 1 map[]}
2020/03/18 22:33:02 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:33:02 Segment &{dbPath = /data/db 1 map[]}
2020/03/18 22:33:02 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:33:02 Segment &{conf = /usr/loca/etc/mongod.conf 1 map[]}
2020/03/18 22:33:02 Segment &{config 1 map[]}
2020/03/18 22:33:02 Segment &{default config 3 map[]}
2020/03/18 22:33:02 Segment &{defined in the /usr/local/etc/mongod.conf file
    systemLog:
      destination: file
      path: /usr/local/var/log/mongodb/mongo.log
      logAppend: true
    storage:
      dbPath: /usr/local/var/mongodb
    net:
      bindIp: 127.0.0.1 1 map[]}
2020/03/18 22:33:02 Segment &{scale-grid 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://console.scalegrid.io}]. raw = 'https://console.scalegrid.io'
2020/03/18 22:33:02 Segment &{https://console.scalegrid.io 17 map[href:https://console.scalegrid.io]}
2020/03/18 22:33:02 Segment &{To run mongo, mongod, mongodump, etc will require extra ssh arguments, eg: 1 map[]}
2020/03/18 22:33:02 Segment &{crendentials 1 map[]}
2020/03/18 22:33:02 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:33:02 Segment &{username : CPSSupport2@bbc.co.uk 1 map[]}
2020/03/18 22:33:02 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:33:02 Segment &{password : CpSmong0!1620 1 map[]}
2020/03/18 22:33:02 Segment &{ssh access 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:33:02 Segment &{
ssh -i <path to .pem> ec2-user@SG-VivoTest1-7840.servers.mongodirector.com
 9 map[]}
2020/03/18 22:33:02 Segment &{ssh onto instance:
 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{command line 1 map[]}
2020/03/18 22:33:02 Segment &{querying 1 map[]}
2020/03/18 22:33:02 Segment &{A query is a JSON object 1 map[]}
2020/03/18 22:33:02 Segment &{For exact matching use explicit values:
> {
> “textField”: “value”,
> “numberField”: 2,
> “boolField”: true
> } 1 map[]}
2020/03/18 22:33:02 Segment &{query selectors 1 map[]}
2020/03/18 22:33:02 Segment &{comparison 1 map[]}
2020/03/18 22:33:02 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$eq: equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$gt: greater than a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$gte: greater than or equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$lt: less that a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$lte: less than/equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$ne: not equal to a specified value 1 map[]}
2020/03/18 22:33:02 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:33:02 Segment &{$in: any value in an array 1 map[]}
2020/03/18 22:33:02 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{logical selectors 1 map[]}
2020/03/18 22:33:02 Segment &{$nin: none of the values in the array 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{logical selectors 1 map[]}
2020/03/18 22:33:02 Segment &{$or 1 map[]}
2020/03/18 22:33:02 Segment &{$or 1 map[]}
2020/03/18 22:33:02 Segment &{$and 1 map[]}
2020/03/18 22:33:02 Segment &{$and 1 map[]}
2020/03/18 22:33:02 Segment &{$not 1 map[]}
2020/03/18 22:33:02 Segment &{$not 1 map[]}
2020/03/18 22:33:02 Segment &{$nor 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{element 1 map[]}
2020/03/18 22:33:02 Segment &{$nor 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{element 1 map[]}
2020/03/18 22:33:02 Segment &{$exists: 1 map[]}
2020/03/18 22:33:02 Segment &{$exists: 1 map[]}
2020/03/18 22:33:02 Segment &{$type: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{evaluation 1 map[]}
2020/03/18 22:33:02 Segment &{$type: 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{evaluation 1 map[]}
2020/03/18 22:33:02 Segment &{$mod: 1 map[]}
2020/03/18 22:33:02 Segment &{$mod: 1 map[]}
2020/03/18 22:33:02 Segment &{$regex: 1 map[]}
2020/03/18 22:33:02 Segment &{$regex: 1 map[]}
2020/03/18 22:33:02 Segment &{$text: 1 map[]}
2020/03/18 22:33:02 Segment &{$text: 1 map[]}
2020/03/18 22:33:02 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:33:02 Segment &{$where:
For optional values use $in:
> { “key”: { $in: [ “value1”, “value2” ] } } 1 map[]}
2020/03/18 22:33:02 Segment &{find 3 map[]}
2020/03/18 22:33:02 Segment &{sort 3 map[]}
2020/03/18 22:33:02 Segment &{meta 1 map[]}
2020/03/18 22:33:02 Segment &{Explain a query 1 map[]}
2020/03/18 22:33:02 Segment &{Show all indexes 1 map[]}
2020/03/18 22:33:02 Segment &{Remove all indexes 1 map[]}
2020/03/18 22:33:02 Segment &{Get different values for keys 1 map[]}
2020/03/18 22:33:02 Segment &{aggregation 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator}]. raw = 'useful codeproject link'
2020/03/18 22:33:02 Segment &{useful codeproject link 17 map[href:https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 <h1>mongo conference 2016</h1>

<h1>1. mongo debugging</h1>

<ul>
<li>No queries should be unindexed!</li>
</ul>

<h3>get some basic information</h3>

<h4>tools to say hi</h4>

<ul>
<li>db.version()</li>
<li>db.serverCmdLineOpts()</li>
<li>db.isMater()</li>
<li>rs.conf()</li>
<li>rs.status()</li>
</ul>

<h5>showing</h5>

<ul>
<li>shows dbs</li>
<li>show collections</li>
<li>bd.get.CollectionNames()&hellip;</li>
</ul>

<h4>more detail</h4>

<p>Shows details of queries</p>

<pre><code class="language-ss">mongod logs

[I] [COMMAND]
</code></pre>

<p>//TODO This note is incomplete, google it or something!</p>

<p>Get logs for queries</p>

<pre><code>db.getLogComponents()
</code></pre>

<p>Set log level:</p>

<pre><code>db.setLogLevel(logLevel [1-?], component)

//eg
db.setLogLevel(1, &quot;sharding&quot;)
db.setLogLevel(2, &quot;query&quot;)
</code></pre>

<p>Logs can be very verbose, so use mtools (open sourced)</p>

<h4>mtools</h4>

<p>On gitHub - <a href="https://github.com/rueckstiess/mtools">https://github.com/rueckstiess/mtools</a></p>

<p>Help pick out plots from logs:</p>

<pre><code>mplotqueries [OPTIONS] [logfile[logfile...]]

/* optional args
  --type
*/
</code></pre>

<h4>mongostat</h4>

<pre><code>mongostat ... --router
</code></pre>

<h1>2. building effective applications</h1>

<h3>flaky networks</h3>

<h4>what can go wrong?</h4>

<ul>
<li>timeouts or resets</li>
<li>primary failover</li>
<li>primary stepdown : driver sends to wrong primary</li>
<li>network outage: lasts as opposed to a blip</li>
</ul>

<p>All result in errors - a configuration problem in the code</p>

<h4>transactions</h4>

<p>If you don&rsquo;t get a reply, do you know if your update went through?</p>

<h3>drivers</h3>

<p>network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error</p>

<p>#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM</p>

<p>In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message<br />
  the driver has a retry loop in it</p>

<p>We want the operation to work for all types of errors. We handle this with retry stategies:</p>

<h3>retry stategies</h3>

<ul>
<li>don&rsquo;t retry<br />
the right thing if the network is down or command errors (won&rsquo;t work no matter what)<br />
</li>
</ul>

<p>Terrible idea retrying no matter what!
- retry 5 times<br />
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won&rsquo;t really help
- retry once, except command errors<br />
  still a bad strategy. haven&rsquo;t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe:</p>

<p>won&rsquo;t be obvious, how will this work? Doesn&rsquo;t waste time retrying. How to make operation idempontent?</p>

<h3>idempontent;idempontency</h3>

<p>operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able<br />
  updateOne isn&rsquo;t idempontent! Turn it into something that is!
  - add unique token to a &lsquo;pending&rsquo; array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated</p>

<pre><code>  some inline code
</code></pre>

<ul>
<li>so only update if the id is in the pending array, - safely retry-able</li>
</ul>

<p>If the update fails, the id is still pending.<br />
  Have a script gather arrays with non-empty pending arrays, these are the failed updates.</p>

<h3>testing;black pipe testing</h3>

<h2>black pipe testing</h2>

<p>network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock.</p>

<p>more: bit.ly/resilient-applications</p>

<p>has more info on drivers, detached stages, and stuff from the talk.</p>

<h1>3. the rise of the data lake</h1>

<p>There is a lot of data!, a lot of it unstructured.</p>

<p>Data lakes offer a solutio to data saturation: DATA LAKE</p>

<p>Hadoop is a popular platform.</p>

<h3>hadoop</h3>

<ul>
<li>allows horizontal scalability</li>
<li>read-optimized schema</li>
<li>working layer in SQL and others</li>
<li>great references</li>
</ul>

<h4>requisites</h4>

<ul>
<li>low latency</li>
<li>random access to small indexed subset of data</li>
<li>support to expressive query language and aggregation queries</li>
<li>update of data that change value very frequently in real time</li>
</ul>

<p>so not good for everything!</p>

<h1>4. spark</h1>

<p>A distributed compute engine<br />
on maven</p>

<h3>rdd;resilient distributed dataset</h3>

<p>Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]]</p>

<h3>connecting to spark</h3>

<ol>
<li>connecting (huh?)</li>
<li>partitioning
splitting collections into parts. Default is a sampling partitioner</li>
<li>support data frames</li>
<li>configuration</li>
</ol>
2020/03/18 22:33:02 Segment &{mongo conference 2016 1 map[]}
2020/03/18 22:33:02 Segment &{1. mongo debugging 1 map[]}
2020/03/18 22:33:02 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:33:02 Segment &{No queries should be unindexed! 1 map[]}
2020/03/18 22:33:02 Segment &{get some basic information 1 map[]}
2020/03/18 22:33:02 Segment &{tools to say hi 1 map[]}
2020/03/18 22:33:02 Segment &{db.version() 1 map[]}
2020/03/18 22:33:02 Segment &{db.version() 1 map[]}
2020/03/18 22:33:02 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:33:02 Segment &{db.serverCmdLineOpts() 1 map[]}
2020/03/18 22:33:02 Segment &{db.isMater() 1 map[]}
2020/03/18 22:33:02 Segment &{db.isMater() 1 map[]}
2020/03/18 22:33:02 Segment &{rs.conf() 1 map[]}
2020/03/18 22:33:02 Segment &{rs.conf() 1 map[]}
2020/03/18 22:33:02 Segment &{rs.status() 1 map[]}
2020/03/18 22:33:02 Segment &{rs.status() 1 map[]}
2020/03/18 22:33:02 Segment &{showing 1 map[]}
2020/03/18 22:33:02 Segment &{shows dbs 1 map[]}
2020/03/18 22:33:02 Segment &{shows dbs 1 map[]}
2020/03/18 22:33:02 Segment &{show collections 1 map[]}
2020/03/18 22:33:02 Segment &{show collections 1 map[]}
2020/03/18 22:33:02 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:33:02 Segment &{bd.get.CollectionNames()… 1 map[]}
2020/03/18 22:33:02 Segment &{more detail 1 map[]}
2020/03/18 22:33:02 Segment &{Shows details of queries 1 map[]}
2020/03/18 22:33:02 Segment &{//TODO This note is incomplete, google it or something! 1 map[]}
2020/03/18 22:33:02 Segment &{Get logs for queries 1 map[]}
2020/03/18 22:33:02 Segment &{Set log level: 1 map[]}
2020/03/18 22:33:02 Segment &{Logs can be very verbose, so use mtools (open sourced) 1 map[]}
2020/03/18 22:33:02 Segment &{mtools 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools}]. raw = 'https://github.com/rueckstiess/mtools'
2020/03/18 22:33:02 Segment &{On gitHub -  1 map[]}
2020/03/18 22:33:02 Segment &{https://github.com/rueckstiess/mtools 17 map[href:https://github.com/rueckstiess/mtools]}
2020/03/18 22:33:02 Segment &{Help pick out plots from logs: 1 map[]}
2020/03/18 22:33:02 Segment &{mongostat 1 map[]}
2020/03/18 22:33:02 Segment &{2. building effective applications 1 map[]}
2020/03/18 22:33:02 Segment &{flaky networks 1 map[]}
2020/03/18 22:33:02 Segment &{what can go wrong? 1 map[]}
2020/03/18 22:33:02 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:33:02 Segment &{timeouts or resets 1 map[]}
2020/03/18 22:33:02 Segment &{primary failover 1 map[]}
2020/03/18 22:33:02 Segment &{primary failover 1 map[]}
2020/03/18 22:33:02 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:33:02 Segment &{primary stepdown : driver sends to wrong primary 1 map[]}
2020/03/18 22:33:02 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:33:02 Segment &{network outage: lasts as opposed to a blip 1 map[]}
2020/03/18 22:33:02 Segment &{All result in errors - a configuration problem in the code 1 map[]}
2020/03/18 22:33:02 Segment &{transactions 1 map[]}
2020/03/18 22:33:02 Segment &{If you don’t get a reply, do you know if your update went through? 1 map[]}
2020/03/18 22:33:02 Segment &{drivers 1 map[]}
2020/03/18 22:33:02 Segment &{network blip : set state to unknown
primary failover : same
network down : same
cmd error : just returns the error 1 map[]}
2020/03/18 22:33:02 Segment &{#### state
  drivers SDAM : server discovery and monitoring spec. What drivers know about the state of your server. How drivers work is established in the SDAM 1 map[]}
2020/03/18 22:33:02 Segment &{In a blip:
  - driver sets the server state to unknown and throws an error
  - waits for you to send another message 1 map[]}
2020/03/18 22:33:02 Segment &{
  the driver has a retry loop in it 1 map[]}
2020/03/18 22:33:02 Segment &{We want the operation to work for all types of errors. We handle this with retry stategies: 1 map[]}
2020/03/18 22:33:02 Segment &{retry stategies 1 map[]}
2020/03/18 22:33:02 Segment &{don’t retry 1 map[]}
2020/03/18 22:33:02 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{don’t retry 1 map[]}
2020/03/18 22:33:02 Whaaat? br
2020/03/18 22:33:02 Segment &{
the right thing if the network is down or command errors (won’t work no matter what) 1 map[]}
2020/03/18 22:33:02 Whaaat? br
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Terrible idea retrying no matter what!
- retry 5 times 1 map[]}
2020/03/18 22:33:02 Segment &{
  Bad idea for an outage, the driver has its own retry loop so this is too expensive and won’t really help
- retry once, except command errors 1 map[]}
2020/03/18 22:33:02 Segment &{
  still a bad strategy. haven’t dealt with the problem of not being able to read the reply, you risk over-incrementing. Need to ensure the count only happens once
- retry once, excpet cmd error and make all ops idempontent: so retrying is safe: 1 map[]}
2020/03/18 22:33:02 Segment &{won’t be obvious, how will this work? Doesn’t waste time retrying. How to make operation idempontent? 1 map[]}
2020/03/18 22:33:02 Segment &{idempontent;idempontency 1 map[]}
2020/03/18 22:33:02 Segment &{operations: FIND, INSERT, UPDATE, DELETE
- FIND: naturally idempontent
- INSERT: not naturally idempontent. As long as you insert with a unique key, if you get a duplicate error, you know it worked the first time.
- DELETE: delete one delete twice will if done twice, so delete with a unique key!
- UPDATE: $set, $unset and $pullAll are naturally idempontent, so safely retry-able 1 map[]}
2020/03/18 22:33:02 Segment &{
  updateOne isn’t idempontent! Turn it into something that is!
  - add unique token to a ‘pending’ array
  - remove that token and increment counter on update. They can be combined
  - now if the pending is empty, it was updated 1 map[]}
2020/03/18 22:33:02 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:33:02 Segment &{so only update if the id is in the pending array, - safely retry-able 1 map[]}
2020/03/18 22:33:02 Segment &{If the update fails, the id is still pending. 1 map[]}
2020/03/18 22:33:02 Segment &{
  Have a script gather arrays with non-empty pending arrays, these are the failed updates. 1 map[]}
2020/03/18 22:33:02 Segment &{testing;black pipe testing 1 map[]}
2020/03/18 22:33:02 Segment &{black pipe testing 1 map[]}
2020/03/18 22:33:02 Segment &{network apps are like a pipe, with 2 io ends. So testing requires you simulate with something you can control, like a mock. 1 map[]}
2020/03/18 22:33:02 Segment &{more: bit.ly/resilient-applications 1 map[]}
2020/03/18 22:33:02 Segment &{has more info on drivers, detached stages, and stuff from the talk. 1 map[]}
2020/03/18 22:33:02 Segment &{3. the rise of the data lake 1 map[]}
2020/03/18 22:33:02 Segment &{There is a lot of data!, a lot of it unstructured. 1 map[]}
2020/03/18 22:33:02 Segment &{Data lakes offer a solutio to data saturation: DATA LAKE 1 map[]}
2020/03/18 22:33:02 Segment &{Hadoop is a popular platform. 1 map[]}
2020/03/18 22:33:02 Segment &{hadoop 1 map[]}
2020/03/18 22:33:02 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:33:02 Segment &{allows horizontal scalability 1 map[]}
2020/03/18 22:33:02 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:33:02 Segment &{read-optimized schema 1 map[]}
2020/03/18 22:33:02 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:33:02 Segment &{working layer in SQL and others 1 map[]}
2020/03/18 22:33:02 Segment &{great references 1 map[]}
2020/03/18 22:33:02 Segment &{great references 1 map[]}
2020/03/18 22:33:02 Segment &{requisites 1 map[]}
2020/03/18 22:33:02 Segment &{low latency 1 map[]}
2020/03/18 22:33:02 Segment &{low latency 1 map[]}
2020/03/18 22:33:02 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:33:02 Segment &{random access to small indexed subset of data 1 map[]}
2020/03/18 22:33:02 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:33:02 Segment &{support to expressive query language and aggregation queries 1 map[]}
2020/03/18 22:33:02 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:33:02 Segment &{update of data that change value very frequently in real time 1 map[]}
2020/03/18 22:33:02 Segment &{so not good for everything! 1 map[]}
2020/03/18 22:33:02 Segment &{4. spark 1 map[]}
2020/03/18 22:33:02 Segment &{A distributed compute engine 1 map[]}
2020/03/18 22:33:02 Segment &{
on maven 1 map[]}
2020/03/18 22:33:02 Segment &{rdd;resilient distributed dataset 1 map[]}
2020/03/18 22:33:02 Segment &{Resilient Distributed Dataset
- immutable
- fault tolerant
- transformable
]]] 1 map[]}
2020/03/18 22:33:02 Segment &{connecting to spark 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 <h1>Mozart</h1>

<h2>Urls:</h2>

<ul>
<li><a href="https://www.mozart-routing.test.api.bbci.co.uk">https://www.mozart-routing.test.api.bbci.co.uk</a></li>
</ul>

<h2>development</h2>

<p>To include a slice from your morph localhost</p>

<pre><code class="language-json"> ...
   {
       &quot;id&quot;: &quot;news-most-read-slice&quot;,
       &quot;endpoint&quot;: &quot;http://172.16.123.1:8082/view/bbc-morph-news-most-read/edition/{{edition}}/renderToStaticMarkup/true/useFixture/{{use_fixture}}?timeout=5&quot;,
       &quot;must_succeed&quot;: false
   }
 ...
</code></pre>

<p>and do this:</p>

<pre><code class="language-sh">sudo ifconfig lo0 alias 172.16.123.1
</code></pre>

<h2>page configs</h2>

<ul>
<li>euler-test job: <a href="https://jenkins.news.tools.bbc.co.uk/job/euler-test/">https://jenkins.news.tools.bbc.co.uk/job/euler-test/</a></li>
</ul>

<h2>ngrok</h2>

<h3>install</h3>

<pre><code class="language-sh">brew tap caskroom/cask
brew cask install ngrok
</code></pre>

<h3>run</h3>

<pre><code class="language-sh">ngrok http 8080
</code></pre>

<p>then you can access your local mozart at the url in the info window</p>

<h2>page configs</h2>

<pre><code class="language-sh">PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

GET to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page

or https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page?rev=2 for a specific revision

To  make live after a PUT: PUT to https://mozart-api.int.api.bbci.co.uk/v1/products/weather/configs/warnings_page/release/live
with a body { “rev”: 1 } based on the revision you got back when you PUT

Also, for the mustache template (e.g. warnings_page.mustache), you need to include it in a JSON structure when posting to the API, so you can do that easily with a script like this:
`node -e &quot;const fs=require('fs'); const html=fs.readFileSync('template.html', 'utf8'); const json=JSON.stringify({contents: html}); console.log(json);&quot;`


It’s messy, but fun.
</code></pre>
2020/03/18 22:33:02 Segment &{Mozart 1 map[]}
2020/03/18 22:33:02 Segment &{Urls: 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.mozart-routing.test.api.bbci.co.uk}]. raw = 'https://www.mozart-routing.test.api.bbci.co.uk'
2020/03/18 22:33:02 Segment &{https://www.mozart-routing.test.api.bbci.co.uk 17 map[href:https://www.mozart-routing.test.api.bbci.co.uk]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{development 1 map[]}
2020/03/18 22:33:02 Segment &{To include a slice from your morph localhost 1 map[]}
2020/03/18 22:33:02 Segment &{and do this: 1 map[]}
2020/03/18 22:33:02 Segment &{page configs 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://jenkins.news.tools.bbc.co.uk/job/euler-test/}]. raw = 'https://jenkins.news.tools.bbc.co.uk/job/euler-test/'
2020/03/18 22:33:02 Segment &{euler-test job:  1 map[]}
2020/03/18 22:33:02 Segment &{https://jenkins.news.tools.bbc.co.uk/job/euler-test/ 17 map[href:https://jenkins.news.tools.bbc.co.uk/job/euler-test/]}
2020/03/18 22:33:02 Segment &{euler-test job:  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{ngrok 1 map[]}
2020/03/18 22:33:02 Segment &{install 1 map[]}
2020/03/18 22:33:02 Segment &{run 1 map[]}
2020/03/18 22:33:02 Segment &{then you can access your local mozart at the url in the info window 1 map[]}
2020/03/18 22:33:02 Segment &{page configs 1 map[]}
2020/03/18 22:33:02 <h1>mtools</h1>

<p><a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/v/mtools.svg" alt="PyPI version" /></a>
<a href="https://pypi.python.org/pypi/mtools/"><img src="https://img.shields.io/pypi/dm/mtools.svg" alt="PyPi downloads" /></a>
<a href="https://travis-ci.org/rueckstiess/mtools"><img src="https://img.shields.io/travis/rueckstiess/mtools/master.svg" alt="Build Status" /></a></p>

<p><strong>mtools</strong> is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine.</p>

<h2>What&rsquo;s in the box?</h2>

<p>The following tools are in the mtools collection:</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogfilter">mlogfilter</a> <br>
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mloginfo">mloginfo</a> <br>
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mplotqueries">mplotqueries</a> <br>
visualize logfiles with different types of plots (requires matplotlib)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlogvis">mlogvis</a> <br>
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mlaunch">mlaunch</a> <br>
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo)</p>

<p><a href="https://github.com/rueckstiess/mtools/wiki/mgenerate">mgenerate</a> <br>
generates structured pseudo-random data based on a template for testing and reproduction</p>

<p>You can find the manual and many usage examples on the <a href="https://github.com/rueckstiess/mtools/wiki">mtools wiki pages</a>.</p>

<h2>Requirements and Installation Instructions</h2>

<p>The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box.</p>

<p>mtools is not currently compatible with Python 3.</p>

<p>Some of the tools have additional dependencies, which are listed under the
specific tool&rsquo;s section. See the <a href="./INSTALL.md">INSTALL.md</a> file for installation
instructions for these modules.</p>

<h2>Recent Changes</h2>

<p>The current version of mtools is 1.2.1. See <a href="./CHANGES.md">CHANGES.md</a> for a list of recent changes from previous versions of mtools.</p>

<h2>Contribute to mtools</h2>

<p>If you&rsquo;d like to contribute to mtools, please read the <a href="tutorials/contributing.md">contributor page</a> for instructions.</p>

<h2>Disclaimer</h2>

<p>This software is not supported by <a href="http://www.mongodb.com">MongoDB, Inc.</a> under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the <a href="https://github.com/rueckstiess/mtools/issues?state=open">Issues</a> section here on github.</p>
2020/03/18 22:33:02 Segment &{mtools 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:33:02 >>>>> atts = [{ href https://pypi.python.org/pypi/mtools/}]. raw = 'img'
2020/03/18 22:33:02 >>>>> atts = [{ href https://travis-ci.org/rueckstiess/mtools}]. raw = 'img'
2020/03/18 22:33:02 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{img 17 map[href:https://pypi.python.org/pypi/mtools/]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{img 17 map[href:https://travis-ci.org/rueckstiess/mtools]}
2020/03/18 22:33:02 Segment &{mtools 5 map[]}
2020/03/18 22:33:02 Segment &{ is a collection of helper scripts to parse and filter MongoDB log files (mongod, mongos), visualize log files and quickly set up complex MongoDB test environments on a local machine. 1 map[]}
2020/03/18 22:33:02 Segment &{What’s in the box? 1 map[]}
2020/03/18 22:33:02 Segment &{The following tools are in the mtools collection: 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogfilter}]. raw = 'mlogfilter'
2020/03/18 22:33:02 Segment &{mlogfilter 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogfilter]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
slices log files by time, merges log files, filters slow queries, finds table scans, shortens log lines, filters by other atributes, convert to JSON 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mloginfo}]. raw = 'mloginfo'
2020/03/18 22:33:02 Segment &{mloginfo 17 map[href:https://github.com/rueckstiess/mtools/wiki/mloginfo]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
returns info about log file, like start and end time, version, binary, special sections like restarts, connections, distinct view 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mplotqueries}]. raw = 'mplotqueries'
2020/03/18 22:33:02 Segment &{mplotqueries 17 map[href:https://github.com/rueckstiess/mtools/wiki/mplotqueries]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
visualize logfiles with different types of plots (requires matplotlib) 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlogvis}]. raw = 'mlogvis'
2020/03/18 22:33:02 Segment &{mlogvis 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlogvis]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
creates a self-contained html file that shows an interactive visualization in a web browser (as an alternative to mplotqueries) 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mlaunch}]. raw = 'mlaunch'
2020/03/18 22:33:02 Segment &{mlaunch 17 map[href:https://github.com/rueckstiess/mtools/wiki/mlaunch]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
a script to quickly spin up local test environments, including replica sets and sharded systems (requires pymongo) 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki/mgenerate}]. raw = 'mgenerate'
2020/03/18 22:33:02 Segment &{mgenerate 17 map[href:https://github.com/rueckstiess/mtools/wiki/mgenerate]}
2020/03/18 22:33:02 Segment &{  1 map[]}
2020/03/18 22:33:02 Segment &{
generates structured pseudo-random data based on a template for testing and reproduction 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/wiki}]. raw = 'mtools wiki pages'
2020/03/18 22:33:02 Segment &{You can find the manual and many usage examples on the  1 map[]}
2020/03/18 22:33:02 Segment &{mtools wiki pages 17 map[href:https://github.com/rueckstiess/mtools/wiki]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{Requirements and Installation Instructions 1 map[]}
2020/03/18 22:33:02 Segment &{The mtools collection is written in Python, and most of the tools only make
use the standard packages shipped with Python version 2.6.x and 2.7.x, and should run out of the box. 1 map[]}
2020/03/18 22:33:02 Segment &{mtools is not currently compatible with Python 3. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href ./INSTALL.md}]. raw = 'INSTALL.md'
2020/03/18 22:33:02 Segment &{Some of the tools have additional dependencies, which are listed under the
specific tool’s section. See the  1 map[]}
2020/03/18 22:33:02 Segment &{INSTALL.md 17 map[href:./INSTALL.md]}
2020/03/18 22:33:02 Segment &{ file for installation
instructions for these modules. 1 map[]}
2020/03/18 22:33:02 Segment &{Recent Changes 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href ./CHANGES.md}]. raw = 'CHANGES.md'
2020/03/18 22:33:02 Segment &{The current version of mtools is 1.2.1. See  1 map[]}
2020/03/18 22:33:02 Segment &{CHANGES.md 17 map[href:./CHANGES.md]}
2020/03/18 22:33:02 Segment &{ for a list of recent changes from previous versions of mtools. 1 map[]}
2020/03/18 22:33:02 Segment &{Contribute to mtools 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href tutorials/contributing.md}]. raw = 'contributor page'
2020/03/18 22:33:02 Segment &{If you’d like to contribute to mtools, please read the  1 map[]}
2020/03/18 22:33:02 Segment &{contributor page 17 map[href:tutorials/contributing.md]}
2020/03/18 22:33:02 Segment &{ for instructions. 1 map[]}
2020/03/18 22:33:02 Segment &{Disclaimer 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://www.mongodb.com}]. raw = 'MongoDB, Inc.'
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/rueckstiess/mtools/issues?state=open}]. raw = 'Issues'
2020/03/18 22:33:02 Segment &{This software is not supported by  1 map[]}
2020/03/18 22:33:02 Segment &{MongoDB, Inc. 17 map[href:http://www.mongodb.com]}
2020/03/18 22:33:02 Segment &{ under any of their commercial support subscriptions or otherwise. Any usage of mtools is at your own risk.
Bug reports, feature requests and questions can be posted in the  1 map[]}
2020/03/18 22:33:02 Segment &{Issues 17 map[href:https://github.com/rueckstiess/mtools/issues?state=open]}
2020/03/18 22:33:02 Segment &{ section here on github. 1 map[]}
2020/03/18 22:33:02 <h1>mustache</h1>

<ul>
<li><a href="https://mustache.github.io/mustache.5.html">website</a></li>
</ul>

<p><strong>conditionals:</strong></p>

<pre><code class="language-mustache">{{#value}}
  if value evaluates to false this is not shown
{{/value}}
{{^value}}
  if value evaluates to false this is shown
{{/value}}
</code></pre>

<p><strong>iterations:</strong></p>

<pre><code class="language-mustache">Lists:
{{#list}}
  this is shown for each item in the list
{{/list}}

Objects:
{{#object}}
  {{#key}}
    object keys are accessed with the object block
  {{/key}}
{{#object}}
</code></pre>

<p><strong>partials:</strong></p>

<p>given another template exists named user.mustache, you can inject templates:</p>

<pre><code class="language-mustache">base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</code></pre>
2020/03/18 22:33:02 Segment &{mustache 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://mustache.github.io/mustache.5.html}]. raw = 'website'
2020/03/18 22:33:02 Segment &{website 17 map[href:https://mustache.github.io/mustache.5.html]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{conditionals: 5 map[]}
2020/03/18 22:33:02 Segment &{iterations: 5 map[]}
2020/03/18 22:33:02 Segment &{partials: 5 map[]}
2020/03/18 22:33:02 Segment &{given another template exists named user.mustache, you can inject templates: 1 map[]}
2020/03/18 22:33:02 <h1>Node</h1>

<h2>nvm</h2>

<p>Node version manager</p>

<h3>versions</h3>

<pre><code>$ nvm list
         v0.12.9
-&gt;       v4.3.2
         v8.4.0
         system
default -&gt; node (-&gt; v4.3.2)
morph -&gt; 0.12.9 (-&gt; v0.12.9)
stable -&gt; 4.3 (-&gt; v4.3.2)
node -&gt; stable (-&gt; v4.3.2) (default)
</code></pre>

<p>found in</p>

<pre><code class="language-sh">$ ls ~/.nvm/versions/node/
v0.12.9 v4.3.2  v8.4.0
</code></pre>

<h3>alias</h3>

<pre><code class="language-sh">nvm alias &lt;alias&gt; &lt;node_version&gt;
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh">nvm alias morph 0.12.9
</code></pre>
2020/03/18 22:33:02 Segment &{Node 1 map[]}
2020/03/18 22:33:02 Segment &{nvm 1 map[]}
2020/03/18 22:33:02 Segment &{Node version manager 1 map[]}
2020/03/18 22:33:02 Segment &{versions 1 map[]}
2020/03/18 22:33:02 Segment &{found in 1 map[]}
2020/03/18 22:33:02 Segment &{alias 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 <h1>package managers</h1>

<h2>npm</h2>

<p>Node Package Manager, for managing packages in Node</p>

<h3>proxy settings</h3>

<p>npm uses a config file rather than reading from environmental variables to determine the proxy.</p>

<p>The file can be edited directly ()</p>

<p>Or probably better is to use the npm cli:</p>

<pre><code>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]
npm config get &lt;key&gt;
npm config delete &lt;key&gt;
npm config list [-l] [--json]
npm config edit
npm get &lt;key&gt;
npm set &lt;key&gt; &lt;value&gt; [-g|--global]
</code></pre>

<p>e.g.</p>

<pre><code class="language-sh"># set
npm config set proxy http://www-cache.reith.bbc.co.uk:80
npm config set https-proxy http://www-cache.reith.bbc.co.uk:80

# unset
npm config delete proxy
npm config delete https-proxy

# npm config unset ... seems to work as well
</code></pre>

<h2>apm</h2>

<p>Atom package manager</p>
2020/03/18 22:33:02 Segment &{package managers 1 map[]}
2020/03/18 22:33:02 Segment &{npm 1 map[]}
2020/03/18 22:33:02 Segment &{Node Package Manager, for managing packages in Node 1 map[]}
2020/03/18 22:33:02 Segment &{proxy settings 1 map[]}
2020/03/18 22:33:02 Segment &{npm uses a config file rather than reading from environmental variables to determine the proxy. 1 map[]}
2020/03/18 22:33:02 Segment &{The file can be edited directly () 1 map[]}
2020/03/18 22:33:02 Segment &{Or probably better is to use the npm cli: 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{apm 1 map[]}
2020/03/18 22:33:02 Segment &{Atom package manager 1 map[]}
2020/03/18 22:33:02 <h1>php</h1>

<h2>pluralsight</h2>

<h3>constants</h3>

<p>define:</p>

<pre><code class="language-php">define('ConstantName', 'ConstantValue');
</code></pre>

<p>check is constant is set:</p>

<pre><code class="language-php">defined('ConstantName');
// returns 1 or null
</code></pre>

<h3>existence check</h3>

<p><strong>constants:</strong></p>

<pre><code class="language-php">defined('ConstantName');
</code></pre>

<p><strong>variables</strong>:
is set and is not null:</p>

<pre><code class="language-php">isset($variable); // bool
</code></pre>

<p><strong>functions</strong>:</p>

<pre><code class="language-php">function_exists('functionName');
</code></pre>

<h3>type check</h3>

<pre><code class="language-php">// returns 1 or null

is_int($var);
is_float($var);
is_numeric($var);
is_bool($var);
is_string($var);
is_array($var);
</code></pre>

<h3>function</h3>

<p>variable functions:</p>

<pre><code class="language-php">// define the function:
function myFunction() { /* ... */ }
// set the name to a variable:
$functionName = 'myFunction'
# call the function with the variable name:
$functionName();
</code></pre>

<p><strong>make a variable global</strong>:
only within a function (variables outside a function a re global anyway)</p>

<pre><code class="language-php">global $variable = 'foo';
</code></pre>

<h3>strings</h3>

<pre><code class="language-php">// single quotes literal
$foo = 'foo';
// double quotes non-literal/evaluated
$bar = &quot;bar != $foo&quot;; // 'bar != foo'
// curly braces do the same thing but makes the extent of the var explicit
$bar = &quot;bar != {$foo}&quot;; // 'bar != foo'

//EOT = end of text
echo &lt;&lt;&lt;EOT
  blah blah
EOT;
// note last line cannot have whitespace after the semi-colon

print &quot;string&quot;; // 1 parameter only
print_r &quot;string&quot;; // human readable print
echo &quot;this&quot;, &quot;that&quot;, &quot;the other&quot;; // may take multiple params
// parentheses also optional
</code></pre>

<h4>functions</h4>

<pre><code class="language-php">$str = &quot;foo&quot;;

strtoupper($str); // to upper case
strtolower($str); // to lower case
strlen($str);     // length of string

//position of first occurence of a substring. offset optional. Negative offset counts from end of string
strpos($str, string $substring [, int $offset = 0]);

// replace all occurrences of search string with replacement string. Optional count specifies the number of replacements
str_replace($str, string $search, string $replace [int $count]);

// substring from the start position to the optional length (or end)
// start can be negative, searching from the end of the string
substr($str, int $start [, int $length]);

// convert to array, split at the specified string into chunks of optional splitLength sizes
str_split($str [, int $splitLength = 1]);

</code></pre>

<h2>docker</h2>

<p>as per the <a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/">geeky platypus</a> explanation..</p>

<p>to create a docker container for a php application, group your code into a <code>project</code> folder, with a <code>src</code> sub-directory containing all the source code. You also need a <code>docker-compose.yml</code> file to define the image, and a <code>site.conf</code> file to define the docker server</p>

<pre><code>project
  - docker-compose.yml
  - site.conf
  - src:
    - index.php
    ...
</code></pre>

<p>see the chapters for a specification of what these files should look like.</p>

<p>Run <code>docker-compose up</code> from the project root folder and visit your new site!</p>

<p><strong>NOTE:</strong> you will probably want to include the host in your <code>/etc/hosts</code> file, e.g.</p>

<pre><code>127.0.0.1   php-docker.local
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="language-yml">web:
  image: nginx:latest
  ports:
    - &quot;8080:80&quot;
  volumes:
    - ./src:/src
    - ./site.conf:/etc/nginx/conf.d/site.conf
  links:
        - php
php:
    image: php:7-fpm
    volumes:
        - ./src:/src
</code></pre>

<h3>site.conf</h3>

<pre><code>server {
    index index.php index.html;
    server_name &lt;you-server-name&gt; # e.g. php-docker.local;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /src;
    
    location ~ \.php$ {
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass php:9000;
       fastcgi_index index.php;
       include fastcgi_params;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
   }
}
</code></pre>

<h2>cheatsheet</h2>

<p><strong>strings</strong></p>

<pre><code class="language-php">$str = &quot;This is a string \n&quot;;
$str2 = 'This is another string.';
print &quot;&lt;p&gt;The string '$str' is &quot;.strlen($str).
&quot; characters long.&lt;/p&gt;&quot;;
</code></pre>

<p><strong>date</strong>:</p>

<pre><code class="language-php">print date('r').
&quot;&lt;br&gt;&quot;;
$now_1 = getdate();
$now_2 = localtime();
print &quot;{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n&quot;;
print &quot;$now_2[2]:$now_2[1]:$now_2[0]&quot;;
print &quot;&lt;br /&gt;&quot;;
$a = getdate();
printf('%s %d, %d', $a['month'], $a['mday'], $a['year']);
print &quot;&lt;br /&gt;&lt;br /&gt;&quot;;
</code></pre>

<p><strong>arrays</strong></p>

<pre><code class="language-php">$cars = ['Ferrari', 'Maserati', 'Audi', 'BMW', 'Alfa Romeo'];
print $cars[0];
print &quot;&lt;ul&gt;&quot;;
foreach($cars as $car) {
  print &quot;&lt;li&gt;$car&lt;/li&gt;&quot;;
}
print &quot;&lt;/ul&gt;&quot;;
</code></pre>

<p><strong>numeric example</strong></p>

<pre><code class="language-php">foreach([5, '5', '05', 12.3, '16.7', 'five', 0xDECAFBAD, '10e200'] as $maybeNumber) {
  $isItNumeric = is_numeric($maybeNumber);
  $actualType = gettype($maybeNumber);
  print &quot;&lt;br&gt;Is the $actualType $maybeNumber numeric? &quot;;
  if (is_numeric($maybeNumber)) {
    print &quot;yes \r\n&quot;;
  } else {
    print &quot;no&quot;;
  }
  print &quot;\n&quot;;
}
</code></pre>

<p><strong>functions</strong></p>

<pre><code class="language-php">function add($a, $b) {
  return $a + $b;
}
$total = add(2, 2);
print &quot;&lt;br&gt;&lt;br&gt;Function 'add' = $total&lt;br&gt;&quot;;
function wrap_in_html_tag($text, $tag = 'strong') {
  return &quot;&lt;$tag&gt;$text&lt;/$tag&gt;&quot;;
}
print wrap_in_html_tag(&quot;Apache HTML requests are slow and annoying!&lt;br&gt;&quot;);
</code></pre>

<p><strong>classes</strong></p>

<pre><code class="language-php">class Animal {
  public $name = &quot;default&quot;;
  public $age = 0;
}
$animal = new animal;
</code></pre>

<p><strong>web</strong></p>

<pre><code class="language-php">&lt;?php
//Cookie
setcookie('Car', 'BMW');
if (isset($_COOKIE['Car'])) {
  print &quot;&lt;br&gt;You drive a {$_COOKIE['Car']}.&lt;br&gt;&quot;;
}
//Query String
$vars = array(
  'make' =&gt; 'Ferrari',
  'model' =&gt; '488 GTB',
  'year' =&gt; '2016'
);
$query_string = http_build_query($vars);
$url = '/muppet/select.php?'.$query_string;
print $url;
?&gt;
</code></pre>

<h2>array</h2>

<pre><code class="language-php">// array key exists
array_key_exists($key, $array); 

// object is in array:
in_array('value', $array);
</code></pre>

<h3>transform</h3>

<p><strong>map</strong>:</p>

<pre><code class="language-php">array_map($function, $array);

// inline function:
array_map(function($item) { /*...*/ }, $array);
// referencing instance function
array_map('functionName', $array);
// referencing local function
array_map(array($this, 'functionName'), $array);
</code></pre>

<p><strong>filter</strong>:</p>

<pre><code class="language-php">array_filter($array, $function) // note the function - array order is reversed wrt map!
</code></pre>

<h3>reset</h3>

<p>returns the head of the array or false if it is empty (there more to it than that though)</p>

<pre><code class="language-php">reset($array)
</code></pre>

<h2>strings</h2>

<h3>explode</h3>

<p>split a string into an array around the specified delimiter</p>

<pre><code class="language-php">$splitArray = explode('delimiter', $string)
</code></pre>

<h2>example</h2>

<pre><code class="language-php">&lt;?php

class BBC_Tabloid_Presenter_OpenGraph extends BBC_News_Core_Presenter
{
    const DOMESTIC_DEFAULT_HANDLE = '@BBCNews';
    const INTERNATIONAL_DEFAULT_HANDLE = '@BBCWorld';
    const DEFAULT_LOGO = 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png?cb=1';
    const DEFAULT_NAME = 'BBC News';
    const FACEBOOK_AUTHOR = 'https://www.facebook.com/bbcnews';
    const FACEBOOK_IMAGE_SIZE = 1024;
    const TWITTER_IMAGE_SIZE = 560;
    const LDJSON_IMAGE_SIZE = 560;
    const VIDEO_IMAGE_SIZE = 560;
    const NMR_TOP_STORIES = 12;

    protected $env = PAL_ENV;
    protected $logger;

    public $facebook;
    public $twitter;
    public $ldjson;

    private $asset;
    private $assetProxy;

    protected $cpsAssetConfiguration = array(
        'IDX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'top_stories')
        ),
        'FIX' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'BLOG' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name')
        ),
        'STY' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity')
        ),
        'CSP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'Article',
            'ldDataConf' =&gt; array('common_fields', 'article_body', 'datePublished', 'headline', 'story_images', 'author', 'main_entity', 'video')
        ),
        'MAP' =&gt; array(
            'fbPageType' =&gt; 'website',
            'ldPageType' =&gt; 'WebPage',
            'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_entity', 'video')
        ),
        'PGL' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_image')
        ),
        'LEP' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'datePublished', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        ),
        'LIV' =&gt; array(
            'fbPageType' =&gt; 'article',
            'ldPageType' =&gt; 'NewsArticle',
            'ldDataConf' =&gt; array('common_fields', 'description', 'liveStreamLastUpdateTime', 'headline', 'main_entity', 'main_image'),
            'mainImageType' =&gt; 'SERVICE_LOGO'
        )
    );

    public function prepareViewData()
    {
        if (!$this-&gt;features2['open_graph']-&gt;isEnabled()) {
            $this-&gt;isOn = false;
            return;
        }
        if ($this-&gt;getOpt('opengraph') || !$this-&gt;request-&gt;isCpsBased()) {
            $this-&gt;assetProxy = $this-&gt;getAssetWithoutId($this-&gt;getOpt('opengraph'));
        } else {
            $this-&gt;asset = $this-&gt;getAssetWithId($this-&gt;request-&gt;getAssetId());

            if (!array_key_exists($this-&gt;getPageType(), $this-&gt;cpsAssetConfiguration)) {
                $this-&gt;isOn = false;
                return;
            }
        }

        $this-&gt;facebook = $this-&gt;getFacebookMetaData();
        $this-&gt;twitter  = $this-&gt;getTwitterMetaData();
        $this-&gt;ldjson   = $this-&gt;getLdJsonMetaData();
    }

    private function getAssetWithId($assetId)
    {
        return $this-&gt;candyService-&gt;retrieveAssetById($assetId);
    }

    /*
     *  $config MUST contain at least the following:
     *      type: notional asset type (e.g. 'STY')
     *      description: string describing the page's contents
     *      title: string containing the story headline/page title
     *
     *  optional (in order of usefulness):
     *      image: url of main image
     *      images: array of imageChef-able image URLs (where there is more than one image)
     *      lastUpdated: date last updated (either an RFC3339 string or a DateTime object)
     *      section: section name
     *      handle: twitter handle (for correspondents)
     *      uri: URI of this page ($_SERVER['REQUEST_URI'] is used if omitted)
     *
     */
    private function getAssetWithoutId($config)
    {
        if (!is_array($config) || !isset($config['type']) || !isset($config['description']) || !isset($config['title'])) {

            $this-&gt;logger-&gt;error(&quot;BBC_Tabloid_Presenter_OpenGraph::getAssetWithoutId: supplied config must have a type, description and title&quot;);
            return array('type' =&gt; '???');  // force illegal type
        }

        if (isset($config['fbpagetype']) &amp;&amp; isset($config['ldpagetype'])) {
            $this-&gt;cpsAssetConfiguration[$config['type']] = array(
                'fbPageType' =&gt; $config['fbpagetype'],
                'ldPageType' =&gt; $config['ldpagetype'],
                'ldDataConf' =&gt; array('common_fields', 'description', 'page_name', 'main_image')
            );
            $this-&gt;assetProxy['type'] = $config['type'];
        }
        return $config;
    }

    /**
     * Return the canonical URL for the page
     *
     * @param string $uri
     * @return string $uri with the domain either as the requested page or .co.uk if the service overrides it
     */
    private function canonicalUri($uri)
    {
        if (strpos($_SERVER['HTTP_HOST'], '.bbc.com') !== false) {
            return str_replace('.bbc.co.uk', '.bbc.com', $uri);
        } else {
            return str_replace('.bbc.com', '.bbc.co.uk', $uri);
        }
    }

    private function getFacebookMetaData()
    {
        $brand = $this-&gt;localisation-&gt;translate('base.brand');
        $locale = $this-&gt;getLocaleSettings();
        if (!$locale) {
            $serviceData = $this-&gt;localisation-&gt;getServiceData();
            $locale = $serviceData[1];
        }

        $result = array(
            'title' =&gt; $this-&gt;getPageTitle(),
            'type' =&gt; $this-&gt;cpsAssetConfiguration[$this-&gt;getPageType()]['fbPageType'],
            'description' =&gt; $this-&gt;getDescription(),
            'site_name' =&gt; $brand,
            'article' =&gt; array(
                'author' =&gt; self::FACEBOOK_AUTHOR,
                'section' =&gt; $this-&gt;getSectionName()
            ),
            'url' =&gt; $this-&gt;canonicalUri($this-&gt;getUri()),
            'image' =&gt; $this-&gt;getBrandedImage(self::FACEBOOK_IMAGE_SIZE)
        );

        if ($locale) {
            $result['locale'] = $locale;
        }
        return $result;
    }

    private function getBrandedImage($size)
    {
        $service = $this-&gt;request-&gt;getParam('service');
        $brandedImage = $this-&gt;features2['open_graph']-&gt;getOption('branded_image');
        $image = $this-&gt;getMainImage($size);

        if ($brandedImage &amp;&amp; $service) {
            return str_replace(
                array('amz', 'cpsdevpb', 'cpsprodpb', 'ats'),
                'branded_' . $service,
                $image
            );
        } else {
            return $image;
        }
    }

    private function getLocaleSettings()
    {
        if (!is_null($this-&gt;request-&gt;getParam('variant'))) {
            return $this-&gt;features2['open_graph']-&gt;getOption($this-&gt;request-&gt;getParam('variant').'_locale');
        } elseif ($locale = $this-&gt;features2['open_graph']-&gt;getOption('override_locale')) {
            return $this-&gt;features2['open_graph']-&gt;getOption('override_locale');
        }
        return false;
    }

    private function getTwitterMetaData()
    {
        $authorHandle = $this-&gt;getTwitterName() ?: $this-&gt;getTwitterHandle();

        $isAmplifyTag = $this-&gt;isTwitterAmplifyTag();
        $cardType = $isAmplifyTag ? 'player' : 'summary_large_image';
        $playerUrl = $isAmplifyTag ? $this-&gt;getTwitterPlayerUrl() : false;

        return array(
            'card' =&gt; $cardType,
            'site' =&gt; $this-&gt;getTwitterHandle(),
            'title' =&gt; $this-&gt;getPageTitle(),
            'description' =&gt; $this-&gt;getDescription(),
            'handle' =&gt; $authorHandle,
            'image' =&gt; $this-&gt;getMainImage(self::TWITTER_IMAGE_SIZE),
            'imageAlt' =&gt; $this-&gt;getImageAlt(),
            'domain' =&gt; $this-&gt;canonicalUri('www.bbc.co.uk'),
            'playerUrl' =&gt; $playerUrl
        );
    }
</code></pre>
2020/03/18 22:33:02 Segment &{php 1 map[]}
2020/03/18 22:33:02 Segment &{pluralsight 1 map[]}
2020/03/18 22:33:02 Segment &{constants 1 map[]}
2020/03/18 22:33:02 Segment &{define: 1 map[]}
2020/03/18 22:33:02 Segment &{check is constant is set: 1 map[]}
2020/03/18 22:33:02 Segment &{existence check 1 map[]}
2020/03/18 22:33:02 Segment &{constants: 5 map[]}
2020/03/18 22:33:02 Segment &{variables 5 map[]}
2020/03/18 22:33:02 Segment &{:
is set and is not null: 1 map[]}
2020/03/18 22:33:02 Segment &{functions 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{type check 1 map[]}
2020/03/18 22:33:02 Segment &{function 1 map[]}
2020/03/18 22:33:02 Segment &{variable functions: 1 map[]}
2020/03/18 22:33:02 Segment &{make a variable global 5 map[]}
2020/03/18 22:33:02 Segment &{:
only within a function (variables outside a function a re global anyway) 1 map[]}
2020/03/18 22:33:02 Segment &{strings 1 map[]}
2020/03/18 22:33:02 Segment &{functions 1 map[]}
2020/03/18 22:33:02 Segment &{docker 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/}]. raw = 'geeky platypus'
2020/03/18 22:33:02 Segment &{as per the  1 map[]}
2020/03/18 22:33:02 Segment &{geeky platypus 17 map[href:http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/]}
2020/03/18 22:33:02 Segment &{ explanation.. 1 map[]}
2020/03/18 22:33:02 Segment &{to create a docker container for a php application, group your code into a  1 map[]}
2020/03/18 22:33:02 Segment &{project 9 map[]}
2020/03/18 22:33:02 Segment &{ folder, with a  1 map[]}
2020/03/18 22:33:02 Segment &{src 9 map[]}
2020/03/18 22:33:02 Segment &{ sub-directory containing all the source code. You also need a  1 map[]}
2020/03/18 22:33:02 Segment &{docker-compose.yml 9 map[]}
2020/03/18 22:33:02 Segment &{ file to define the image, and a  1 map[]}
2020/03/18 22:33:02 Segment &{site.conf 9 map[]}
2020/03/18 22:33:02 Segment &{ file to define the docker server 1 map[]}
2020/03/18 22:33:02 Segment &{see the chapters for a specification of what these files should look like. 1 map[]}
2020/03/18 22:33:02 Segment &{Run  1 map[]}
2020/03/18 22:33:02 Segment &{docker-compose up 9 map[]}
2020/03/18 22:33:02 Segment &{ from the project root folder and visit your new site! 1 map[]}
2020/03/18 22:33:02 Segment &{NOTE: 5 map[]}
2020/03/18 22:33:02 Segment &{ you will probably want to include the host in your  1 map[]}
2020/03/18 22:33:02 Segment &{/etc/hosts 9 map[]}
2020/03/18 22:33:02 Segment &{ file, e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{docker-compose.yml 1 map[]}
2020/03/18 22:33:02 Segment &{site.conf 1 map[]}
2020/03/18 22:33:02 Segment &{cheatsheet 1 map[]}
2020/03/18 22:33:02 Segment &{strings 5 map[]}
2020/03/18 22:33:02 Segment &{date 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{arrays 5 map[]}
2020/03/18 22:33:02 Segment &{numeric example 5 map[]}
2020/03/18 22:33:02 Segment &{functions 5 map[]}
2020/03/18 22:33:02 Segment &{classes 5 map[]}
2020/03/18 22:33:02 Segment &{web 5 map[]}
2020/03/18 22:33:02 Segment &{array 1 map[]}
2020/03/18 22:33:02 Segment &{transform 1 map[]}
2020/03/18 22:33:02 Segment &{map 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{filter 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{reset 1 map[]}
2020/03/18 22:33:02 Segment &{returns the head of the array or false if it is empty (there more to it than that though) 1 map[]}
2020/03/18 22:33:02 Segment &{strings 1 map[]}
2020/03/18 22:33:02 Segment &{explode 1 map[]}
2020/03/18 22:33:02 Segment &{split a string into an array around the specified delimiter 1 map[]}
2020/03/18 22:33:02 Segment &{example 1 map[]}
2020/03/18 22:33:02 <h1>postgresql</h1>

<p><a href="https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started">https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started</a></p>

<p>run the daemon:</p>

<pre><code class="language-sh">pg_ctl -D /usr/local/var/postgres start
</code></pre>

<p>enter posgres cli:</p>

<pre><code class="language-sh">psql postgres
</code></pre>

<h2>cli</h2>

<p>commands:</p>

<pre><code>\list # list dbs
\du   # list users
\dt   # list tables
\connect
\q    # quit
</code></pre>

<pre><code class="language-sh">CREATE DATABASE databasename;
</code></pre>

<h2>snapshots</h2>

<p>take snapshot:</p>

<pre><code class="language-sh">pg_dump -U username dbname &gt; dbexport.pgsql
</code></pre>

<p>restore:</p>

<pre><code class="language-sh">psql -U username dbname &lt; dbexport.pgsql
</code></pre>
2020/03/18 22:33:02 Segment &{postgresql 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started}]. raw = 'https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started'
2020/03/18 22:33:02 Segment &{https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started 17 map[href:https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb#iii-getting-started]}
2020/03/18 22:33:02 Segment &{run the daemon: 1 map[]}
2020/03/18 22:33:02 Segment &{enter posgres cli: 1 map[]}
2020/03/18 22:33:02 Segment &{cli 1 map[]}
2020/03/18 22:33:02 Segment &{commands: 1 map[]}
2020/03/18 22:33:02 Segment &{snapshots 1 map[]}
2020/03/18 22:33:02 Segment &{take snapshot: 1 map[]}
2020/03/18 22:33:02 Segment &{restore: 1 map[]}
2020/03/18 22:33:02 <h1>pw log</h1>

<p>Find pw information at [<a href="http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13">http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13</a>]</p>

<ul>
<li>bbc: March 2017</li>
<li>aws: December 2016 (not really, but to make it easier!)</li>
<li>bbc: December 2016</li>
<li>aws: November 2016</li>
<li>e-payslips: November 2016</li>
</ul>

<h2>hints</h2>

<ul>
<li>BBC HouseYYMM</li>
<li>aws HouseYYMM! (verify that!)</li>
<li>e-payslips: HouseMMYY</li>
</ul>

<h2>reset</h2>

<p>open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers</p>

<h2>keys</h2>

<ul>
<li>textual: <code>attractive-black-gaur-73464636867659827852381</code></li>
</ul>
2020/03/18 22:33:02 Segment &{pw log 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13}]. raw = 'http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13'
2020/03/18 22:33:02 Segment &{Find pw information at [ 1 map[]}
2020/03/18 22:33:02 Segment &{http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13 17 map[href:http://ad-lookup.bs.bbc.co.uk/adlookup.php?q=grayt13]}
2020/03/18 22:33:02 Segment &{] 1 map[]}
2020/03/18 22:33:02 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:33:02 Segment &{bbc: March 2017 1 map[]}
2020/03/18 22:33:02 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:33:02 Segment &{aws: December 2016 (not really, but to make it easier!) 1 map[]}
2020/03/18 22:33:02 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:33:02 Segment &{bbc: December 2016 1 map[]}
2020/03/18 22:33:02 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:33:02 Segment &{aws: November 2016 1 map[]}
2020/03/18 22:33:02 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:33:02 Segment &{e-payslips: November 2016 1 map[]}
2020/03/18 22:33:02 Segment &{hints 1 map[]}
2020/03/18 22:33:02 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:33:02 Segment &{BBC HouseYYMM 1 map[]}
2020/03/18 22:33:02 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:33:02 Segment &{aws HouseYYMM! (verify that!) 1 map[]}
2020/03/18 22:33:02 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:33:02 Segment &{e-payslips: HouseMMYY 1 map[]}
2020/03/18 22:33:02 Segment &{reset 1 map[]}
2020/03/18 22:33:02 Segment &{open Keychain Access and delete the login and/or login items, then restart Chrome and cross your fingers 1 map[]}
2020/03/18 22:33:02 Segment &{keys 1 map[]}
2020/03/18 22:33:02 Segment &{textual:  1 map[]}
2020/03/18 22:33:02 Segment &{attractive-black-gaur-73464636867659827852381 9 map[]}
2020/03/18 22:33:02 Segment &{textual:  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 <h1>python</h1>

<h2>getting it working</h2>

<p>The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted</p>

<p>This was fixable by specifying some pip config in <code>~/.pip/pip.conf</code> as follows:</p>

<pre><code>[global]
trusted-host = pypi.python.org
               pypi.org
               files.pythonhosted.org
</code></pre>

<h2>useful</h2>

<p><strong>get openssl version</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;
</code></pre>

<p><strong>get ca verify paths</strong>:</p>

<pre><code class="language-sh">python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;
</code></pre>
2020/03/18 22:33:02 Segment &{python 1 map[]}
2020/03/18 22:33:02 Segment &{getting it working 1 map[]}
2020/03/18 22:33:02 Segment &{The issue with pip installing seemed to be down to the fact that the pypi repo certs were not being accepted 1 map[]}
2020/03/18 22:33:02 Segment &{This was fixable by specifying some pip config in  1 map[]}
2020/03/18 22:33:02 Segment &{~/.pip/pip.conf 9 map[]}
2020/03/18 22:33:02 Segment &{ as follows: 1 map[]}
2020/03/18 22:33:02 Segment &{useful 1 map[]}
2020/03/18 22:33:02 Segment &{get openssl version 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{get ca verify paths 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 <h1>R and D artifactory</h1>

<p><strong>user name</strong>: <code>thom.gray_at_bbc.co.uk</code></p>

<p><strong>API Key</strong>: <code>AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv</code></p>

<h2>docker</h2>

<pre><code>docker login artifactory-noforge.virt.ch.bbc.co.uk:8443
</code></pre>

<p>~/modav/innovation/s2t-kaldi-poc</p>
2020/03/18 22:33:02 Segment &{R and D artifactory 1 map[]}
2020/03/18 22:33:02 Segment &{user name 5 map[]}
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Segment &{thom.gray_at_bbc.co.uk 9 map[]}
2020/03/18 22:33:02 Segment &{API Key 5 map[]}
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Segment &{AKCp5aUZkyB3okDW6YihcbbchZqq3ttBRXawSkWHS5g3QxZtqtnoUHjb8CAbPfqyoRjZYNbnv 9 map[]}
2020/03/18 22:33:02 Segment &{docker 1 map[]}
2020/03/18 22:33:02 Segment &{~/modav/innovation/s2t-kaldi-poc 1 map[]}
2020/03/18 22:33:02 <h1>react</h1>

<h2>state</h2>

<pre><code class="language-js">this.setState({
  key: value
});
</code></pre>

<p>or if the state depends on the current state, do this instead:</p>

<pre><code class="language-js">this.setState((prevState) =&gt; ({
  key: prevState.key + 1
}))
</code></pre>

<ul>
<li>react dev tools chrome extension!</li>
</ul>

<h2>refs</h2>

<p>Creates a reference to an element</p>

<pre><code class="language-js">ref={(element) =&gt; this.refName = element}

// somewhere else

this.refName // returns the thing named by the ref name
</code></pre>

<h2>unique key</h2>

<p>multiple components shold have a unique <code>key</code> item</p>

<p>crate a sort of static function/variable/constant for a react class or function like so</p>

<pre><code class="language-js">const Component = (props) =&gt; {
  return(
    &lt;div&gt;Foo&lt;/div&gt;
  )
}

Component.staticVariable = 190;

</code></pre>
2020/03/18 22:33:02 Segment &{react 1 map[]}
2020/03/18 22:33:02 Segment &{state 1 map[]}
2020/03/18 22:33:02 Segment &{or if the state depends on the current state, do this instead: 1 map[]}
2020/03/18 22:33:02 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:33:02 Segment &{react dev tools chrome extension! 1 map[]}
2020/03/18 22:33:02 Segment &{refs 1 map[]}
2020/03/18 22:33:02 Segment &{Creates a reference to an element 1 map[]}
2020/03/18 22:33:02 Segment &{unique key 1 map[]}
2020/03/18 22:33:02 Segment &{multiple components shold have a unique  1 map[]}
2020/03/18 22:33:02 Segment &{key 9 map[]}
2020/03/18 22:33:02 Segment &{ item 1 map[]}
2020/03/18 22:33:02 Segment &{crate a sort of static function/variable/constant for a react class or function like so 1 map[]}
2020/03/18 22:33:02 <h1>redis</h1>

<pre><code class="language-sh">
$ redis-server   // run the server

$ redis-cli      // run the client

</code></pre>

<h2>operations</h2>

<p>with the cli running (or appended to <code>redis-cli</code>)</p>

<p><strong>keys:</strong></p>

<pre><code class="language-sh">
keys &lt;pattern&gt;

</code></pre>

<p><strong>z-range</strong>:</p>

<pre><code>
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;
zrangebyscore &lt;key&gt; -inf +inf              # all values
zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; withscores # with scores

</code></pre>
2020/03/18 22:33:02 Segment &{redis 1 map[]}
2020/03/18 22:33:02 Segment &{operations 1 map[]}
2020/03/18 22:33:02 Segment &{with the cli running (or appended to  1 map[]}
2020/03/18 22:33:02 Segment &{redis-cli 9 map[]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 Segment &{keys: 5 map[]}
2020/03/18 22:33:02 Segment &{z-range 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 <h1>Regex</h1>

<h2>group constructs</h2>

<h3>lookahead</h3>

<p><strong>positive lookahead</strong></p>

<ul>
<li>(?=&hellip;)</li>
</ul>

<p>Asserts that the given subpattern can be matched here, without consuming characters</p>

<p><strong>negative lookahead</strong></p>

<ul>
<li>(?!&hellip;)</li>
</ul>

<p>Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.</p>

<h3>lookbehind</h3>

<p><strong>positive lookbehind</strong></p>

<ul>
<li>(?&lt;=&hellip;)</li>
</ul>

<p>Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters</p>

<p><strong>negative lookbehind</strong></p>

<ul>
<li>(?&lt;!&hellip;)</li>
</ul>

<p>Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters</p>

<h2>capturing</h2>

<p><strong>non capturing group</strong>
- (?:&hellip;)</p>
2020/03/18 22:33:02 Segment &{Regex 1 map[]}
2020/03/18 22:33:02 Segment &{group constructs 1 map[]}
2020/03/18 22:33:02 Segment &{lookahead 1 map[]}
2020/03/18 22:33:02 Segment &{positive lookahead 5 map[]}
2020/03/18 22:33:02 Segment &{(?=…) 1 map[]}
2020/03/18 22:33:02 Segment &{(?=…) 1 map[]}
2020/03/18 22:33:02 Segment &{Asserts that the given subpattern can be matched here, without consuming characters 1 map[]}
2020/03/18 22:33:02 Segment &{negative lookahead 5 map[]}
2020/03/18 22:33:02 Segment &{(?!…) 1 map[]}
2020/03/18 22:33:02 Segment &{(?!…) 1 map[]}
2020/03/18 22:33:02 Segment &{Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters. 1 map[]}
2020/03/18 22:33:02 Segment &{lookbehind 1 map[]}
2020/03/18 22:33:02 Segment &{positive lookbehind 5 map[]}
2020/03/18 22:33:02 Segment &{(?<=…) 1 map[]}
2020/03/18 22:33:02 Segment &{(?<=…) 1 map[]}
2020/03/18 22:33:02 Segment &{Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters 1 map[]}
2020/03/18 22:33:02 Segment &{negative lookbehind 5 map[]}
2020/03/18 22:33:02 Segment &{(?<!…) 1 map[]}
2020/03/18 22:33:02 Segment &{(?<!…) 1 map[]}
2020/03/18 22:33:02 Segment &{Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters 1 map[]}
2020/03/18 22:33:02 Segment &{capturing 1 map[]}
2020/03/18 22:33:02 Segment &{non capturing group 5 map[]}
2020/03/18 22:33:02 Segment &{
- (?:…) 1 map[]}
2020/03/18 22:33:02 <h1>RPM</h1>

<h2>sources</h2>

<p>Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g.</p>

<pre><code>tar tvf SOURCES/gst-audiodescription-1.0.0.tar.gz

# contains &gt;
# gst-audiodescription-1.0.0/
# gst-audiodescription-1.0.0/AUTHORS
# gst-audiodescription-1.0.0/autogen.sh
# gst-audiodescription-1.0.0/configure.ac
# gst-audiodescription-1.0.0/container-build.sh
# gst-audiodescription-1.0.0/COPYING
# gst-audiodescription-1.0.0/Dockerfile
# gst-audiodescription-1.0.0/Makefile.am
# gst-audiodescription-1.0.0/plugins/
# gst-audiodescription-1.0.0/README.md
# gst-audiodescription-1.0.0/plugins/gstadcontrol.c
# gst-audiodescription-1.0.0/plugins/gstadcontrol.h
# gst-audiodescription-1.0.0/plugins/gstaudiodescriptionplugin.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.c
# gst-audiodescription-1.0.0/plugins/gstwhp198dec.h
# gst-audiodescription-1.0.0/plugins/Makefile.am
</code></pre>

<h2>spec file</h2>

<p><a href="http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html">http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html</a></p>

<h3>variables</h3>

<ul>
<li><code>$RPM_BUILD_ROOT</code>: the directory where the building takes place: <code>/root/rpmbuild/BUILDROOT/&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;arch&gt;</code></li>
</ul>

<h2>building</h2>

<p>best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files</p>

<pre><code class="language-sh">docker run -it -v /local/vol:/vol centos:centos7.4.1708 bash
</code></pre>

<p>You need to have <code>rmpbuild</code> installed, so <code>yum install rpm-build</code>.</p>

<p>Copy <code>SOURCES</code> and <code>SPECS</code> to <code>/root/rpmbuild/SOURCES</code> and <code>.../SPECS</code> respectively.</p>

<pre><code class="language-sh"># build the src rpm
rpmbuild -bs --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/SRPMS

# build the binary rpm
rpmbuild -bb --target x86_64 --nodeps /root/rpmbuild/SPECS/libmxf.spec
# -&gt; /root/rpmbuild/RPMS

# build all
rpmbuild -ba ...
</code></pre>

<h2>list</h2>

<p>list all files in an rpm:</p>

<pre><code class="language-sh">rpm -qpl &lt;file&gt;.rpm
</code></pre>

<h2>troubleshoot</h2>

<p><code>configure: error: No uuid generation function</code></p>

<p>this may be because a uid generator is missing, fix with <code>yum install libuuid-devel</code></p>
2020/03/18 22:33:02 Segment &{RPM 1 map[]}
2020/03/18 22:33:02 Segment &{sources 1 map[]}
2020/03/18 22:33:02 Segment &{Keep a tar.gz of a zip of the source folder named the same as the tar file (minus extension)
e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{spec file 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html}]. raw = 'http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html'
2020/03/18 22:33:02 Segment &{http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html 17 map[href:http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html]}
2020/03/18 22:33:02 Segment &{variables 1 map[]}
2020/03/18 22:33:02 Segment &{$RPM_BUILD_ROOT 9 map[]}
2020/03/18 22:33:02 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:33:02 Segment &{/root/rpmbuild/BUILDROOT/<name>-<version>-<release>.<arch> 9 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{: the directory where the building takes place:  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{building 1 map[]}
2020/03/18 22:33:02 Segment &{best thing is to build on a CentOS machine with docker. Mount a volume for exchanging files 1 map[]}
2020/03/18 22:33:02 Segment &{You need to have  1 map[]}
2020/03/18 22:33:02 Segment &{rmpbuild 9 map[]}
2020/03/18 22:33:02 Segment &{ installed, so  1 map[]}
2020/03/18 22:33:02 Segment &{yum install rpm-build 9 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{Copy  1 map[]}
2020/03/18 22:33:02 Segment &{SOURCES 9 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{SPECS 9 map[]}
2020/03/18 22:33:02 Segment &{ to  1 map[]}
2020/03/18 22:33:02 Segment &{/root/rpmbuild/SOURCES 9 map[]}
2020/03/18 22:33:02 Segment &{ and  1 map[]}
2020/03/18 22:33:02 Segment &{.../SPECS 9 map[]}
2020/03/18 22:33:02 Segment &{ respectively. 1 map[]}
2020/03/18 22:33:02 Segment &{list 1 map[]}
2020/03/18 22:33:02 Segment &{list all files in an rpm: 1 map[]}
2020/03/18 22:33:02 Segment &{troubleshoot 1 map[]}
2020/03/18 22:33:02 Segment &{configure: error: No uuid generation function 9 map[]}
2020/03/18 22:33:02 Segment &{this may be because a uid generator is missing, fix with  1 map[]}
2020/03/18 22:33:02 Segment &{yum install libuuid-devel 9 map[]}
2020/03/18 22:33:02 <h1>scalegrid</h1>

<h2>command line access</h2>

<ol>
<li>dowload the .pem file if you don&rsquo;t already have if (Manage)</li>
<li>Set permissions t0 400</li>
<li>scp the .pem file into airlock:

<ul>
<li><code>scp ~/scalegrid.pem arilockip,eu-west-1:~</code></li>
</ul></li>
<li>install mongo on the airlock:

<ul>
<li>copy this script on airlock and run it:
<code>
#!/bin/bash
clear
echo &quot;Going to install MongoDB for y'all...&quot;
sudo rm -rf /etc/yum.repos.d/mongodb-org-2.6.repo
sudo touch /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;[mongodb-org-2.6]&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;name=MongoDB 2.6 Repository&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;gpgcheck=0&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
echo &quot;enabled=1&quot; | sudo tee -a /etc/yum.repos.d/mongodb-org-2.6.repo
sudo yum install -y mongodb-org
echo &quot;MongoDB is installed. You're welcome!&quot;
</code></li>
</ul></li>
</ol>

<h2>download a backup from mongo</h2>

<ol>
<li>follow the command line access steps to get ssh access to the db host</li>
<li>get the credentials from scalegrid (uname = admin) in (Overview &gt; Authentication &gt; Credentials)</li>
<li>mongodump from airlock (remember the instance should be able to handle it!):

<ul>
<li><code>mongodump -u admin -p &lt;password&gt; -h SG-VivoLive2-&lt;instance&gt;.servers.mongodirector.com --ssl --sslAllowInvalidCertificates --authenticationDatabase admin</code></li>
</ul></li>
<li>the result dump folder should be there now</li>
<li>scp the directory back to your machine:

<ul>
<li><code>scp -r 10.3.228.69,eu-west-1:~/dump ~/Documents/dbs/</code></li>
</ul></li>
<li>run mongorestore:

<ul>
<li><code>mongorestore -d curation ~/Desktop/dbs/dump/curation/</code></li>
</ul></li>
</ol>
2020/03/18 22:33:02 Segment &{scalegrid 1 map[]}
2020/03/18 22:33:02 Segment &{command line access 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{download a backup from mongo 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 <h1>sed</h1>

<p><a href="http://tldp.org/LDP/abs/html/x23170.html">http://tldp.org/LDP/abs/html/x23170.html</a></p>

<p><a href="http://www.grymoire.com/Unix/Sed.html">http://www.grymoire.com/Unix/Sed.html</a></p>

<h2>substitute (s)</h2>

<p>substitute one pattern for another (across an optional address range).</p>

<pre><code class="language-sh">sed [opts] [address-range]s/[pattern1]/[pattern2]/
</code></pre>

<h3>e.g.</h3>

<p>remove trailing whitespace</p>

<pre><code class="language-sh">sed s/ *$//
</code></pre>
2020/03/18 22:33:02 Segment &{sed 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://tldp.org/LDP/abs/html/x23170.html}]. raw = 'http://tldp.org/LDP/abs/html/x23170.html'
2020/03/18 22:33:02 Segment &{http://tldp.org/LDP/abs/html/x23170.html 17 map[href:http://tldp.org/LDP/abs/html/x23170.html]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://www.grymoire.com/Unix/Sed.html}]. raw = 'http://www.grymoire.com/Unix/Sed.html'
2020/03/18 22:33:02 Segment &{http://www.grymoire.com/Unix/Sed.html 17 map[href:http://www.grymoire.com/Unix/Sed.html]}
2020/03/18 22:33:02 Segment &{substitute (s) 1 map[]}
2020/03/18 22:33:02 Segment &{substitute one pattern for another (across an optional address range). 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{remove trailing whitespace 1 map[]}
2020/03/18 22:33:02 <h1>Selenium</h1>

<h2>Webdrivers</h2>

<h3>Capabilities</h3>

<p><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities">https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities</a></p>
2020/03/18 22:33:02 Segment &{Selenium 1 map[]}
2020/03/18 22:33:02 Segment &{Webdrivers 1 map[]}
2020/03/18 22:33:02 Segment &{Capabilities 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities}]. raw = 'https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities'
2020/03/18 22:33:02 Segment &{https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities 17 map[href:https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities]}
2020/03/18 22:33:02 <h1>Seyren</h1>

<h2>Alerts API</h2>

<h3>Get check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&amp;start=0</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h3>Delete check alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/alerts</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>before</td>
<td>false</td>
<td>Delete alerts before &lsquo;before&rsquo; date for this check id</td>
<td>Date</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Get alerts</h3>

<ul>
<li><p><strong>URL</strong> /api/alerts</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>start</td>
<td>false</td>
<td>Index of the first result</td>
<td>int</td>
</tr>

<tr>
<td>items</td>
<td>false</td>
<td>Number of resultats to return</td>
<td>int</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;544c012636623111967d9094&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:700,
         &quot;error&quot;:1000,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;OK&quot;,
         &quot;timestamp&quot;:1414267174986,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
      {
         &quot;id&quot;:&quot;544c00ea36623111967d9093&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414267114984,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      },
...
      {
         &quot;id&quot;:&quot;544bff0b36623111967d908b&quot;,
         &quot;checkId&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;value&quot;:606.0,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;warn&quot;:100,
         &quot;error&quot;:800,
         &quot;fromType&quot;:&quot;WARN&quot;,
         &quot;toType&quot;:&quot;WARN&quot;,
         &quot;timestamp&quot;:1414266635230,
         &quot;targetHash&quot;:&quot;�b�'8��i\u0017pN�_�om&quot;
      }
   ],
   &quot;items&quot;:10,
   &quot;start&quot;:0,
   &quot;total&quot;:95
}
</code></pre>

<h2>Charts API</h2>

<h3>Get chart image for a given check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/image</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>hideThresholds</td>
<td>false</td>
<td>Hide thresholds</td>
<td>boolean</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h3>Get chart image for a given target</h3>

<ul>
<li><p><strong>URL</strong> /api/chart/{target}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Metric name</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>width</td>
<td>false</td>
<td>Width of the return image</td>
<td>int (1200 by default)</td>
</tr>

<tr>
<td>height</td>
<td>false</td>
<td>Height of the return image</td>
<td>int (350 by default)</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String (&ldquo;-24hours&rdquo; by default)</td>
</tr>

<tr>
<td>to</td>
<td>true</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>false</td>
<td>Warn level value</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>false</td>
<td>Error level value</td>
<td>String</td>
</tr>

<tr>
<td>hideLegend</td>
<td>false</td>
<td>Hide legend</td>
<td>boolean</td>
</tr>

<tr>
<td>hideAxes</td>
<td>false</td>
<td>Hide axes</td>
<td>boolean</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/alerts</p>

<p>Return png image</p>

<h2>Checks API</h2>

<h3>Search checks</h3>

<p>See <a href="https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63">Checks resource javadoc</a></p>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>state</td>
<td>false</td>
<td>states checks</td>
<td>AlertType</td>
</tr>

<tr>
<td>enabled</td>
<td>false</td>
<td>enable/disable check</td>
<td>boolean</td>
</tr>

<tr>
<td>name</td>
<td>false</td>
<td>??</td>
<td>String</td>
</tr>

<tr>
<td>fields</td>
<td>false</td>
<td>Field name on which a regex will be applied</td>
<td>String</td>
</tr>

<tr>
<td>regexes</td>
<td>false</td>
<td>Regexp</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks?enabled=true&amp;state=ERROR&amp;state=WARN&amp;state=EXCEPTION&amp;state=UNKNOWN</p>

<pre><code class="language-json">{
   &quot;values&quot;:[
      {
         &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
         &quot;name&quot;:&quot;Test&quot;,
         &quot;description&quot;:&quot;test&quot;,
         &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
         &quot;from&quot;:null,
         &quot;until&quot;:null,
         &quot;warn&quot;:&quot;100&quot;,
         &quot;error&quot;:&quot;1000&quot;,
         &quot;enabled&quot;:true,
         &quot;live&quot;:false,
         &quot;state&quot;:&quot;WARN&quot;,
         &quot;lastCheck&quot;:1414425107940,
         &quot;subscriptions&quot;:[
            {
               &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
               &quot;target&quot;:&quot;xxxx&quot;,
               &quot;type&quot;:&quot;SLACK&quot;,
               &quot;su&quot;:true,
               &quot;mo&quot;:true,
               &quot;tu&quot;:true,
               &quot;we&quot;:true,
               &quot;th&quot;:true,
               &quot;fr&quot;:true,
               &quot;sa&quot;:true,
               &quot;ignoreWarn&quot;:false,
               &quot;ignoreError&quot;:false,
               &quot;ignoreOk&quot;:false,
               &quot;fromTime&quot;:&quot;0000&quot;,
               &quot;toTime&quot;:&quot;2359&quot;,
               &quot;enabled&quot;:true
            }
         ]
      }
   ],
   &quot;items&quot;:0,
   &quot;start&quot;:0,
   &quot;total&quot;:1
}
</code></pre>

<h3>Create a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks</p>

<pre><code class="language-json">{
   &quot;name&quot;:&quot;111&quot;,
   &quot;description&quot;:&quot;222&quot;,
   &quot;target&quot;:&quot;333&quot;,
   &quot;warn&quot;:&quot;666&quot;,
   &quot;error&quot;:&quot;777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;totalMetric&quot;:0,
   &quot;from&quot;:&quot;444&quot;,
   &quot;until&quot;:&quot;555&quot;
}
</code></pre>

<p>Response &lsquo;201 Created&rsquo;</p>

<h3>Get a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;:&quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;Test&quot;,
   &quot;description&quot;:&quot;test&quot;,
   &quot;target&quot;:&quot;server1.filecount.whisper.files&quot;,
   &quot;from&quot;:null,
   &quot;until&quot;:null,
   &quot;warn&quot;:&quot;100&quot;,
   &quot;error&quot;:&quot;1000&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;state&quot;:&quot;WARN&quot;,
   &quot;lastCheck&quot;:1414444752519,
   &quot;subscriptions&quot;:[
      {
         &quot;id&quot;:&quot;54481212873059b3ba063d4e&quot;,
         &quot;target&quot;:&quot;xxxx&quot;,
         &quot;type&quot;:&quot;SLACK&quot;,
         &quot;su&quot;:true,
         &quot;mo&quot;:true,
         &quot;tu&quot;:true,
         &quot;we&quot;:true,
         &quot;th&quot;:true,
         &quot;fr&quot;:true,
         &quot;sa&quot;:true,
         &quot;ignoreWarn&quot;:false,
         &quot;ignoreError&quot;:false,
         &quot;ignoreOk&quot;:false,
         &quot;fromTime&quot;:&quot;0000&quot;,
         &quot;toTime&quot;:&quot;2359&quot;,
         &quot;enabled&quot;:true
      }
   ]
}
</code></pre>

<h3>Update a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>name</td>
<td>true</td>
<td>Name of the check</td>
<td>String</td>
</tr>

<tr>
<td>description</td>
<td>false</td>
<td>Description of the check</td>
<td>String</td>
</tr>

<tr>
<td>target</td>
<td>true</td>
<td>Name of the metric in graphite</td>
<td>String</td>
</tr>

<tr>
<td>warn</td>
<td>true</td>
<td>Warn level</td>
<td>String</td>
</tr>

<tr>
<td>error</td>
<td>true</td>
<td>Error level</td>
<td>String</td>
</tr>

<tr>
<td>enabled</td>
<td>true</td>
<td>Enable/Disable value</td>
<td>boolean</td>
</tr>

<tr>
<td>live</td>
<td>false</td>
<td>Live value (pickle protocol)</td>
<td>boolean</td>
</tr>

<tr>
<td>from</td>
<td>false</td>
<td>Specifies the beginning</td>
<td>String</td>
</tr>

<tr>
<td>until</td>
<td>false</td>
<td>Specifies the end</td>
<td>String</td>
</tr>

<tr>
<td>state</td>
<td>false</td>
<td>Specifies the state</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1</p>

<pre><code class="language-json">{
   &quot;id&quot;: &quot;540571f4f562fe8c51873ad1&quot;,
   &quot;name&quot;:&quot;2222&quot;,
   &quot;description&quot;:&quot;2222&quot;,
   &quot;target&quot;:&quot;3333&quot;,
   &quot;warn&quot;:&quot;6666&quot;,
   &quot;error&quot;:&quot;7777&quot;,
   &quot;enabled&quot;:true,
   &quot;live&quot;:false,
   &quot;from&quot;:&quot;4444&quot;,
   &quot;until&quot;:&quot;5555&quot;,
   &quot;state&quot;: &quot;OK&quot;
}
</code></pre>

<p>Return &lsquo;200 OK&rsquo;</p>

<h3>Delete a check</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h2>Config API</h2>

<h3>Get Seyren configuration</h3>

<ul>
<li><p><strong>URL</strong> /config</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<pre><code class="language-json">{
  &quot;baseUrl&quot;:&quot;http://localhost:8080/seyren&quot;,
  &quot;graphsEnabled&quot;:true,
  &quot;graphiteCarbonPickleEnabled&quot;:false
}
</code></pre>

<h2>Metrics API</h2>

<h3>Get metric count</h3>

<ul>
<li><p><strong>URL</strong> /api/metrics/{target}/total</p></li>

<li><p><strong>Method</strong> GET</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>target</td>
<td>true</td>
<td>Return metric count</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>GET /metrics/path.metric.xxx/total</p>

<pre><code class="language-json">{ &quot;path.metric.xxx&quot;: 3 }
</code></pre>

<h2>Subscriptions API</h2>

<h3>Create a subscription</h3>

<ul>
<li><p><strong>URL</strong> /checks/{checkId}/subscriptions</p></li>

<li><p><strong>Method</strong> POST</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>POST /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;201 Created&rsquo;</p>

<h3>Update a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<p>None</p>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions</p>

<pre><code class="language-json">{
   &quot;target&quot;:&quot;test@gmail.com&quot;,
   &quot;type&quot;:&quot;EMAIL&quot;,
   &quot;ignoreWarn&quot;:false,
   &quot;ignoreError&quot;:false,
   &quot;ignoreOk&quot;:false,
   &quot;notifyOnWarn&quot;:true,
   &quot;notifyOnError&quot;:true,
   &quot;notifyOnOk&quot;:true,
   &quot;fromTime&quot;:&quot;0000&quot;,
   &quot;toTime&quot;:&quot;2359&quot;,
   &quot;su&quot;:true,
   &quot;mo&quot;:true,
   &quot;tu&quot;:true,
   &quot;we&quot;:true,
   &quot;th&quot;:true,
   &quot;fr&quot;:true,
   &quot;sa&quot;:true,
   &quot;enabled&quot;:true
}
</code></pre>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Delete a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}</p></li>

<li><p><strong>Method</strong> DELETE</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5</p>

<p>Return &lsquo;204 No Content&rsquo;</p>

<h3>Test a subscription</h3>

<ul>
<li><p><strong>URL</strong> /api/checks/{checkId}/subscriptions/{subscriptionId}/test</p></li>

<li><p><strong>Method</strong> PUT</p></li>

<li><p><strong>URL Params</strong></p></li>
</ul>

<table>
<thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>

<tbody>
<tr>
<td>checkId</td>
<td>true</td>
<td>Check id</td>
<td>String</td>
</tr>

<tr>
<td>subscriptionId</td>
<td>true</td>
<td>Subscription id</td>
<td>String</td>
</tr>
</tbody>
</table>

<ul>
<li><strong>Query Params</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Body</strong></li>
</ul>

<p>None</p>

<ul>
<li><strong>Response</strong></li>
</ul>

<p>PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test</p>

<p>Return &lsquo;204 No Content&rsquo;</p>
2020/03/18 22:33:02 Segment &{Seyren 1 map[]}
2020/03/18 22:33:02 Segment &{Alerts API 1 map[]}
2020/03/18 22:33:02 Segment &{Get check alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/checks/540571f4f562fe8c51873ad1/alerts?items=10&start=0 1 map[]}
2020/03/18 22:33:02 Segment &{Delete check alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/alerts?before=2014-10-26T13:06:28%2B01:00 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:33:02 Segment &{Get alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Charts API 1 map[]}
2020/03/18 22:33:02 Segment &{Get chart image for a given check 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/image 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Return png image 1 map[]}
2020/03/18 22:33:02 Segment &{Get chart image for a given target 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/chart/{target} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/alerts 1 map[]}
2020/03/18 22:33:02 Segment &{Return png image 1 map[]}
2020/03/18 22:33:02 Segment &{Checks API 1 map[]}
2020/03/18 22:33:02 Segment &{Search checks 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63}]. raw = 'Checks resource javadoc'
2020/03/18 22:33:02 Segment &{See  1 map[]}
2020/03/18 22:33:02 Segment &{Checks resource javadoc 17 map[href:https://github.com/scobal/seyren/blob/master/seyren-api/src/main/java/com/seyren/api/jaxrs/ChecksResource.java#L63]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/checks?enabled=true&state=ERROR&state=WARN&state=EXCEPTION&state=UNKNOWN 1 map[]}
2020/03/18 22:33:02 Segment &{Create a check 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ POST 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ POST 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{POST /api/checks 1 map[]}
2020/03/18 22:33:02 Segment &{Response ‘201 Created’ 1 map[]}
2020/03/18 22:33:02 Segment &{Get a check 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:33:02 Segment &{Update a check 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘200 OK’ 1 map[]}
2020/03/18 22:33:02 Segment &{Delete a check 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:33:02 Segment &{Config API 1 map[]}
2020/03/18 22:33:02 Segment &{Get Seyren configuration 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /config 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /config 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{Metrics API 1 map[]}
2020/03/18 22:33:02 Segment &{Get metric count 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/metrics/{target}/total 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ GET 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{GET /metrics/path.metric.xxx/total 1 map[]}
2020/03/18 22:33:02 Segment &{Subscriptions API 1 map[]}
2020/03/18 22:33:02 Segment &{Create a subscription 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /checks/{checkId}/subscriptions 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ POST 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ POST 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{POST /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘201 Created’ 1 map[]}
2020/03/18 22:33:02 Segment &{Update a subscription 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:33:02 Segment &{Delete a subscription 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId} 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ DELETE 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{DELETE /api/checks/540571f4f562fe8c51873ad1/subscriptions/544eb9608730756ff45c52a5 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:33:02 Segment &{Test a subscription 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:33:02 Segment &{URL 5 map[]}
2020/03/18 22:33:02 Segment &{ /api/checks/{checkId}/subscriptions/{subscriptionId}/test 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{Method 5 map[]}
2020/03/18 22:33:02 Segment &{ PUT 1 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Segment &{URL Params 5 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Query Params 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Body 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{None 1 map[]}
2020/03/18 22:33:02 Segment &{Response 5 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{PUT /api/checks/540571f4f562fe8c51873ad1/subscriptions/54481212873059b3ba063d4e/test 1 map[]}
2020/03/18 22:33:02 Segment &{Return ‘204 No Content’ 1 map[]}
2020/03/18 22:33:02 <h1>Spring</h1>

<h2>Context annotations</h2>

<h3>xml</h3>

<p>in <code>ApplicationContext.xml</code>, add the following:</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
  
  &lt;context:annotation-config /&gt;
  &lt;context:component-scan base-package=&quot;&lt;my-package&gt;&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<h3>Types</h3>

<ul>
<li><code>@Component(&quot;beanName&quot;)</code>: any POJO</li>
<li><code>@Service(&quot;beanName&quot;)</code>: service component (i.e. service layer)</li>
<li><code>@Repository(&quot;beanName&quot;)</code>: data component (i.e. DAO layer)</li>
<li><code>@Autowired</code>: auto-wires a bean. Contexts are constructor, setter and instance</li>
</ul>

<h2>Java configuration</h2>

<p>AppConfig.java replacing applicationContext.xml</p>

<ul>
<li>use <code>@Configuration</code> annotation at the top of the AppConfig class</li>
<li>use <code>@Bean</code> annotation to bean getter methods</li>
</ul>

<p>e.g.</p>

<pre><code class="language-java">@Configuration
class AppConfig {
    @Bean(name = &quot;myBean&quot;)
    MyBean getMyBean() {
        return new MyBean();
    }
}
</code></pre>

<p>To use this, you must load your app context using:</p>

<pre><code class="language-Java">ApplicationContext appContent = new AnnotationConfigApplicationContext(AppConfig.class);
</code></pre>

<h3>Autowiring</h3>

<p>add <code>@ComponentScan({&quot;packageName&quot;})</code> annotation to your <code>AppConfig</code> class</p>

<h2>Scope</h2>

<p>using scope:</p>

<pre><code class="language-java">@Scope(&lt;scope&gt;)
class MyBean {
  // ...
}
</code></pre>

<p>or if using ApplicationContext.xml:</p>

<pre><code class="language-xml">&lt;bean name=&quot;myBean&quot; class=&quot;org.example.model.MyBean&quot; 
  scope=&quot;&lt;scope&gt;&quot;&gt;
  &lt;!-- ... --&gt;
&lt;/bean&gt;
</code></pre>

<h3>singleton</h3>

<ul>
<li>&ldquo;singleton&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_SINGLETON</code></li>
</ul>

<p>ensures the bean in reused throughout the spring context</p>

<h3>prototype</h3>

<ul>
<li>&ldquo;prototype&rdquo;</li>
<li><code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code></li>
</ul>

<p>Opposite of a singleton, ensures each instance is unique</p>

<h3>request</h3>

<ul>
<li>&ldquo;request&rdquo;</li>
</ul>

<p>Lives per HTTP(S) request</p>

<h3>session</h3>

<ul>
<li>&ldquo;session&rdquo;</li>
</ul>

<p>Lives per session</p>

<h3>global session</h3>

<p>Lives throughout application</p>

<h2>Properties</h2>

<p>in XML config (requires sprint-context namespace):</p>

<pre><code class="language-xml">&lt;context:property-placeholder location=&quot;&lt;my.properties&gt;&quot;&gt;
  
&lt;bean&gt;
  &lt;property name=&quot;myProperty&quot; value=&quot;${propertyValue}&quot;/&gt;
&lt;/bean&gt;
</code></pre>

<p>or in AppConfig:</p>

<pre><code class="language-java">@ProperySource(&quot;app.properties&quot;)
AppConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer getPropertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
    // ...
}
</code></pre>

<p>Annotate the value</p>

<pre><code class="language-java">@Value(&quot;${propertyValue}&quot;)
private Object myProperty
</code></pre>

<p>in <code>resources/my.properties</code></p>

<pre><code>propertyValue=foo
</code></pre>
2020/03/18 22:33:02 Segment &{Spring 1 map[]}
2020/03/18 22:33:02 Segment &{Context annotations 1 map[]}
2020/03/18 22:33:02 Segment &{xml 1 map[]}
2020/03/18 22:33:02 Segment &{in  1 map[]}
2020/03/18 22:33:02 Segment &{ApplicationContext.xml 9 map[]}
2020/03/18 22:33:02 Segment &{, add the following: 1 map[]}
2020/03/18 22:33:02 Segment &{Types 1 map[]}
2020/03/18 22:33:02 Segment &{@Component("beanName") 9 map[]}
2020/03/18 22:33:02 Segment &{: any POJO 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{: any POJO 1 map[]}
2020/03/18 22:33:02 Segment &{@Service("beanName") 9 map[]}
2020/03/18 22:33:02 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{: service component (i.e. service layer) 1 map[]}
2020/03/18 22:33:02 Segment &{@Repository("beanName") 9 map[]}
2020/03/18 22:33:02 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{: data component (i.e. DAO layer) 1 map[]}
2020/03/18 22:33:02 Segment &{@Autowired 9 map[]}
2020/03/18 22:33:02 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{: auto-wires a bean. Contexts are constructor, setter and instance 1 map[]}
2020/03/18 22:33:02 Segment &{Java configuration 1 map[]}
2020/03/18 22:33:02 Segment &{AppConfig.java replacing applicationContext.xml 1 map[]}
2020/03/18 22:33:02 Segment &{use  1 map[]}
2020/03/18 22:33:02 Segment &{@Configuration 9 map[]}
2020/03/18 22:33:02 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:33:02 Segment &{use  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ annotation at the top of the AppConfig class 1 map[]}
2020/03/18 22:33:02 Segment &{use  1 map[]}
2020/03/18 22:33:02 Segment &{@Bean 9 map[]}
2020/03/18 22:33:02 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:33:02 Segment &{use  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ annotation to bean getter methods 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{To use this, you must load your app context using: 1 map[]}
2020/03/18 22:33:02 Segment &{Autowiring 1 map[]}
2020/03/18 22:33:02 Segment &{add  1 map[]}
2020/03/18 22:33:02 Segment &{@ComponentScan({"packageName"}) 9 map[]}
2020/03/18 22:33:02 Segment &{ annotation to your  1 map[]}
2020/03/18 22:33:02 Segment &{AppConfig 9 map[]}
2020/03/18 22:33:02 Segment &{ class 1 map[]}
2020/03/18 22:33:02 Segment &{Scope 1 map[]}
2020/03/18 22:33:02 Segment &{using scope: 1 map[]}
2020/03/18 22:33:02 Segment &{or if using ApplicationContext.xml: 1 map[]}
2020/03/18 22:33:02 Segment &{singleton 1 map[]}
2020/03/18 22:33:02 Segment &{“singleton” 1 map[]}
2020/03/18 22:33:02 Segment &{“singleton” 1 map[]}
2020/03/18 22:33:02 Segment &{ConfigurableBeanFactory.SCOPE_SINGLETON 9 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ensures the bean in reused throughout the spring context 1 map[]}
2020/03/18 22:33:02 Segment &{prototype 1 map[]}
2020/03/18 22:33:02 Segment &{“prototype” 1 map[]}
2020/03/18 22:33:02 Segment &{“prototype” 1 map[]}
2020/03/18 22:33:02 Segment &{ConfigurableBeanFactory.SCOPE_PROTOTYPE 9 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{Opposite of a singleton, ensures each instance is unique 1 map[]}
2020/03/18 22:33:02 Segment &{request 1 map[]}
2020/03/18 22:33:02 Segment &{“request” 1 map[]}
2020/03/18 22:33:02 Segment &{“request” 1 map[]}
2020/03/18 22:33:02 Segment &{Lives per HTTP(S) request 1 map[]}
2020/03/18 22:33:02 Segment &{session 1 map[]}
2020/03/18 22:33:02 Segment &{“session” 1 map[]}
2020/03/18 22:33:02 Segment &{“session” 1 map[]}
2020/03/18 22:33:02 Segment &{Lives per session 1 map[]}
2020/03/18 22:33:02 Segment &{global session 1 map[]}
2020/03/18 22:33:02 Segment &{Lives throughout application 1 map[]}
2020/03/18 22:33:02 Segment &{Properties 1 map[]}
2020/03/18 22:33:02 Segment &{in XML config (requires sprint-context namespace): 1 map[]}
2020/03/18 22:33:02 Segment &{or in AppConfig: 1 map[]}
2020/03/18 22:33:02 Segment &{Annotate the value 1 map[]}
2020/03/18 22:33:02 Segment &{in  1 map[]}
2020/03/18 22:33:02 Segment &{resources/my.properties 9 map[]}
2020/03/18 22:33:02 <h1>Sprite Kit</h1>

<h2>UIViewController</h2>

<p>Present an SKScene</p>

<pre><code class="language-swift">override func viewDidLoad() {
  super.viewDidLoad
  if let view = self.view as! SKView? {
    let scene = MySKScene(size: CGSize(width: 1538, height: 2048))
    // do scene things here
    view.presentScene(scene)
  }
}
</code></pre>

<h2>SKScene</h2>

<pre><code class="language-swift">// entry point
override func didMove(to view: SKView) {}

// touches began
override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) {}
</code></pre>
2020/03/18 22:33:02 Segment &{Sprite Kit 1 map[]}
2020/03/18 22:33:02 Segment &{UIViewController 1 map[]}
2020/03/18 22:33:02 Segment &{Present an SKScene 1 map[]}
2020/03/18 22:33:02 Segment &{SKScene 1 map[]}
2020/03/18 22:33:02 <h1>ssh</h1>

<h2>ec2 logon</h2>

<p><a href="https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances">confluence page</a></p>

<h3>setup</h3>

<p>Navigate to your component page - e.g. <a href="https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service">https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service</a>
Find the environment you want to access, and click &ldquo;Running Instances&rdquo;
A list of instances running this component in this environment is now shown. Click the icon in the &ldquo;ssh access&rdquo; column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to <a href="https://admin.live.bbc.co.uk/cosmos">cosmos</a> and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance</p>

<p>To logon:</p>

<pre><code class="language-ss">
$ ssh &lt;10.0.121.10&gt;,eu-west-1

</code></pre>

<p>To end:</p>

<pre><code class="language-ss">
$ exit

</code></pre>

<h2>generate</h2>

<p>From the command line:</p>

<pre><code class="language-ss">
$ ssh-keygen -t rsa -b 2048

</code></pre>

<p>You&rsquo;ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine.</p>

<p>Next you&rsquo;ll be prompted twice for a passphrase – we strongly recommend setting one.</p>

<h2>view</h2>

<p>view key fingerprint:</p>

<pre><code class="language-ss">
$ ssh-keygen -lf /path/to/ssh/key
# or to get the aa:bb:cc... format
$ ssh-keygen -E md5 -lf /path/to/ssh/key

</code></pre>

<h2>scp</h2>

<p>upload:</p>

<pre><code class="language-ss">
$ scp &lt;local_file&gt; &lt;remote-host&gt;:&lt;remote-location&gt;

</code></pre>

<p>download:</p>

<pre><code class="language-ss">
$ scp &lt;remote-host&gt;:&lt;remote-file&gt; &lt;local-directory&gt;

# or a whole directory
$ scp -r &lt;remote-host&gt;:&lt;remote-directory&gt; &lt;local-directory&gt;

</code></pre>

<h2>Keys</h2>

<p>I&rsquo;ve created a new key <code>id2_rsa</code> for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key?</p>
2020/03/18 22:33:02 Segment &{ssh 1 map[]}
2020/03/18 22:33:02 Segment &{ec2 logon 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances}]. raw = 'confluence page'
2020/03/18 22:33:02 Segment &{confluence page 17 map[href:https://confluence.dev.bbc.co.uk/display/platform/Getting+SSH+Access+to+EC2+Instances]}
2020/03/18 22:33:02 Segment &{setup 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service}]. raw = 'https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service'
2020/03/18 22:33:02 >>>>> atts = [{ href https://admin.live.bbc.co.uk/cosmos}]. raw = 'cosmos'
2020/03/18 22:33:02 Segment &{Navigate to your component page - e.g.  1 map[]}
2020/03/18 22:33:02 Segment &{https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service 17 map[href:https://admin.live.bbc.co.uk/cosmos/component/cosmos-test-java-service]}
2020/03/18 22:33:02 Segment &{
Find the environment you want to access, and click “Running Instances”
A list of instances running this component in this environment is now shown. Click the icon in the “ssh access” column for whichever instance you wish to access.
Wait for the button icon to be replaced by a tick (refreshing will not break the request)
Note your username: go to  1 map[]}
2020/03/18 22:33:02 Segment &{cosmos 17 map[href:https://admin.live.bbc.co.uk/cosmos]}
2020/03/18 22:33:02 Segment &{ and click on your email address on the right of the blue bar at the top; your username will be visible on the next page
Note the Private IP address of the chosen instance 1 map[]}
2020/03/18 22:33:02 Segment &{To logon: 1 map[]}
2020/03/18 22:33:02 Segment &{To end: 1 map[]}
2020/03/18 22:33:02 Segment &{generate 1 map[]}
2020/03/18 22:33:02 Segment &{From the command line: 1 map[]}
2020/03/18 22:33:02 Segment &{You’ll be prompted for a location to save the private key (the public key will be saved alongside it with a .pub extension), defaulting to .ssh/id_rsa in your home directory.  Unless you already have other keys the default location should be fine. 1 map[]}
2020/03/18 22:33:02 Segment &{Next you’ll be prompted twice for a passphrase – we strongly recommend setting one. 1 map[]}
2020/03/18 22:33:02 Segment &{view 1 map[]}
2020/03/18 22:33:02 Segment &{view key fingerprint: 1 map[]}
2020/03/18 22:33:02 Segment &{scp 1 map[]}
2020/03/18 22:33:02 Segment &{upload: 1 map[]}
2020/03/18 22:33:02 Segment &{download: 1 map[]}
2020/03/18 22:33:02 Segment &{Keys 1 map[]}
2020/03/18 22:33:02 Segment &{I’ve created a new key  1 map[]}
2020/03/18 22:33:02 Segment &{id2_rsa 9 map[]}
2020/03/18 22:33:02 Segment &{ for my other email (thom.gray). This is being used in cosmos and anywhere else except git. Perhaps clean up old keys and have all services using the same key? 1 map[]}
2020/03/18 22:33:02 <h1>svn</h1>

<p><a href="http://svnbook.red-bean.com/en/1.7/index.html">http://svnbook.red-bean.com/en/1.7/index.html</a></p>

<h2>propset</h2>

<p>You need to do this in order to make a file executable in svn after adding</p>

<pre><code class="language-sh">svn propset svn:executable ON &lt;path/to/file&gt;
</code></pre>

<h2>revert</h2>

<pre><code class="language-sh">svn revert &lt;file&gt;
</code></pre>

<h2>delete</h2>

<pre><code class="language-sh">svn delete &lt;file&gt;
</code></pre>

<h2>mkdir</h2>

<p>to make and add a directory to svn</p>

<pre><code>svn mkdir dir
svn mkdir --parents relative/path
</code></pre>
2020/03/18 22:33:02 Segment &{svn 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://svnbook.red-bean.com/en/1.7/index.html}]. raw = 'http://svnbook.red-bean.com/en/1.7/index.html'
2020/03/18 22:33:02 Segment &{http://svnbook.red-bean.com/en/1.7/index.html 17 map[href:http://svnbook.red-bean.com/en/1.7/index.html]}
2020/03/18 22:33:02 Segment &{propset 1 map[]}
2020/03/18 22:33:02 Segment &{You need to do this in order to make a file executable in svn after adding 1 map[]}
2020/03/18 22:33:02 Segment &{revert 1 map[]}
2020/03/18 22:33:02 Segment &{delete 1 map[]}
2020/03/18 22:33:02 Segment &{mkdir 1 map[]}
2020/03/18 22:33:02 Segment &{to make and add a directory to svn 1 map[]}
2020/03/18 22:33:02 <h1>systemd</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units</a></li>
</ul>

<h2>journalctl</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs">https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</a></p>

<pre><code class="language-sh"># shot all systemd logs
journalctl
# list boots
journalctl --list-boots
# from a date
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot;
journalctl --since &quot;YYYY-MM-DD HH:MM:SS&quot; --until &quot;2015-01-11 03:00&quot;
journalctl --since yesterday
journalctl --since 09:00 --until &quot;1 hour ago&quot;

# by service
journalctl -u nginx.service

# show kernel messages
journalctl -k

# log to stdout (rather than in more)
journalctl --no-pager &lt;...&gt;
# truncate output
journalctl --no-full &lt;...&gt;
# show all into
journalctl -a &lt;...&gt;


## output format

journalctl &lt;..&gt; -o json
journalctl &lt;..&gt; -o json-pretty


#most recent
journalctl -n # 10 default
journalctl -n 20
# follow
journalctl -f
</code></pre>
2020/03/18 22:33:02 Segment &{systemd 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units'
2020/03/18 22:33:02 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{journalctl 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs}]. raw = 'https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs'
2020/03/18 22:33:02 Segment &{https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs 17 map[href:https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs]}
2020/03/18 22:33:02 <h1>tar</h1>

<h2>create</h2>

<pre><code class="language-sh">tar -cvzf &lt;tarname&gt;.tar.gz &lt;file(s)&gt;
</code></pre>

<h2>unzip</h2>

<pre><code class="language-sh">tar -xzvf &lt;tarfile&gt;.tar.gz
</code></pre>

<h2>list files in tar</h2>

<pre><code class="language-sh">tar -tf tarfile.tar.gz
</code></pre>
2020/03/18 22:33:02 Segment &{tar 1 map[]}
2020/03/18 22:33:02 Segment &{create 1 map[]}
2020/03/18 22:33:02 Segment &{unzip 1 map[]}
2020/03/18 22:33:02 Segment &{list files in tar 1 map[]}
2020/03/18 22:33:02 <h1>tcp/ip</h1>

<p>Transmission Control Protocol / Internet Protocol.</p>

<p>The basic protocol for communication over the Internet.</p>

<h2>Protocols</h2>

<p>A protocol is a set of rules/procedures used for communication (e.g. over a network)</p>

<p>A <strong>protocol stack</strong> is a set of protocols that make up a protocol</p>

<p>A <strong>gateway</strong> is an interface between different protocols</p>

<h3>OSI Model (Open Systems Interconnection)</h3>

<p>defines the basic standards for network communication</p>

<p>Made of 7 layers</p>

<ol>
<li>Application: network API&rsquo;s</li>
<li>Presentation: formatting</li>
<li>Session: synchronisation</li>
<li>Transport: packet management</li>
<li>Network: addressing/routing</li>
<li>Data Link: data frames (like an envelope)</li>
<li>Physical: hardware</li>
</ol>

<p>Mnemonic: &lsquo;All People Seem To Need Data Processing&rsquo;</p>

<p>Data is sent down through the OSI model and received up (i.e. in reverse order)</p>

<p>Each layer adds a piece of &lsquo;header&rsquo; information (the Datalink add a &lsquo;trailer&rsquo; as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer).</p>

<h2>Architecture</h2>

<p>Based on the 4 layer <em>DARPA</em> model. Each layer corresponds to one or more layers of the OSI model.</p>

<p>Each layer combines to form the protocol stack or <em>tcp/ip protocol suite</em>.</p>

<h3>DARPA Model</h3>

<ol>
<li>Application: (OSI) Application, Presentation, Session</li>
<li>Transport: (OSI) Transport</li>
<li>Internet: (OSI) Network</li>
<li>Network: (OSI) Data Link, Physical</li>
</ol>

<p>Each layer has different protocols that make up the suite.</p>

<ol>
<li>Application: HTTP, FTP, SMTP, DNS, RIP, SNMP, etc.</li>
<li>Transport: TCP, UDP</li>
<li>Internet: IP, ARP, ICMP, IGMP</li>
<li>Network: Ethernet, Token Ring (low-level protocols - more about the physical makeup of the network)</li>
</ol>

<p>Of interest are the middle ones:</p>

<ul>
<li>TCP (Transmission Control Protocol)

<ul>
<li>one to one</li>
<li>connection oriented (connection must be established first - uses 3 way handshake)</li>
<li>reliable (acknowledgement of receipt)</li>
</ul></li>
<li>UDP (User Data Protocol)

<ul>
<li>connectionless</li>
<li>unreliable communication (no acknowledgement - like sending a letter)</li>
<li>e.g. audio streaming - just pumping it out</li>
</ul></li>
<li>IP (Internet Protocol)

<ul>
<li>addressing</li>
<li>routing</li>
</ul></li>
<li>ARC (Address Resolution Protocol)

<ul>
<li>resolves an IP to a hardware address</li>
</ul></li>
<li>ICMP (Internet Control Message Protocol)

<ul>
<li>diagnostic and error reporting (tries to send a message back to the sender when something goes wrong)</li>
<li>like a return-to-sender protocol for physical mail</li>
</ul></li>
<li>IGMP (Internet Group Management Protocol)

<ul>
<li>manages IP multicast group membership.</li>
</ul></li>
</ul>

<h4>Three way handshake</h4>

<ol>
<li>Hi, I would like to communicate</li>
<li>Thanks, here is some info you will need to communicate with me</li>
<li>Ok, lets start taking&hellip;</li>
</ol>

<h4>Types of TCP/IP communication</h4>

<ul>
<li>Unicast: one to one. Sender taking direct to recipient</li>
<li>Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group)</li>
<li>Broadcast: one to all. Sends to everyone</li>
<li>Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed.</li>
</ul>

<h2>IP Addresses</h2>

<p>IP address is a 32 bit address used to uniquely identify a computer on a network.</p>

<p>The network ID portion identifies the network the computer is on</p>

<p>The host ID portion uniquely identifies the computer on the network.</p>

<p>The <strong>subnet mask</strong> determines which portion of the id is the network id and which is the host id.
This is an id beginning in <code>255</code> and ending in <code>0</code>. <code>255</code> indicates the network portions and <code>0</code> indicates host portion.</p>

<p>e.g.</p>

<p>IP address =<code>192.168.10.1</code>
Subnet mask = <code>255.255.255.0</code></p>

<p>So first 3 portions are network id (<code>192.168.10</code>) and final portion is host id (<code>1</code>)</p>

<p>to see ip info</p>

<pre><code class="language-sh">ifconfig
</code></pre>

<p>test a connection with ping:</p>

<pre><code class="language-sh">ping 192.168.0.255
</code></pre>

<p>it sends an <em>echo request</em> to a computer which sends a reply if a connection is established (<code>man ping</code>)</p>

<h3>Rules</h3>

<p>Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255.</p>

<p>The first portion cannot be 127 as this range is reserved for diagnostics. Including <code>127.0.0.1</code>, i.e. localhost.</p>

<p>The Host Id can&rsquo;t be all 0&rsquo;s or all 255&rsquo;s. This is because all 0&rsquo;s represents the network id, and all 255&rsquo;s represents the broadcast address.</p>

<h3>Classes</h3>

<p>Originally IPs were divided into classes:</p>

<table>
<thead>
<tr>
<th>Class</th>
<th>First portion</th>
<th>Subnet mask</th>
</tr>
</thead>

<tbody>
<tr>
<td>A</td>
<td>1-125</td>
<td>255.0.0.0</td>
</tr>

<tr>
<td>B</td>
<td>128-191</td>
<td>255.255.0.0</td>
</tr>

<tr>
<td>C</td>
<td>192-223</td>
<td>255.255.255.0</td>
</tr>

<tr>
<td>D</td>
<td>225-239</td>
<td>Multicast</td>
</tr>

<tr>
<td>E</td>
<td>240-243</td>
<td>Experimental</td>
</tr>
</tbody>
</table>
<p>You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only.</p>

<p>Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available.</p>

<h3>Private IP addresses</h3>

<p>There are some private IP addresses reserved from public internet use:</p>

<ul>
<li>10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class)</li>
<li>172.16.0.0 - 172.31.255.255 (B class)</li>
<li>192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class)</li>
<li>169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing)</li>
</ul>

<p>Hosts that have these IP addresses assigned can get to the internet with the aid of <strong>Network Address Translation</strong> (NAT).</p>

<p>Most companies today use these private ip addresses.</p>

<h3>Network Address Translation (NAT)</h3>

<p>A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses.</p>

<h2>Internetworking</h2>

<p>A <strong>router</strong> is a device that allows communication between networks.</p>

<p>Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a <strong>router</strong>. This is <strong>internetworking</strong>.</p>

<p>A <strong>default gateway</strong> is the IP address of the router used by a computer to communicate outside of its network.</p>

<p>The default gateway must always exist on the same network used by the computer (otherwise it couldn&rsquo;t communicate with it).</p>

<p>A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device.</p>

<p><strong>Subnetting</strong> is the process of dividing a large network into smaller networks to improve efficiency and manageability.</p>

<p>e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts:</p>

<ol>
<li>subnet1: 172.16.1.0 (255.255.255.0)</li>
<li>subnet2: 172.16.2.0 (255.255.255.0)</li>
<li>subnet3: 172.16.3.0 (255.255.255.0)</li>
</ol>

<h2>Classless Interdomain Routing (CIDR)</h2>

<p>Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts.</p>

<p>Solution is to use <strong>classless interdomain routing</strong> (CIDR) with <strong>variable length subnet masks</strong> (VLSM).</p>

<p>With VLSN we can specify a subnet mask with a value &lt; 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000</p>

<p>This way you can define a number of <strong>subnets</strong>.</p>

<p>e.g. <code>11111111.11111111.11111000.00000000</code> will give you 32 possible subnets each capable of 2046 hosts.</p>

<p>Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0&hellip; and 1&hellip; for network id and broadcast id respectively).</p>

<p>Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use <strong>CIDR notation</strong> to make things more clear.</p>

<p>e.g. <code>192.168.10.1</code> with subnet mask <code>255.255.255.248</code> can be better read as <code>192.168.10.1/29</code>. The segment after the <code>/</code> indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks!</p>

<h2>IPv6</h2>

<p>IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional</p>

<p>with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required</p>

<p>IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
<code>FE80:0000:0000:0000:05EE:00FF:0238:47B1</code></p>

<p>You can also suppress the leading 0&rsquo;s: <code>FE80:0:0:0:5EE:FF:238:47B1</code></p>

<p>Also can chop of an all <code>0</code>s block with double <code>::</code>, ie: <code>FE80::5EE:FF:238:47B1</code></p>

<p>3 different types of addresses:</p>

<ol>
<li>Unicast (one to one)

<ul>
<li>global address (public)</li>
<li>link-local address (always starts with <code>FE80</code>)</li>
<li>unique (like old private addresses - always starts with <code>FC</code> or <code>FD</code>)</li>
</ul></li>
<li>Multicast (one to many)</li>
<li>Anycast (one to one of many)</li>
</ol>
2020/03/18 22:33:02 Segment &{tcp/ip 1 map[]}
2020/03/18 22:33:02 Segment &{Transmission Control Protocol / Internet Protocol. 1 map[]}
2020/03/18 22:33:02 Segment &{The basic protocol for communication over the Internet. 1 map[]}
2020/03/18 22:33:02 Segment &{Protocols 1 map[]}
2020/03/18 22:33:02 Segment &{A protocol is a set of rules/procedures used for communication (e.g. over a network) 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{protocol stack 5 map[]}
2020/03/18 22:33:02 Segment &{ is a set of protocols that make up a protocol 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{gateway 5 map[]}
2020/03/18 22:33:02 Segment &{ is an interface between different protocols 1 map[]}
2020/03/18 22:33:02 Segment &{OSI Model (Open Systems Interconnection) 1 map[]}
2020/03/18 22:33:02 Segment &{defines the basic standards for network communication 1 map[]}
2020/03/18 22:33:02 Segment &{Made of 7 layers 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Mnemonic: ‘All People Seem To Need Data Processing’ 1 map[]}
2020/03/18 22:33:02 Segment &{Data is sent down through the OSI model and received up (i.e. in reverse order) 1 map[]}
2020/03/18 22:33:02 Segment &{Each layer adds a piece of ‘header’ information (the Datalink add a ‘trailer’ as well) for the corresponding receiving layer. On receiving, each layer strips off each header (or trailer). 1 map[]}
2020/03/18 22:33:02 Segment &{Architecture 1 map[]}
2020/03/18 22:33:02 Segment &{Based on the 4 layer  1 map[]}
2020/03/18 22:33:02 Segment &{DARPA 3 map[]}
2020/03/18 22:33:02 Segment &{ model. Each layer corresponds to one or more layers of the OSI model. 1 map[]}
2020/03/18 22:33:02 Segment &{Each layer combines to form the protocol stack or  1 map[]}
2020/03/18 22:33:02 Segment &{tcp/ip protocol suite 3 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{DARPA Model 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Each layer has different protocols that make up the suite. 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Of interest are the middle ones: 1 map[]}
2020/03/18 22:33:02 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{one to one 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{TCP (Transmission Control Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{one to one 1 map[]}
2020/03/18 22:33:02 Segment &{one to one 1 map[]}
2020/03/18 22:33:02 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:33:02 Segment &{connection oriented (connection must be established first - uses 3 way handshake) 1 map[]}
2020/03/18 22:33:02 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:33:02 Segment &{reliable (acknowledgement of receipt) 1 map[]}
2020/03/18 22:33:02 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{connectionless 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{UDP (User Data Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{connectionless 1 map[]}
2020/03/18 22:33:02 Segment &{connectionless 1 map[]}
2020/03/18 22:33:02 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:33:02 Segment &{unreliable communication (no acknowledgement - like sending a letter) 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. audio streaming - just pumping it out 1 map[]}
2020/03/18 22:33:02 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{addressing 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{routing 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{IP (Internet Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{addressing 1 map[]}
2020/03/18 22:33:02 Segment &{addressing 1 map[]}
2020/03/18 22:33:02 Segment &{routing 1 map[]}
2020/03/18 22:33:02 Segment &{routing 1 map[]}
2020/03/18 22:33:02 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{ARC (Address Resolution Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:33:02 Segment &{resolves an IP to a hardware address 1 map[]}
2020/03/18 22:33:02 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{ICMP (Internet Control Message Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:33:02 Segment &{diagnostic and error reporting (tries to send a message back to the sender when something goes wrong) 1 map[]}
2020/03/18 22:33:02 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:33:02 Segment &{like a return-to-sender protocol for physical mail 1 map[]}
2020/03/18 22:33:02 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{IGMP (Internet Group Management Protocol)

 1 map[]}
2020/03/18 22:33:02 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:33:02 Segment &{manages IP multicast group membership. 1 map[]}
2020/03/18 22:33:02 Segment &{Three way handshake 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Types of TCP/IP communication 1 map[]}
2020/03/18 22:33:02 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:33:02 Segment &{Unicast: one to one. Sender taking direct to recipient 1 map[]}
2020/03/18 22:33:02 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:33:02 Segment &{Multicast: one to many. Sends to anyone subscribed to a multicast address (multicast group) 1 map[]}
2020/03/18 22:33:02 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:33:02 Segment &{Broadcast: one to all. Sends to everyone 1 map[]}
2020/03/18 22:33:02 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:33:02 Segment &{Anycast: IPv6 only - one to one of many. Like a multicast, but it is only delivered to the closest computer subscribed. 1 map[]}
2020/03/18 22:33:02 Segment &{IP Addresses 1 map[]}
2020/03/18 22:33:02 Segment &{IP address is a 32 bit address used to uniquely identify a computer on a network. 1 map[]}
2020/03/18 22:33:02 Segment &{The network ID portion identifies the network the computer is on 1 map[]}
2020/03/18 22:33:02 Segment &{The host ID portion uniquely identifies the computer on the network. 1 map[]}
2020/03/18 22:33:02 Segment &{The  1 map[]}
2020/03/18 22:33:02 Segment &{subnet mask 5 map[]}
2020/03/18 22:33:02 Segment &{ determines which portion of the id is the network id and which is the host id.
This is an id beginning in  1 map[]}
2020/03/18 22:33:02 Segment &{255 9 map[]}
2020/03/18 22:33:02 Segment &{ and ending in  1 map[]}
2020/03/18 22:33:02 Segment &{0 9 map[]}
2020/03/18 22:33:02 Segment &{.  1 map[]}
2020/03/18 22:33:02 Segment &{255 9 map[]}
2020/03/18 22:33:02 Segment &{ indicates the network portions and  1 map[]}
2020/03/18 22:33:02 Segment &{0 9 map[]}
2020/03/18 22:33:02 Segment &{ indicates host portion. 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. 1 map[]}
2020/03/18 22:33:02 Segment &{IP address = 1 map[]}
2020/03/18 22:33:02 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:33:02 Segment &{
Subnet mask =  1 map[]}
2020/03/18 22:33:02 Segment &{255.255.255.0 9 map[]}
2020/03/18 22:33:02 Segment &{So first 3 portions are network id ( 1 map[]}
2020/03/18 22:33:02 Segment &{192.168.10 9 map[]}
2020/03/18 22:33:02 Segment &{) and final portion is host id ( 1 map[]}
2020/03/18 22:33:02 Segment &{1 9 map[]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 Segment &{to see ip info 1 map[]}
2020/03/18 22:33:02 Segment &{test a connection with ping: 1 map[]}
2020/03/18 22:33:02 Segment &{it sends an  1 map[]}
2020/03/18 22:33:02 Segment &{echo request 3 map[]}
2020/03/18 22:33:02 Segment &{ to a computer which sends a reply if a connection is established ( 1 map[]}
2020/03/18 22:33:02 Segment &{man ping 9 map[]}
2020/03/18 22:33:02 Segment &{) 1 map[]}
2020/03/18 22:33:02 Segment &{Rules 1 map[]}
2020/03/18 22:33:02 Segment &{Each portion of an IP is an octet (8 bits) and hence must be between 0 and 255. 1 map[]}
2020/03/18 22:33:02 Segment &{The first portion cannot be 127 as this range is reserved for diagnostics. Including  1 map[]}
2020/03/18 22:33:02 Segment &{127.0.0.1 9 map[]}
2020/03/18 22:33:02 Segment &{, i.e. localhost. 1 map[]}
2020/03/18 22:33:02 Segment &{The Host Id can’t be all 0’s or all 255’s. This is because all 0’s represents the network id, and all 255’s represents the broadcast address. 1 map[]}
2020/03/18 22:33:02 Segment &{Classes 1 map[]}
2020/03/18 22:33:02 Segment &{Originally IPs were divided into classes: 1 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{You can only assign an IP address of classes A-C to a computer. The remainder are reserved for Multicast and Experimental only. 1 map[]}
2020/03/18 22:33:02 Segment &{Each class from A to C has an increasing number of networks but each with a decreasing number of hosts. In total there are just under 4 billion ip addresses available. 1 map[]}
2020/03/18 22:33:02 Segment &{Private IP addresses 1 map[]}
2020/03/18 22:33:02 Segment &{There are some private IP addresses reserved from public internet use: 1 map[]}
2020/03/18 22:33:02 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:33:02 Segment &{10.0.0.0 - 10.255.255.255 (i.e. 10.anything A-class) 1 map[]}
2020/03/18 22:33:02 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:33:02 Segment &{172.16.0.0 - 172.31.255.255 (B class) 1 map[]}
2020/03/18 22:33:02 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:33:02 Segment &{192.168.0.0 - 192.168.255.255 (i.e. 192.168.anything C class) 1 map[]}
2020/03/18 22:33:02 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:33:02 Segment &{169.254.0.0 - 169.254.255.255 (reserved for automatic private ip addressing) 1 map[]}
2020/03/18 22:33:02 Segment &{Hosts that have these IP addresses assigned can get to the internet with the aid of  1 map[]}
2020/03/18 22:33:02 Segment &{Network Address Translation 5 map[]}
2020/03/18 22:33:02 Segment &{ (NAT). 1 map[]}
2020/03/18 22:33:02 Segment &{Most companies today use these private ip addresses. 1 map[]}
2020/03/18 22:33:02 Segment &{Network Address Translation (NAT) 1 map[]}
2020/03/18 22:33:02 Segment &{A server that private machines are connected to that proxy requests and responses. This helps for security and the reduces the need for lots of IP addresses. 1 map[]}
2020/03/18 22:33:02 Segment &{Internetworking 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{router 5 map[]}
2020/03/18 22:33:02 Segment &{ is a device that allows communication between networks. 1 map[]}
2020/03/18 22:33:02 Segment &{Computers can only communicate with other computers on the same network. The only way for a computer to communicate with another computer outside the network is through a  1 map[]}
2020/03/18 22:33:02 Segment &{router 5 map[]}
2020/03/18 22:33:02 Segment &{. This is  1 map[]}
2020/03/18 22:33:02 Segment &{internetworking 5 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{A  1 map[]}
2020/03/18 22:33:02 Segment &{default gateway 5 map[]}
2020/03/18 22:33:02 Segment &{ is the IP address of the router used by a computer to communicate outside of its network. 1 map[]}
2020/03/18 22:33:02 Segment &{The default gateway must always exist on the same network used by the computer (otherwise it couldn’t communicate with it). 1 map[]}
2020/03/18 22:33:02 Segment &{A router and a default gateway are effectively the same thing, only the router is the physical device, and the default gateway is the ip address of the device. 1 map[]}
2020/03/18 22:33:02 Segment &{Subnetting 5 map[]}
2020/03/18 22:33:02 Segment &{ is the process of dividing a large network into smaller networks to improve efficiency and manageability. 1 map[]}
2020/03/18 22:33:02 Segment &{e.g. given a network 172.16.0.0 with subnet mask 255.255.0.0, we can create sub networks by shifting the network portion of the network mask to the right, each capable of managing 254 hosts: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Classless Interdomain Routing (CIDR) 1 map[]}
2020/03/18 22:33:02 Segment &{Classful ip addressing can be problematic. Remember there are mainly classes A, B and C, each capable of hosting ~17,000, ~65,000 and 254 respectively. But this is not ideal if you need to host machines in between these numbers. You either waste addresses picking a class with greater hosts, or fiddle with routing tables picking a number of classes without enough hosts. 1 map[]}
2020/03/18 22:33:02 Segment &{Solution is to use  1 map[]}
2020/03/18 22:33:02 Segment &{classless interdomain routing 5 map[]}
2020/03/18 22:33:02 Segment &{ (CIDR) with  1 map[]}
2020/03/18 22:33:02 Segment &{variable length subnet masks 5 map[]}
2020/03/18 22:33:02 Segment &{ (VLSM). 1 map[]}
2020/03/18 22:33:02 Segment &{With VLSN we can specify a subnet mask with a value < 255 to indicate that the network portion of the ip address ends before the end of the portion. This depends on the binary form of the number:
- 255: 11111111
- 254: 11111110
- 252: 11111100
- 248: 11111000
- 240: 11110000
- 224: 11100000
- 192: 11000000
- 128: 10000000 1 map[]}
2020/03/18 22:33:02 Segment &{This way you can define a number of  1 map[]}
2020/03/18 22:33:02 Segment &{subnets 5 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 Segment &{e.g.  1 map[]}
2020/03/18 22:33:02 Segment &{11111111.11111111.11111000.00000000 9 map[]}
2020/03/18 22:33:02 Segment &{ will give you 32 possible subnets each capable of 2046 hosts. 1 map[]}
2020/03/18 22:33:02 Segment &{Remember those hosts would need to be on the same network (i.e. subnet) as the router, and there are still 2 host ids that are off limits (0… and 1… for network id and broadcast id respectively). 1 map[]}
2020/03/18 22:33:02 Segment &{Subnet masks and IP addresses are difficult to make sense of in decimal when using CIDR. Hence often we use  1 map[]}
2020/03/18 22:33:02 Segment &{CIDR notation 5 map[]}
2020/03/18 22:33:02 Segment &{ to make things more clear. 1 map[]}
2020/03/18 22:33:02 Segment &{e.g.  1 map[]}
2020/03/18 22:33:02 Segment &{192.168.10.1 9 map[]}
2020/03/18 22:33:02 Segment &{ with subnet mask  1 map[]}
2020/03/18 22:33:02 Segment &{255.255.255.248 9 map[]}
2020/03/18 22:33:02 Segment &{ can be better read as  1 map[]}
2020/03/18 22:33:02 Segment &{192.168.10.1/29 9 map[]}
2020/03/18 22:33:02 Segment &{. The segment after the  1 map[]}
2020/03/18 22:33:02 Segment &{/ 9 map[]}
2020/03/18 22:33:02 Segment &{ indicates the number of bits in the network portion of the id (total is 32 bits, this leaves 3 bits for the host portion). No faffing around with subnet masks! 1 map[]}
2020/03/18 22:33:02 Segment &{IPv6 1 map[]}
2020/03/18 22:33:02 Segment &{IP version 4 has some problems:
- not enough IP addresses available
- cluttered internet routing tables
- difficult to configure
- security was optional 1 map[]}
2020/03/18 22:33:02 Segment &{with IPv6:
- plenty of addresses: 3.4 x 10^38
- simplified routing tables
- easy/automated configuration
- security is required 1 map[]}
2020/03/18 22:33:02 Segment &{IPv6 address is 128 bits long. These are commonly divided into 8 x 16 bit hexadecimal blocks, e.g.
 1 map[]}
2020/03/18 22:33:02 Segment &{FE80:0000:0000:0000:05EE:00FF:0238:47B1 9 map[]}
2020/03/18 22:33:02 Segment &{You can also suppress the leading 0’s:  1 map[]}
2020/03/18 22:33:02 Segment &{FE80:0:0:0:5EE:FF:238:47B1 9 map[]}
2020/03/18 22:33:02 Segment &{Also can chop of an all  1 map[]}
2020/03/18 22:33:02 Segment &{0 9 map[]}
2020/03/18 22:33:02 Segment &{s block with double  1 map[]}
2020/03/18 22:33:02 Segment &{:: 9 map[]}
2020/03/18 22:33:02 Segment &{, ie:  1 map[]}
2020/03/18 22:33:02 Segment &{FE80::5EE:FF:238:47B1 9 map[]}
2020/03/18 22:33:02 Segment &{3 different types of addresses: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 <h1>todo</h1>

<h2>lookup</h2>

<ul>
<li>[ ] conway&rsquo;s law</li>
<li>[ ] murphy&rsquo;s law</li>
<li>[ ] zsh</li>
<li>[ ] linked data and semantic web - schema.org</li>
<li>[ ] hungarian notation</li>
<li>[ ] john reisig&rsquo;s class- see <a href="http://ejohn.org/blog/simple-class-instantiation/">his blog</a></li>
</ul>

<h2>projects</h2>

<ul>
<li>[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations</li>
</ul>

<h2>logic</h2>

<ul>
<li>[ ] do a thing</li>
</ul>

<h2>note-worthy</h2>

<ul>
<li>[ ] allow for a config file that colour-codes the markdown.<br />
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

<ul>
<li>[ ] have a config file in there</li>
</ul></li>
<li>[ ] allow tags to be declared in a separate file, but stitched on to another tag!</li>
<li>[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn&rsquo;t find the tag, but a list of search paths

<ul>
<li>[ ] allow option to search any matching</li>
</ul></li>
<li>[ ] add a left margin</li>
<li>[ ] add a help option <code>:help | :h</code> that loads an md readme note stored in the bundle resources</li>
<li>[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

<ul>
<li>[ ] use headers to identify tag sections</li>
<li>[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading</li>
<li>[ ] allow users to specify an alas to a file (in md) so that searching can work.</li>
</ul></li>
</ul>

<h3>headers as tags</h3>

<ul>
<li>[ ] when we come accross a &lsquo;#&rsquo; where the tier is less than the pending, it chops the file short

<ul>
<li>[ ] it should recognise a &lsquo;#&rsquo; in a code block or indented as a non header. scattering &lsquo;#&rsquo; about causes bugs!</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[x] some tags don&rsquo;t open even if they are seen, for example &ldquo;Troubleshoot&rdquo; inner tags (and troubleshoot itself when autocomplete!)

<ul>
<li>it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!!</li>
<li>not upper case tags won&rsquo;t open at all, (although the autocompleter will find them)</li>
</ul></li>
<li>[ ] fix bug that throws an exception when calling &ldquo;+&rdquo; i.e. without anything after the &ldquo;+&rdquo;</li>
<li>[ ] tput reset to clear the screen doesn&rsquo;t clear everything always, e.g. java jar, then something else! investigate!

<ul>
<li>looks like it&rsquo;s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely!</li>
</ul></li>
<li>[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that!</li>
<li>[ ] tidy format for notes without a body, there&rsquo;s a little too much whitespace</li>
<li>[ ] &lsquo;lazy&rsquo; in scala is not being coloured</li>
<li>[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code!</li>
<li>[ ] only distinct urls should be listed</li>
<li>[ ] autocomplete fails when blank documents are in the path</li>
<li>[ ] markdown formatting cannot concatenate in places:

<ul>
<li>[ ] headers with bold? shouldn&rsquo;t really work anyway, but at least remove the underlines!</li>
</ul></li>
<li>[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

<ul>
<li>it seems the correct way around this is to ensure brackets are balanced (that&rsquo;s how it works on github)</li>
</ul></li>
</ul>

<h2>markdown [md]</h2>

<ul>
<li>[ ] add the ---- and ===== rules for underlining headers</li>
<li>[ ] code colouring!

<ul>
<li>[ ] sh</li>
<li>[ ] json</li>
<li>[ ] scala</li>
<li>[ ] php</li>
<li>global should be protected</li>
</ul></li>
<li>[x] enable rule injection into the renderer</li>
<li>parsing rules:

<ul>
<li>[ ] tables</li>
</ul></li>
<li>rendering rules:

<ul>
<li>[ ] tables</li>
</ul></li>
</ul>

<h3>bugs</h3>

<ul>
<li>[ ] sometimes empty lines are removed from code (always near the top after an import statement)</li>
<li>[ ] attributed strings aren&rsquo;t overriding formats as expected</li>
</ul>

<h2>cppbt</h2>

<ul>
<li>parameterisations:

<ul>
<li>[ ] run with args</li>
<li>[ ] build with target path</li>
<li>[ ] test specific features/suites (check the UnitTest++ docs for how this works)</li>
</ul></li>
</ul>

<h2>subnets</h2>

<ul>
<li>[ ] cloud formation subnets</li>
<li>[ ] nats: something to do with aws clouds</li>
</ul>
2020/03/18 22:33:02 Segment &{todo 1 map[]}
2020/03/18 22:33:02 Segment &{lookup 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] conway’s law 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] murphy’s law 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] zsh 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] linked data and semantic web - schema.org 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] hungarian notation 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://ejohn.org/blog/simple-class-instantiation/}]. raw = 'his blog'
2020/03/18 22:33:02 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:33:02 Segment &{his blog 17 map[href:http://ejohn.org/blog/simple-class-instantiation/]}
2020/03/18 22:33:02 Segment &{[ ] john reisig’s class- see  1 map[]}
2020/03/18 22:33:02 Whaaat? a
2020/03/18 22:33:02 Segment &{projects 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tool that checks cucumber implementation files and feature files and flags unused step implemtations 1 map[]}
2020/03/18 22:33:02 Segment &{logic 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] do a thing 1 map[]}
2020/03/18 22:33:02 Segment &{note-worthy 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:33:02 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow for a config file that colour-codes the markdown. 1 map[]}
2020/03/18 22:33:02 Whaaat? br
2020/03/18 22:33:02 Segment &{
This can be in a .note-worthy directory, like atom? Or in the package so it can only be tweaked on the command line?

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] have a config file in there 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow tags to be declared in a separate file, but stitched on to another tag! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] definitely allow a force-search option which will find any note (independent of inheritance) given a string. this wouldn’t find the tag, but a list of search paths

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow option to search any matching 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add a left margin 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:33:02 Segment &{:help | :h 9 map[]}
2020/03/18 22:33:02 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add a help option  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ that loads an md readme note stored in the bundle resources 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] make the app fully functional without tagging. So have a different procedure for untagged files.

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] use headers to identify tag sections 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] look at the length of the body to decide whether to store the content in a tag or just displayed with the heading 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] allow users to specify an alas to a file (in md) so that searching can work. 1 map[]}
2020/03/18 22:33:02 Segment &{headers as tags 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] when we come accross a ‘#’ where the tier is less than the pending, it chops the file short

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] it should recognise a ‘#’ in a code block or indented as a non header. scattering ‘#’ about causes bugs! 1 map[]}
2020/03/18 22:33:02 Segment &{bugs 1 map[]}
2020/03/18 22:33:02 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[x] some tags don’t open even if they are seen, for example “Troubleshoot” inner tags (and troubleshoot itself when autocomplete!)

 1 map[]}
2020/03/18 22:33:02 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:33:02 Segment &{it looks like this has something to do with capitalised labels, perhaps there is case sensitivity going on!! 1 map[]}
2020/03/18 22:33:02 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:33:02 Segment &{not upper case tags won’t open at all, (although the autocompleter will find them) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] fix bug that throws an exception when calling “+” i.e. without anything after the “+” 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tput reset to clear the screen doesn’t clear everything always, e.g. java jar, then something else! investigate!

 1 map[]}
2020/03/18 22:33:02 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:33:02 Segment &{looks like it’s because the screen only clears the visible portion of the screen. So notes that span longer than the visible bit will not clear entirely! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] exceptions are thrown when invalid regexes are specified for tag labels, make sure to check that! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tidy format for notes without a body, there’s a little too much whitespace 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] ‘lazy’ in scala is not being coloured 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] inline code blocks are not obscuring urls. Probably because we look for urls before formatting code! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] only distinct urls should be listed 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] autocomplete fails when blank documents are in the path 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] markdown formatting cannot concatenate in places:

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] headers with bold? shouldn’t really work anyway, but at least remove the underlines! 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] urls chop off at the first closing bracket. But some valid URLS contain brackets!

 1 map[]}
2020/03/18 22:33:02 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:33:02 Segment &{it seems the correct way around this is to ensure brackets are balanced (that’s how it works on github) 1 map[]}
2020/03/18 22:33:02 Segment &{markdown [md] 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] add the ---- and ===== rules for underlining headers 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] sh 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] json 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] scala 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] php 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{global should be protected 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] code colouring!

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] sh 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] sh 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] json 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] json 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] scala 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] scala 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] php 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] php 1 map[]}
2020/03/18 22:33:02 Segment &{global should be protected 1 map[]}
2020/03/18 22:33:02 Segment &{global should be protected 1 map[]}
2020/03/18 22:33:02 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:33:02 Segment &{[x] enable rule injection into the renderer 1 map[]}
2020/03/18 22:33:02 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{parsing rules:

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{rendering rules:

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] tables 1 map[]}
2020/03/18 22:33:02 Segment &{bugs 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] sometimes empty lines are removed from code (always near the top after an import statement) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] attributed strings aren’t overriding formats as expected 1 map[]}
2020/03/18 22:33:02 Segment &{cppbt 1 map[]}
2020/03/18 22:33:02 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{parameterisations:

 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] run with args 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] build with target path 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] test specific features/suites (check the UnitTest++ docs for how this works) 1 map[]}
2020/03/18 22:33:02 Segment &{subnets 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] cloud formation subnets 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:33:02 Segment &{[ ] nats: something to do with aws clouds 1 map[]}
2020/03/18 22:33:02 <h1>troubleshoot</h1>

<h2>ssl</h2>

<ol>
<li>Check the trust store on the running instances are properly configured.

<ul>
<li>ssh onto the box</li>
<li>navigate to the trust store file directory, specified in the project Config (or system properties)</li>
<li>use
<code>sh
$ keytool -list -v -keystore &lt;binary_file.jks&gt;
</code>
to access the .jks trust store binary as text
2. Check the databinder dependency:
- &ldquo;net.databinder.dispatch&rdquo; %% &ldquo;dispatch-core&rdquo; % &ldquo;0.11.3&rdquo;
Consider using .1 or .2., Forge doesn&rsquo;t see, to like the latest version! aws works fine though
## jenkins
### deploychecks failure
go to: Configure &gt; Build Environment<br />
check: &lsquo;Provide Node &amp; npm bin/folder to PATH&rsquo;, set: Installation v4.3.2
## sbt
hello there
## certs
- If the sytem password has changes recently, make sure you reset the passwords stored in the keychain, as they will probably remember the old one and mess with ssl
## proxies
- proxy settings in:
- ~/.bash_profile
- ~/.ssh/config
- ~/.gitconfig
ensure theses are set properly when switching on and off Reith
## brew
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
/usr/local/etc/openssl/certs
and run
/usr/local/opt/openssl/bin/c_rehash
This formula is keg-only, which means it was not symlinked into /usr/local.
Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you&rsquo;ll need to add to your
build variables:
LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig</li>
</ul></li>
</ol>
2020/03/18 22:33:02 Segment &{troubleshoot 1 map[]}
2020/03/18 22:33:02 Segment &{ssl 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 <h1>realpath</h1>

<p>Print the resolved absolute file name; all but the last component must exist</p>

<pre><code>-e, --canonicalize-existing
       all components of the path must exist

-m, --canonicalize-missing
       no path components need exist or be a directory

-L, --logical
       resolve '..' components before symlinks

-P, --physical
       resolve symlinks as encountered (default)

-q, --quiet
       suppress most error messages

--relative-to=DIR
       print the resolved path relative to DIR

--relative-base=DIR
       print absolute paths unless paths below DIR

-s, --strip, --no-symlinks
       don't expand symlinks

-z, --zero
       end each output line with NUL, not newline

--help display this help and exit

--version
       output version information and exit
</code></pre>
2020/03/18 22:33:02 Segment &{realpath 1 map[]}
2020/03/18 22:33:02 Segment &{Print the resolved absolute file name; all but the last component must exist 1 map[]}
2020/03/18 22:33:02 <h1>Vagrant</h1>

<h2>Vagrant::Scp</h2>

<p>Copy files to a Vagrant VM via SCP.</p>

<h2>Installation</h2>

<p>You need to install the plugin, like so</p>

<pre><code>vagrant plugin install vagrant-scp
</code></pre>

<h2>Usage</h2>

<p>If you have just a single Vagrant VM, you can copy files over like this:</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; &lt;somewhere_on_the_vm&gt;
</code></pre>

<p>If you have multiple VMs, you can specify it.</p>

<pre><code>vagrant scp &lt;some_local_file_or_dir&gt; [vm_name]:&lt;somewhere_on_the_vm&gt;
</code></pre>

<p>Copying files out of the VM works in the same fashion</p>

<pre><code>vagrant scp [vm_name]:&lt;somewhere_on_the_vm&gt; &lt;some_local_file_or_dir&gt;
</code></pre>

<p>That’s it!</p>

<h2>Examples</h2>

<p>If you have just one VM, you can copy files to the VM like this:</p>

<pre><code>vagrant scp file_on_host.txt :file_on_vm.txt
</code></pre>

<p>And from the VM like this</p>

<pre><code>vagrant scp :file_on_vm.txt file_on_host.txt
</code></pre>

<h2>Vagrant version</h2>

<p>We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant <a href="https://www.vagrantup.com/downloads.html">here</a>.</p>
2020/03/18 22:33:02 Segment &{Vagrant 1 map[]}
2020/03/18 22:33:02 Segment &{Vagrant::Scp 1 map[]}
2020/03/18 22:33:02 Segment &{Copy files to a Vagrant VM via SCP. 1 map[]}
2020/03/18 22:33:02 Segment &{Installation 1 map[]}
2020/03/18 22:33:02 Segment &{You need to install the plugin, like so 1 map[]}
2020/03/18 22:33:02 Segment &{Usage 1 map[]}
2020/03/18 22:33:02 Segment &{If you have just a single Vagrant VM, you can copy files over like this: 1 map[]}
2020/03/18 22:33:02 Segment &{If you have multiple VMs, you can specify it. 1 map[]}
2020/03/18 22:33:02 Segment &{Copying files out of the VM works in the same fashion 1 map[]}
2020/03/18 22:33:02 Segment &{That’s it! 1 map[]}
2020/03/18 22:33:02 Segment &{Examples 1 map[]}
2020/03/18 22:33:02 Segment &{If you have just one VM, you can copy files to the VM like this: 1 map[]}
2020/03/18 22:33:02 Segment &{And from the VM like this 1 map[]}
2020/03/18 22:33:02 Segment &{Vagrant version 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.vagrantup.com/downloads.html}]. raw = 'here'
2020/03/18 22:33:02 Segment &{We support Vagrant 1.7+. Note that Ubuntu 14.04 LTS ships version 1.4.3. You can get the deb file with the latest Vagrant  1 map[]}
2020/03/18 22:33:02 Segment &{here 17 map[href:https://www.vagrantup.com/downloads.html]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 <h1>vim</h1>

<h2>commands</h2>

<p><a href="https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started">https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started</a></p>

<p>type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command</p>

<p>In command mode:</p>

<p><strong>Saving</strong>:
+ <code>:wq</code> - save + exit
+ <code>:q!</code> - trash all changes</p>

<p><strong>Editing</strong>:</p>

<ul>
<li><p><code>x</code> - delete</p></li>

<li><p><code>u</code> - undo</p></li>

<li><p><code>ctrl-r</code> - redo</p></li>

<li><p><code>dw</code> - move cursor to beginning of word to delete that word</p></li>

<li><p><code>2w</code> - move cursor two words forward</p></li>

<li><p><code>3e</code> - move cursor to end of the third word forward</p></li>

<li><p><code>0</code> - move to start of line</p></li>

<li><p><code>$</code> - move to end of line</p></li>

<li><p><code>e</code> - move to next word</p></li>

<li><p><code>d2w</code> - delete two words</p></li>

<li><p><code>dd</code> - delete the line</p></li>

<li><p><code>yy</code> - copy line</p></li>

<li><p><code>p</code> - paste</p></li>
</ul>

<p><strong>Modes</strong>:</p>

<ul>
<li><code>i</code> - insert in situ</li>
<li><code>a</code> - insert after cursor</li>
<li><code>A</code> - append text at end</li>
<li><code>a</code> - append text at</li>
<li><code>O</code> - insert new line above cursor</li>
<li><code>o</code> - insert new line below cursor</li>
<li><code>V</code> - visual mode</li>
</ul>
2020/03/18 22:33:02 Segment &{vim 1 map[]}
2020/03/18 22:33:02 Segment &{commands 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started}]. raw = 'https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started'
2020/03/18 22:33:02 Segment &{https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started 17 map[href:https://coderwall.com/p/adv71w/basic-vim-commands-for-getting-started]}
2020/03/18 22:33:02 Segment &{type a command :e and press ctrl+D to list all the command name starts with :e and press tab to complete the command 1 map[]}
2020/03/18 22:33:02 Segment &{In command mode: 1 map[]}
2020/03/18 22:33:02 Segment &{Saving 5 map[]}
2020/03/18 22:33:02 Segment &{:
+  1 map[]}
2020/03/18 22:33:02 Segment &{:wq 9 map[]}
2020/03/18 22:33:02 Segment &{ - save + exit
+  1 map[]}
2020/03/18 22:33:02 Segment &{:q! 9 map[]}
2020/03/18 22:33:02 Segment &{ - trash all changes 1 map[]}
2020/03/18 22:33:02 Segment &{Editing 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{x 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete 1 map[]}
2020/03/18 22:33:02 Segment &{x 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete 1 map[]}
2020/03/18 22:33:02 Segment &{u 9 map[]}
2020/03/18 22:33:02 Segment &{ - undo 1 map[]}
2020/03/18 22:33:02 Segment &{u 9 map[]}
2020/03/18 22:33:02 Segment &{ - undo 1 map[]}
2020/03/18 22:33:02 Segment &{ctrl-r 9 map[]}
2020/03/18 22:33:02 Segment &{ - redo 1 map[]}
2020/03/18 22:33:02 Segment &{ctrl-r 9 map[]}
2020/03/18 22:33:02 Segment &{ - redo 1 map[]}
2020/03/18 22:33:02 Segment &{dw 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:33:02 Segment &{dw 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor to beginning of word to delete that word 1 map[]}
2020/03/18 22:33:02 Segment &{2w 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:33:02 Segment &{2w 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor two words forward 1 map[]}
2020/03/18 22:33:02 Segment &{3e 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:33:02 Segment &{3e 9 map[]}
2020/03/18 22:33:02 Segment &{ - move cursor to end of the third word forward 1 map[]}
2020/03/18 22:33:02 Segment &{0 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:33:02 Segment &{0 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to start of line 1 map[]}
2020/03/18 22:33:02 Segment &{$ 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:33:02 Segment &{$ 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to end of line 1 map[]}
2020/03/18 22:33:02 Segment &{e 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to next word 1 map[]}
2020/03/18 22:33:02 Segment &{e 9 map[]}
2020/03/18 22:33:02 Segment &{ - move to next word 1 map[]}
2020/03/18 22:33:02 Segment &{d2w 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete two words 1 map[]}
2020/03/18 22:33:02 Segment &{d2w 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete two words 1 map[]}
2020/03/18 22:33:02 Segment &{dd 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete the line 1 map[]}
2020/03/18 22:33:02 Segment &{dd 9 map[]}
2020/03/18 22:33:02 Segment &{ - delete the line 1 map[]}
2020/03/18 22:33:02 Segment &{yy 9 map[]}
2020/03/18 22:33:02 Segment &{ - copy line 1 map[]}
2020/03/18 22:33:02 Segment &{yy 9 map[]}
2020/03/18 22:33:02 Segment &{ - copy line 1 map[]}
2020/03/18 22:33:02 Segment &{p 9 map[]}
2020/03/18 22:33:02 Segment &{ - paste 1 map[]}
2020/03/18 22:33:02 Segment &{p 9 map[]}
2020/03/18 22:33:02 Segment &{ - paste 1 map[]}
2020/03/18 22:33:02 Segment &{Modes 5 map[]}
2020/03/18 22:33:02 Segment &{: 1 map[]}
2020/03/18 22:33:02 Segment &{i 9 map[]}
2020/03/18 22:33:02 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - insert in situ 1 map[]}
2020/03/18 22:33:02 Segment &{a 9 map[]}
2020/03/18 22:33:02 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - insert after cursor 1 map[]}
2020/03/18 22:33:02 Segment &{A 9 map[]}
2020/03/18 22:33:02 Segment &{ - append text at end 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - append text at end 1 map[]}
2020/03/18 22:33:02 Segment &{a 9 map[]}
2020/03/18 22:33:02 Segment &{ - append text at 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - append text at 1 map[]}
2020/03/18 22:33:02 Segment &{O 9 map[]}
2020/03/18 22:33:02 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - insert new line above cursor 1 map[]}
2020/03/18 22:33:02 Segment &{o 9 map[]}
2020/03/18 22:33:02 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - insert new line below cursor 1 map[]}
2020/03/18 22:33:02 Segment &{V 9 map[]}
2020/03/18 22:33:02 Segment &{ - visual mode 1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{ - visual mode 1 map[]}
2020/03/18 22:33:02 <h1>yum</h1>

<h2>search</h2>

<pre><code class="language-sh">yum search &lt;package&gt;
</code></pre>

<h2>list</h2>

<pre><code class="language-sh">yum list all
yum list available
yum list installed
</code></pre>

<h2>repositories</h2>

<pre><code class="language-sh">yum repo-list
</code></pre>

<p>these can be configured by adding a file to <code>/etc/yum.repos.d/&lt;repo&gt;.repo</code> with content e.g.:</p>

<pre><code>[rms-collectd]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/rms-collectd-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem

[ibl-sysadmin]
name=RMS CollectD
mirrorlist=https://repository.api.bbci.co.uk/ibl-sysadmin-el7/revisions/head
enabled=1
gpgcheck=0
sslverify=1
sslcacert=/root/rpmbuild/docker/certs/ca.pem
sslclientkey=/root/rpmbuild/docker/certs/key.pem
sslclientcert=/root/rpmbuild/docker/certs/cert.pem
</code></pre>

<h2>packages</h2>

<ul>
<li><code>g++</code>: <code>yum install gcc-c++</code></li>
<li><code>rpmbuild</code>: <code>yum intall rpm-build</code></li>
</ul>
2020/03/18 22:33:02 Segment &{yum 1 map[]}
2020/03/18 22:33:02 Segment &{search 1 map[]}
2020/03/18 22:33:02 Segment &{list 1 map[]}
2020/03/18 22:33:02 Segment &{repositories 1 map[]}
2020/03/18 22:33:02 Segment &{these can be configured by adding a file to  1 map[]}
2020/03/18 22:33:02 Segment &{/etc/yum.repos.d/<repo>.repo 9 map[]}
2020/03/18 22:33:02 Segment &{ with content e.g.: 1 map[]}
2020/03/18 22:33:02 Segment &{packages 1 map[]}
2020/03/18 22:33:02 Segment &{g++ 9 map[]}
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Segment &{yum install gcc-c++ 9 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{rpmbuild 9 map[]}
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Segment &{yum intall rpm-build 9 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{:  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:33:02 Whaaat? hr
2020/03/18 22:33:02 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:33:02 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:33:02 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:33:02 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:33:02 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:33:02 Whaaat? strong
2020/03/18 22:33:02 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:33:02 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:33:02 Whaaat? hr
2020/03/18 22:33:02 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:33:02 Segment &{h2 Heading 1 map[]}
2020/03/18 22:33:02 Segment &{h3 Heading 1 map[]}
2020/03/18 22:33:02 Segment &{h4 Heading 1 map[]}
2020/03/18 22:33:02 Segment &{h5 Heading 1 map[]}
2020/03/18 22:33:02 Segment &{h6 Heading 1 map[]}
2020/03/18 22:33:02 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:33:02 Whaaat? hr
2020/03/18 22:33:02 Whaaat? hr
2020/03/18 22:33:02 Whaaat? hr
2020/03/18 22:33:02 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:33:02 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:33:02 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:33:02 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:33:02 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:33:02 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:33:02 Segment &{Emphasis 1 map[]}
2020/03/18 22:33:02 Segment &{This is bold text 5 map[]}
2020/03/18 22:33:02 Segment &{This is bold text 5 map[]}
2020/03/18 22:33:02 Segment &{This is italic text 3 map[]}
2020/03/18 22:33:02 Segment &{This is italic text 3 map[]}
2020/03/18 22:33:02 Segment &{Strikethrough 1 map[]}
2020/03/18 22:33:02 Segment &{Blockquotes 1 map[]}
2020/03/18 22:33:02 Segment &{Lists 1 map[]}
2020/03/18 22:33:02 Segment &{Unordered 1 map[]}
2020/03/18 22:33:02 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:33:02 Segment &{+ 9 map[]}
2020/03/18 22:33:02 Segment &{,  1 map[]}
2020/03/18 22:33:02 Segment &{- 9 map[]}
2020/03/18 22:33:02 Segment &{, or  1 map[]}
2020/03/18 22:33:02 Segment &{* 9 map[]}
2020/03/18 22:33:02 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{,  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{, or  1 map[]}
2020/03/18 22:33:02 Whaaat? code
2020/03/18 22:33:02 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:33:02 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:02 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:02 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:02 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:02 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:02 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:02 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:02 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:02 Segment &{Very easy! 1 map[]}
2020/03/18 22:33:02 Segment &{Very easy! 1 map[]}
2020/03/18 22:33:02 Segment &{Ordered 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{Code 1 map[]}
2020/03/18 22:33:02 Segment &{Inline  1 map[]}
2020/03/18 22:33:02 Segment &{code 9 map[]}
2020/03/18 22:33:02 Segment &{Indented code 1 map[]}
2020/03/18 22:33:02 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:33:02 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:33:02 Segment &{Tables 1 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:33:02 Whaaat? table
2020/03/18 22:33:02 Segment &{Links 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:33:02 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:33:02 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:33:02 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:33:02 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:33:02 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:33:02 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:33:02 Segment &{Images 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:33:02 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:33:02 Segment &{Plugins 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:33:02 Segment &{The killer feature of  1 map[]}
2020/03/18 22:33:02 Segment &{markdown-it 9 map[]}
2020/03/18 22:33:02 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:33:02 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:33:02 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:33:02 Segment &{see  1 map[]}
2020/03/18 22:33:02 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:33:02 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:33:02 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:33:02 Segment &{ /  1 map[]}
2020/03/18 22:33:02 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:33:02 Segment &{19^th^ 1 map[]}
2020/03/18 22:33:02 Segment &{19^th^ 1 map[]}
2020/03/18 22:33:02 Segment &{H~2~O 1 map[]}
2020/03/18 22:33:02 Segment &{H~2~O 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:33:02 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:33:02 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:33:02 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:33:02 Segment &{==Marked text== 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:33:02 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:33:02 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:33:02 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:33:02 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:33:02 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:33:02 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:33:02 Segment &{can have markup 5 map[]}
2020/03/18 22:33:02 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:33:02 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:33:02 Whaaat? dl
2020/03/18 22:33:02 Segment &{Compact style: 3 map[]}
2020/03/18 22:33:02 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:33:02 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:33:02 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:33:02 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:33:02 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:33:02 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:33:02 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:33:02 Segment &{::: warning
 1 map[]}
2020/03/18 22:33:02 Segment &{here be dragons 3 map[]}
2020/03/18 22:33:02 Segment &{
::: 1 map[]}
2020/03/18 22:33:02 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:33:02 Segment &{test 1 map[]}
2020/03/18 22:33:02 Segment &{hello there. this is  1 map[]}
2020/03/18 22:33:02 Segment &{formatted with  3 map[]}
2020/03/18 22:33:02 Segment &{bold 7 map[]}
2020/03/18 22:33:02 Segment &{ and 3 map[]}
2020/03/18 22:33:02 Segment &{ with some  1 map[]}
2020/03/18 22:33:02 Segment &{bold text 5 map[]}
2020/03/18 22:33:02 Segment &{ and some  1 map[]}
2020/03/18 22:33:02 Segment &{inline code 9 map[]}
2020/03/18 22:33:02 Segment &{. 1 map[]}
2020/03/18 22:33:02 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:33:02 Segment &{As a special treat,  1 map[]}
2020/03/18 22:33:02 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:33:02 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:33:02 Segment &{foofoo 1 map[]}
2020/03/18 22:33:02 Segment &{Heading 3 1 map[]}
2020/03/18 22:33:02 Segment &{heading 3 content 1 map[]}
2020/03/18 22:33:02 Segment &{Heading 4 1 map[]}
2020/03/18 22:33:02 Segment &{heading 4 content 1 map[]}
2020/03/18 22:33:02 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:33:02 Segment &{Heading 5 1 map[]}
2020/03/18 22:33:02 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:33:02 Segment &{one 1 map[]}
2020/03/18 22:33:02 Segment &{one 1 map[]}
2020/03/18 22:33:02 Segment &{two 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{with some code
 9 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:33:02 Segment &{inline code 9 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{inner list biatch 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{number 2 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{two 1 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Segment &{
 1 map[]}
2020/03/18 22:33:02 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:33:02 Segment &{inline code 9 map[]}
2020/03/18 22:33:02 Segment &{

 1 map[]}
2020/03/18 22:33:02 Whaaat? ol
2020/03/18 22:33:02 Segment &{three 1 map[]}
2020/03/18 22:33:02 Segment &{three 1 map[]}
2020/03/18 22:33:02 Segment &{Heading 6 1 map[]}
2020/03/18 22:33:02 Segment &{heading 6 content 1 map[]}
2020/03/18 22:33:02 Segment &{####### H7? 1 map[]}
2020/03/18 22:33:02 Segment &{no such thing 1 map[]}
2020/03/18 22:33:10 File /Users/thomgray/Documents/codebook/.DS_Store
2020/03/18 22:33:10 File /Users/thomgray/Documents/codebook/foo.md
2020/03/18 22:33:10 File /Users/thomgray/Documents/codebook/note-worthy
2020/03/18 22:33:10 File /Users/thomgray/Documents/codebook/test.md
2020/03/18 22:33:10 <hr />

<p><strong>Advertisement :)</strong></p>

<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>

<p>You will like those projects!</p>

<hr />

<h1>h1 Heading 8-)</h1>

<h2>h2 Heading</h2>

<h3>h3 Heading</h3>

<h4>h4 Heading</h4>

<h5>h5 Heading</h5>

<h6>h6 Heading</h6>

<h2>Horizontal Rules</h2>

<hr />

<hr />

<hr />

<h2>Typographic replacements</h2>

<p>Enable typographer option to see result.</p>

<p>&copy; &copy; &reg; &reg; &trade; &trade; (p) (P) +-</p>

<p>test.. test&hellip; test&hellip;.. test?&hellip;.. test!&hellip;.</p>

<p>!!!!!! ???? ,,  &ndash; &mdash;</p>

<p>&ldquo;Smartypants, double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>

<h2>Emphasis</h2>

<p><strong>This is bold text</strong></p>

<p><strong>This is bold text</strong></p>

<p><em>This is italic text</em></p>

<p><em>This is italic text</em></p>

<p><del>Strikethrough</del></p>

<h2>Blockquotes</h2>

<blockquote>
<p>Blockquotes can also be nested&hellip;
&gt; &hellip;by using additional greater-than signs right next to each other&hellip;
&gt; &gt; &hellip;or with spaces between arrows.</p>
</blockquote>

<h2>Lists</h2>

<p>Unordered</p>

<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:

<ul>
<li>Marker character change forces new list start:</li>
<li>Ac tristique libero volutpat at</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit</li>
</ul></li>
<li>Very easy!</li>
</ul>

<p>Ordered</p>

<ol>
<li><p>Lorem ipsum dolor sit amet</p></li>

<li><p>Consectetur adipiscing elit</p></li>

<li><p>Integer molestie lorem at massa</p></li>

<li><p>You can use sequential numbers&hellip;</p></li>

<li><p>&hellip;or keep all the numbers as <code>1.</code></p></li>
</ol>

<p>Start numbering with offset:</p>

<ol>
<li>foo</li>
<li>bar</li>
</ol>

<h2>Code</h2>

<p>Inline <code>code</code></p>

<p>Indented code</p>

<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>

<p>Block code &ldquo;fences&rdquo;</p>

<pre><code>Sample text here...
</code></pre>

<p>Syntax highlighting</p>

<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>

<h2>Tables</h2>

<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>

<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>

<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>

<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>

<h2>Links</h2>

<p><a href="http://dev.nodeca.com">link text</a></p>

<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>

<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>

<h2>Images</h2>

<p><img src="https://octodex.github.com/images/minion.png" alt="Minion" />
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat" /></p>

<p>Like links, Images also have a footnote style syntax</p>

<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat" /></p>

<p>With a reference later in the document defining the URL location:</p>

<h2>Plugins</h2>

<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>

<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>

<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>

<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>

<ul>
<li>19^th^</li>
<li>H~2~O</li>
</ul>

<h3><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>

<p>++Inserted text++</p>

<h3><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>

<p>==Marked text==</p>

<h3><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>

<p>Footnote 1 link[^first].</p>

<p>Footnote 2 link[^second].</p>

<p>Inline footnote^[Text of inline footnote] definition.</p>

<p>Duplicated footnote reference[^second].</p>

<p>[^first]: Footnote <strong>can have markup</strong></p>

<pre><code>and multiple paragraphs.
</code></pre>

<p>[^second]: Footnote text.</p>

<h3><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>

<dl>
<dt>Term 1</dt>
<dd><p>Definition 1
with lazy continuation.</p></dd>
<dt>Term 2 with <em>inline markup</em></dt>
<dd><p>Definition 2</p>

<pre><code>{ some code, part of Definition 2 }
</code></pre>
<p>Third paragraph of definition 2.</p></dd>
</dl>

<p><em>Compact style:</em></p>

<p>Term 1
  ~ Definition 1</p>

<p>Term 2
  ~ Definition 2a
  ~ Definition 2b</p>

<h3><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>

<p>This is HTML abbreviation example.</p>

<p>It converts &ldquo;HTML&rdquo;, but keep intact partial entries like &ldquo;xxxHTMLyyy&rdquo; and so on.</p>

<p>*[HTML]: Hyper Text Markup Language</p>

<h3><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>

<p>::: warning
<em>here be dragons</em>
:::</p>
2020/03/18 22:33:10 Whaaat? hr
2020/03/18 22:33:10 Segment &{Advertisement :) 5 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://nodeca.github.io/pica/demo/}]. raw = 'pica'
2020/03/18 22:33:10 Segment &{pica 21 map[href:https://nodeca.github.io/pica/demo/]}
2020/03/18 22:33:10 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:33:10 Whaaat? strong
2020/03/18 22:33:10 Segment &{ - high quality and fast image
resize in browser. 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/nodeca/babelfish/}]. raw = 'babelfish'
2020/03/18 22:33:10 Segment &{babelfish 21 map[href:https://github.com/nodeca/babelfish/]}
2020/03/18 22:33:10 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:33:10 Whaaat? strong
2020/03/18 22:33:10 Segment &{ - developer friendly
i18n with plurals support and easy syntax. 1 map[]}
2020/03/18 22:33:10 Segment &{You will like those projects! 1 map[]}
2020/03/18 22:33:10 Whaaat? hr
2020/03/18 22:33:10 Segment &{h1 Heading 8-) 1 map[]}
2020/03/18 22:33:10 Segment &{h2 Heading 1 map[]}
2020/03/18 22:33:10 Segment &{h3 Heading 1 map[]}
2020/03/18 22:33:10 Segment &{h4 Heading 1 map[]}
2020/03/18 22:33:10 Segment &{h5 Heading 1 map[]}
2020/03/18 22:33:10 Segment &{h6 Heading 1 map[]}
2020/03/18 22:33:10 Segment &{Horizontal Rules 1 map[]}
2020/03/18 22:33:10 Whaaat? hr
2020/03/18 22:33:10 Whaaat? hr
2020/03/18 22:33:10 Whaaat? hr
2020/03/18 22:33:10 Segment &{Typographic replacements 1 map[]}
2020/03/18 22:33:10 Segment &{Enable typographer option to see result. 1 map[]}
2020/03/18 22:33:10 Segment &{© © ® ® ™ ™ (p) (P) +- 1 map[]}
2020/03/18 22:33:10 Segment &{test.. test… test….. test?….. test!…. 1 map[]}
2020/03/18 22:33:10 Segment &{!!!!!! ???? ,,  – — 1 map[]}
2020/03/18 22:33:10 Segment &{“Smartypants, double quotes” and ‘single quotes’ 1 map[]}
2020/03/18 22:33:10 Segment &{Emphasis 1 map[]}
2020/03/18 22:33:10 Segment &{This is bold text 5 map[]}
2020/03/18 22:33:10 Segment &{This is bold text 5 map[]}
2020/03/18 22:33:10 Segment &{This is italic text 3 map[]}
2020/03/18 22:33:10 Segment &{This is italic text 3 map[]}
2020/03/18 22:33:10 Segment &{Strikethrough 1 map[]}
2020/03/18 22:33:10 Segment &{Blockquotes 1 map[]}
2020/03/18 22:33:10 Segment &{Lists 1 map[]}
2020/03/18 22:33:10 Segment &{Unordered 1 map[]}
2020/03/18 22:33:10 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:33:10 Segment &{+ 9 map[]}
2020/03/18 22:33:10 Segment &{,  1 map[]}
2020/03/18 22:33:10 Segment &{- 9 map[]}
2020/03/18 22:33:10 Segment &{, or  1 map[]}
2020/03/18 22:33:10 Segment &{* 9 map[]}
2020/03/18 22:33:10 Segment &{Create a list by starting a line with  1 map[]}
2020/03/18 22:33:10 Whaaat? code
2020/03/18 22:33:10 Segment &{,  1 map[]}
2020/03/18 22:33:10 Whaaat? code
2020/03/18 22:33:10 Segment &{, or  1 map[]}
2020/03/18 22:33:10 Whaaat? code
2020/03/18 22:33:10 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Sub-lists are made by indenting 2 spaces:

 1 map[]}
2020/03/18 22:33:10 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:10 Segment &{Marker character change forces new list start: 1 map[]}
2020/03/18 22:33:10 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:10 Segment &{Ac tristique libero volutpat at 1 map[]}
2020/03/18 22:33:10 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:10 Segment &{Facilisis in pretium nisl aliquet 1 map[]}
2020/03/18 22:33:10 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:10 Segment &{Nulla volutpat aliquam velit 1 map[]}
2020/03/18 22:33:10 Segment &{Very easy! 1 map[]}
2020/03/18 22:33:10 Segment &{Very easy! 1 map[]}
2020/03/18 22:33:10 Segment &{Ordered 1 map[]}
2020/03/18 22:33:10 Whaaat? ol
2020/03/18 22:33:10 Segment &{Start numbering with offset: 1 map[]}
2020/03/18 22:33:10 Whaaat? ol
2020/03/18 22:33:10 Segment &{Code 1 map[]}
2020/03/18 22:33:10 Segment &{Inline  1 map[]}
2020/03/18 22:33:10 Segment &{code 9 map[]}
2020/03/18 22:33:10 Segment &{Indented code 1 map[]}
2020/03/18 22:33:10 Segment &{Block code “fences” 1 map[]}
2020/03/18 22:33:10 Segment &{Syntax highlighting 1 map[]}
2020/03/18 22:33:10 Segment &{Tables 1 map[]}
2020/03/18 22:33:10 Whaaat? table
2020/03/18 22:33:10 Segment &{Right aligned columns 1 map[]}
2020/03/18 22:33:10 Whaaat? table
2020/03/18 22:33:10 Segment &{Links 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href http://dev.nodeca.com}]. raw = 'link text'
2020/03/18 22:33:10 Segment &{link text 17 map[href:http://dev.nodeca.com]}
2020/03/18 22:33:10 >>>>> atts = [{ href http://nodeca.github.io/pica/demo/} { title title text!}]. raw = 'link with title'
2020/03/18 22:33:10 Segment &{link with title 17 map[href:http://nodeca.github.io/pica/demo/]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/nodeca/pica}]. raw = 'https://github.com/nodeca/pica'
2020/03/18 22:33:10 Segment &{Autoconverted link  1 map[]}
2020/03/18 22:33:10 Segment &{https://github.com/nodeca/pica 17 map[href:https://github.com/nodeca/pica]}
2020/03/18 22:33:10 Segment &{ (enable linkify to see) 1 map[]}
2020/03/18 22:33:10 Segment &{Images 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{Like links, Images also have a footnote style syntax 1 map[]}
2020/03/18 22:33:10 Segment &{With a reference later in the document defining the URL location: 1 map[]}
2020/03/18 22:33:10 Segment &{Plugins 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://www.npmjs.org/browse/keyword/markdown-it-plugin}]. raw = 'syntax plugins'
2020/03/18 22:33:10 Segment &{The killer feature of  1 map[]}
2020/03/18 22:33:10 Segment &{markdown-it 9 map[]}
2020/03/18 22:33:10 Segment &{ is very effective support of
 1 map[]}
2020/03/18 22:33:10 Segment &{syntax plugins 17 map[href:https://www.npmjs.org/browse/keyword/markdown-it-plugin]}
2020/03/18 22:33:10 Segment &{. 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji}]. raw = 'Emojies'
2020/03/18 22:33:10 Segment &{Emojies 17 map[href:https://github.com/markdown-it/markdown-it-emoji]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-emoji#change-output}]. raw = 'how to change output'
2020/03/18 22:33:10 Segment &{see  1 map[]}
2020/03/18 22:33:10 Segment &{how to change output 17 map[href:https://github.com/markdown-it/markdown-it-emoji#change-output]}
2020/03/18 22:33:10 Segment &{ with twemoji. 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sub}]. raw = 'Subscript'
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-sup}]. raw = 'Superscript'
2020/03/18 22:33:10 Segment &{Subscript 17 map[href:https://github.com/markdown-it/markdown-it-sub]}
2020/03/18 22:33:10 Segment &{ /  1 map[]}
2020/03/18 22:33:10 Segment &{Superscript 17 map[href:https://github.com/markdown-it/markdown-it-sup]}
2020/03/18 22:33:10 Segment &{19^th^ 1 map[]}
2020/03/18 22:33:10 Segment &{19^th^ 1 map[]}
2020/03/18 22:33:10 Segment &{H~2~O 1 map[]}
2020/03/18 22:33:10 Segment &{H~2~O 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-ins}]. raw = '<ins>'
2020/03/18 22:33:10 Segment &{<ins> 17 map[href:https://github.com/markdown-it/markdown-it-ins]}
2020/03/18 22:33:10 Segment &{++Inserted text++ 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-mark}]. raw = '<mark>'
2020/03/18 22:33:10 Segment &{<mark> 17 map[href:https://github.com/markdown-it/markdown-it-mark]}
2020/03/18 22:33:10 Segment &{==Marked text== 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-footnote}]. raw = 'Footnotes'
2020/03/18 22:33:10 Segment &{Footnotes 17 map[href:https://github.com/markdown-it/markdown-it-footnote]}
2020/03/18 22:33:10 Segment &{Footnote 1 link[^first]. 1 map[]}
2020/03/18 22:33:10 Segment &{Footnote 2 link[^second]. 1 map[]}
2020/03/18 22:33:10 Segment &{Inline footnote^[Text of inline footnote] definition. 1 map[]}
2020/03/18 22:33:10 Segment &{Duplicated footnote reference[^second]. 1 map[]}
2020/03/18 22:33:10 Segment &{[^first]: Footnote  1 map[]}
2020/03/18 22:33:10 Segment &{can have markup 5 map[]}
2020/03/18 22:33:10 Segment &{[^second]: Footnote text. 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-deflist}]. raw = 'Definition lists'
2020/03/18 22:33:10 Segment &{Definition lists 17 map[href:https://github.com/markdown-it/markdown-it-deflist]}
2020/03/18 22:33:10 Whaaat? dl
2020/03/18 22:33:10 Segment &{Compact style: 3 map[]}
2020/03/18 22:33:10 Segment &{Term 1
  ~ Definition 1 1 map[]}
2020/03/18 22:33:10 Segment &{Term 2
  ~ Definition 2a
  ~ Definition 2b 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-abbr}]. raw = 'Abbreviations'
2020/03/18 22:33:10 Segment &{Abbreviations 17 map[href:https://github.com/markdown-it/markdown-it-abbr]}
2020/03/18 22:33:10 Segment &{This is HTML abbreviation example. 1 map[]}
2020/03/18 22:33:10 Segment &{It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. 1 map[]}
2020/03/18 22:33:10 Segment &{*[HTML]: Hyper Text Markup Language 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://github.com/markdown-it/markdown-it-container}]. raw = 'Custom containers'
2020/03/18 22:33:10 Segment &{Custom containers 17 map[href:https://github.com/markdown-it/markdown-it-container]}
2020/03/18 22:33:10 Segment &{::: warning
 1 map[]}
2020/03/18 22:33:10 Segment &{here be dragons 3 map[]}
2020/03/18 22:33:10 Segment &{
::: 1 map[]}
2020/03/18 22:33:10 <h1>test</h1>

<p>hello there. this is <em>formatted with <strong>bold</strong> and</em> with some <strong>bold text</strong> and some <code>inline code</code>.</p>

<p>As a special treat, <a href="https://www.google.com">here is a link</a></p>

<h2>this is a sub heading</h2>

<pre><code>and this is some code
</code></pre>

<pre><code>{
  &quot;foo&quot;: &quot;bar&quot;
}
</code></pre>

<p>foofoo</p>

<h3>Heading 3</h3>

<p>heading 3 content</p>

<blockquote>
<p>containting this quote
made by a person</p>
</blockquote>

<h4>Heading 4</h4>

<p>heading 4 content</p>

<p>here is some indented code:</p>

<pre><code>hello there
</code></pre>

<h5>Heading 5</h5>

<p>heading 5 content. This one has a list:</p>

<ul>
<li><p>one</p></li>

<li><p>two</p>

<pre><code>with some code
</code></pre>
<p>and another parahraph with <code>inline code</code></p>

<ol>
<li>inner list biatch</li>
<li>number 2</li>
</ol></li>

<li><p>three</p></li>
</ul>

<h6>Heading 6</h6>

<p>heading 6 content</p>

<p>####### H7?</p>

<p>no such thing</p>
2020/03/18 22:33:10 Segment &{test 1 map[]}
2020/03/18 22:33:10 Segment &{hello there. this is  1 map[]}
2020/03/18 22:33:10 Segment &{formatted with  3 map[]}
2020/03/18 22:33:10 Segment &{bold 7 map[]}
2020/03/18 22:33:10 Segment &{ and 3 map[]}
2020/03/18 22:33:10 Segment &{ with some  1 map[]}
2020/03/18 22:33:10 Segment &{bold text 5 map[]}
2020/03/18 22:33:10 Segment &{ and some  1 map[]}
2020/03/18 22:33:10 Segment &{inline code 9 map[]}
2020/03/18 22:33:10 Segment &{. 1 map[]}
2020/03/18 22:33:10 >>>>> atts = [{ href https://www.google.com}]. raw = 'here is a link'
2020/03/18 22:33:10 Segment &{As a special treat,  1 map[]}
2020/03/18 22:33:10 Segment &{here is a link 17 map[href:https://www.google.com]}
2020/03/18 22:33:10 Segment &{this is a sub heading 1 map[]}
2020/03/18 22:33:10 Segment &{foofoo 1 map[]}
2020/03/18 22:33:10 Segment &{Heading 3 1 map[]}
2020/03/18 22:33:10 Segment &{heading 3 content 1 map[]}
2020/03/18 22:33:10 Segment &{Heading 4 1 map[]}
2020/03/18 22:33:10 Segment &{heading 4 content 1 map[]}
2020/03/18 22:33:10 Segment &{here is some indented code: 1 map[]}
2020/03/18 22:33:10 Segment &{Heading 5 1 map[]}
2020/03/18 22:33:10 Segment &{heading 5 content. This one has a list: 1 map[]}
2020/03/18 22:33:10 Segment &{one 1 map[]}
2020/03/18 22:33:10 Segment &{one 1 map[]}
2020/03/18 22:33:10 Segment &{two 1 map[]}
2020/03/18 22:33:10 Segment &{

 1 map[]}
2020/03/18 22:33:10 Segment &{with some code
 9 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:33:10 Segment &{inline code 9 map[]}
2020/03/18 22:33:10 Segment &{

 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{inner list biatch 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{number 2 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{two 1 map[]}
2020/03/18 22:33:10 Segment &{

 1 map[]}
2020/03/18 22:33:10 Segment &{
 1 map[]}
2020/03/18 22:33:10 Segment &{and another parahraph with  1 map[]}
2020/03/18 22:33:10 Segment &{inline code 9 map[]}
2020/03/18 22:33:10 Segment &{

 1 map[]}
2020/03/18 22:33:10 Whaaat? ol
2020/03/18 22:33:10 Segment &{three 1 map[]}
2020/03/18 22:33:10 Segment &{three 1 map[]}
2020/03/18 22:33:10 Segment &{Heading 6 1 map[]}
2020/03/18 22:33:10 Segment &{heading 6 content 1 map[]}
2020/03/18 22:33:10 Segment &{####### H7? 1 map[]}
2020/03/18 22:33:10 Segment &{no such thing 1 map[]}
